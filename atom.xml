<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>六个周</title>
  
  <subtitle>liugezhou</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://liugezhou.online/"/>
  <updated>2019-11-08T03:20:21.408Z</updated>
  <id>http://liugezhou.online/</id>
  
  <author>
    <name>liugezhou</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>No1.宏观视角下的浏览器</title>
    <link href="http://liugezhou.online/2019/11/03/No1.%E5%AE%8F%E8%A7%82%E8%A7%86%E8%A7%92%E4%B8%8B%E7%9A%84%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
    <id>http://liugezhou.online/2019/11/03/No1.宏观视角下的浏览器/</id>
    <published>2019-11-03T15:20:00.000Z</published>
    <updated>2019-11-08T03:20:21.408Z</updated>
    
    <content type="html"><![CDATA[<h6 id="前端时间在《极客时间》上学了一个专栏，通篇略过，干货不少，但理解相当不够透彻，于是计划用几周的时间，对本专栏内容用作者的总结以及自己的相对逐字理解，来个通篇的文字记录学习，书读百遍，其义自现。"><a href="#前端时间在《极客时间》上学了一个专栏，通篇略过，干货不少，但理解相当不够透彻，于是计划用几周的时间，对本专栏内容用作者的总结以及自己的相对逐字理解，来个通篇的文字记录学习，书读百遍，其义自现。" class="headerlink" title="前端时间在《极客时间》上学了一个专栏，通篇略过，干货不少，但理解相当不够透彻，于是计划用几周的时间，对本专栏内容用作者的总结以及自己的相对逐字理解，来个通篇的文字记录学习，书读百遍，其义自现。"></a>前端时间在《极客时间》上学了一个专栏，通篇略过，干货不少，但理解相当不够透彻，于是计划用几周的时间，对本专栏内容用作者的总结以及自己的相对逐字理解，来个通篇的文字记录学习，书读百遍，其义自现。</h6><h6 id="本篇是这个专栏的第一章：《宏观视角下的浏览器》。本章分为六讲。"><a href="#本篇是这个专栏的第一章：《宏观视角下的浏览器》。本章分为六讲。" class="headerlink" title="本篇是这个专栏的第一章：《宏观视角下的浏览器》。本章分为六讲。"></a>本篇是这个专栏的第一章：《宏观视角下的浏览器》。本章分为六讲。</h6><a id="more"></a><h4 id="01-Chrome架构：仅仅打开一个页面，为什么有四个进程"><a href="#01-Chrome架构：仅仅打开一个页面，为什么有四个进程" class="headerlink" title="01.Chrome架构：仅仅打开一个页面，为什么有四个进程"></a>01.Chrome架构：仅仅打开一个页面，为什么有四个进程</h4><hr><blockquote><p>在谷歌浏览器随便打开一个页面，点击“选项”菜单，选择“更多工具”，点击“任务管理器”，这将打开Chrome的任务管理器的窗口，你会发现一个页面上有四个以上的进程。为什么会有四个进程呢？<br>本章通过分析浏览器的进化史而展开探讨这个问题。<br>开始之前，我们必须得了解一下这个<code>进程</code>与<code>线程</code>的概念。  </p></blockquote><h5 id="线程-VS-进程"><a href="#线程-VS-进程" class="headerlink" title="线程 VS 进程"></a>线程 VS 进程</h5><blockquote><p><code>线程这个东西它是不能单独存在的，它是由进程来启动和管理的。</code> </p><p><code>一个进程就是一个程序的运行实例</code>。</p><p><code>线程是依附于进程的，而进程中使用多线程并行处理能提升运算效率</code>。  </p><p>总结，线程与进程之间的关系有以下四个特点：</p><ol><li>进程中任一线程执行出错，都会导致整个进程崩溃。 </li><li>线程之间共享进程的数据。   </li><li>当一个进程关闭之后，操作系统会回收进程所占用的内存。   </li><li>进程之间的内容都互相隔离。(如果进程之间需要进行数据的通信，这时候需要使用用于进程间通讯(IPC)机制了)。</li></ol></blockquote><h5 id="单进程浏览器时代"><a href="#单进程浏览器时代" class="headerlink" title="单进程浏览器时代"></a>单进程浏览器时代</h5><blockquote><p>早在07年之前，市面上的浏览器都是单进程的。单进程，顾名思义是指：浏览器的所有功能模块都运行在同一个进程里。<br>如此多的功能模块运行在一个进程里，导致单进程浏览器<code>不稳定</code>、<code>不流畅</code>、<code>不安全</code>。<br>具体的表现就不说了，总之体验非常差，于是进入了“多线程浏览器”时代。    </p></blockquote><h5 id="多进程浏览器时代"><a href="#多进程浏览器时代" class="headerlink" title="多进程浏览器时代"></a>多进程浏览器时代</h5><blockquote><ul><li>多进程浏览器由于进程相互隔离，所以当一个页面或者插件崩溃的时候，影响的仅仅是当前的页面进程或者插件过程。这就完美解决了页面或者插件崩溃而导致的整个浏览器崩溃问题。JS的渲染若出现问题，影响的同样是当前的渲染页面，没有响应的仅对当前页面。而且在多进程浏览器时代，当关闭一个页面的时候，整个渲染进程会被关闭，该进程占用的内存都会被系统回收，这样也就轻松解决了浏览器页面的内存泄露问题。    </li><li>此外有关安全方面的问题：使用多线程架构可以使用<code>安全沙箱</code>。  </li></ul><p>可以把沙箱看成是操作系统给进程上了一把锁，沙箱里面的程序可以运行，但是不能在硬盘上写入任何数据，也不能在敏感位置读取任何数据(例如文档和桌面)，Chrome把插件进程和渲染进程锁在沙箱里面，这样即使在渲染进程或者插件进程里面执行了恶意程序，恶意程序也无法突破沙箱去获取系统权限。</p></blockquote><h5 id="目前多进程架构"><a href="#目前多进程架构" class="headerlink" title="目前多进程架构"></a>目前多进程架构</h5><blockquote><p>最新的Chrome进程架构：Chrome浏览器包括：<code>1个浏览器(Brower)主进程，1个GPU进程、一个网络(NetWork)进程、多个渲染进程和多个插件进程</code>。<br>虽然多进程模型提升了浏览器的稳定性、流畅性、安全性，但是同样也会不可避免带来一些问题：  </p><ul><li><code>更高的资源占用</code> ：因为每个进程都会包含公共基础结构的副本（如JavaScript运行环境），这意味着浏览器会消耗更多的资源。  </li><li><code>更复杂的体系架构</code>：浏览器各模块之间耦合性高、扩展性差等问题，会导致现在的架构已经很难适应新的需求。 </li></ul></blockquote><h5 id="未来面向服务的架构-SOP"><a href="#未来面向服务的架构-SOP" class="headerlink" title="未来面向服务的架构(SOP)"></a>未来面向服务的架构(SOP)</h5><blockquote><p>为了解决这些问题，2016年，Chrome团队使用“面向服务的架构“（SOP）思想设计了新的Chrome架构，这也是现阶段Chrome团队的一个主要任务。</p></blockquote><h4 id="02｜TCP协议：如何保证页面文件能被完整的送达浏览器"><a href="#02｜TCP协议：如何保证页面文件能被完整的送达浏览器" class="headerlink" title="02｜TCP协议：如何保证页面文件能被完整的送达浏览器"></a>02｜TCP协议：如何保证页面文件能被完整的送达浏览器</h4><hr><blockquote><p>在衡量Web页面性能的时候有一个重要的指标叫”FP(First Paint)”,是指从页面加载到首次开始绘制的时长。其中影响FP的一个重要因素就是<code>网络加载速度</code>。 </p><p>要优化网络加载速度，需要对网络有充分的了解，这一节重点介绍<code>在Web世界中的TCP/IP是如何工作的</code>。 </p><p>在网络中，一个文件通常会被拆分为很多数据包来进行传输，而数据包在传输过程中有很大概览丢失或者出错，那么如何保证页面文件能被完整地送达浏览器？</p></blockquote><h5 id="一个数据包的“旅程”"><a href="#一个数据包的“旅程”" class="headerlink" title="一个数据包的“旅程”"></a>一个数据包的“旅程”</h5><blockquote><ol><li><p>IP:把数据包送达目的主机<br>计算机的地址称为IP地址，访问任何网站实际上只是你的计算机向另外一台计算机请求信息。<br>当从主机A向主机B发送数据(即发送数据包)，传输前，数据包会被附加上主机A和主机B的IP地址信息，这些信息会被封到一个叫做IP头的数据结构里，在这个IP头中包含IP数据包开头的信息(IP版本、源IP地址、目标地址、生存时间等信息)，于是数据包从主机A发送到主机B。  </p></li><li><p>UDP:把数据包送达应用程序<br>IP通过IP地址信息把数据包发送给指定的电脑，而UDP通过端口号把数据包发给正确的程序。<br>UDP发送数据，有各种因素会导致数据包出错，虽然UDP可以校验数据是否正确，但是<code>UDP不提供重发机制</code>，只是丢弃当前的包，且UDP在发送之后无法知道能否到达目的地。<br><code>UDP不能保证数据可靠性，但是传输速度却非常快</code>，因此UDP应用在一些关注速度但不那么严格要求数据完整性的领域，例如：在线视频、互动游戏等。  </p></li><li><p>TCP:把数据完整的送达应用程序<br>TCP(Transmission Control Protocol,传输控制协议)：他是一种面向连接的、可靠的、基于字节流的传输层通信协议。相对于UDP而言：  </p></li></ol><ul><li>对于数据包丢失情况，提供重传机制。  </li><li>TCP引入数据包排序机制，用来保证把乱序的数据包组合成一个完整的文件。 </li></ul></blockquote><h5 id="完整的TCP连接过程"><a href="#完整的TCP连接过程" class="headerlink" title="完整的TCP连接过程"></a>完整的TCP连接过程</h5><blockquote><p>我们现在已经知道TCP单个数据包的传输流程和UDP流程差不多，不同在于，通过TCP头信息可以保证一块大的数据传输的完整性。<br>一个完整的TCP连接过程，其生命周期包括了“建立连接“、”数据传输“、”断开连接“三个阶段。</p><ul><li>建立连接阶段：这个阶段通过“三次握手”来建立客户端和服务器之间的连接。  </li><li>数据传输阶段：在该阶段，接收端需要对每个数据包进行确认操作。接收端应该在接收数据后要发送确认数据包给发送端，若发送端没有接收到这个确认，则判断数据包丢失，并触发发送端的重发机制。  </li><li>断开连接阶段：数据传输完毕，终止连接，通过最后一个阶段“四次挥手”来保证双方都能断开连接。</li></ul></blockquote><h4 id="03｜HTTP请求流程：为什么很多站点第二次打开速度会很快？"><a href="#03｜HTTP请求流程：为什么很多站点第二次打开速度会很快？" class="headerlink" title="03｜HTTP请求流程：为什么很多站点第二次打开速度会很快？"></a>03｜HTTP请求流程：为什么很多站点第二次打开速度会很快？</h4><hr><blockquote><p>首先的首先我们知道：HTTP协议建立在TCP连接基础之上的。<code>HTTP是一种允许浏览器向服务器获取资源的协议，是Web的基础。HTTP是浏览器使用最广的协议</code>。</p><p>简单说说HTTP和TCP的关系：浏览器使用HTTP协议作为<code>应用层协议</code>，用来封装请求的文本信息，并使用TCP/IP作为<code>传输层协议</code>将它发到网路上,所以HTTP工作前，需要通过TCP与服务器建立连接，也就是说：<code>HTTP的内容是通过TCP的传输数据阶段来实现的</code>。</p></blockquote><h5 id="浏览器端发起HTTP请求流程"><a href="#浏览器端发起HTTP请求流程" class="headerlink" title="浏览器端发起HTTP请求流程"></a>浏览器端发起HTTP请求流程</h5><blockquote><p>如果在浏览器地址栏里输入：<a href="https://www.liugezhou.online" target="_blank" rel="noopener">https://www.liugezhou.online</a> 这个网址后,浏览器这个庞然大物，它的背后都做些什么呢？</p></blockquote><ul><li>构建请求<blockquote><p>首先浏览器构建请求行信息，构建好之后，浏览器准备发起网路请求。</p></blockquote></li><li>查找缓存<blockquote><p>在准备发起网路请求阶段，浏览器偷偷的在它的缓存中查询是否有要请求的资源。<br>若有：拦截请求，返回资源副本，直接结束请求。<br>若缓存查找失败：继续下一步。  </p></blockquote></li><li>准备IP地址和端口号<blockquote><p>这个IP地址和端口号的获取，肯定是通过域名与其映射，即“域名系统”，也就是我们熟知的DNS。<br>于是，浏览器第一步会请求DNS返回域名对应的IP，如果没有特别指明端口号，则默认为80。<br>(浏览器提供了DNS数据缓存服务，若缓存过也就不会去请求，直接解析。从而减少一次网络请求)</p></blockquote></li><li>等待TCP队列<blockquote><p>拿到IP地址与端口号后，还需要在TCP队列中排队才能建立TCP连接。<br>这是因为：Chrome有个机制，同一个域名同时最多只能建立6个TCP连接，若此刻同时有10个请求发生。则四个会进入TCP队列进行排队。<br>当然，若当前请求数量少于6个，则会直接进入下一步。 </p></blockquote></li><li>建立TCP连接 <blockquote><p>建立TCP连接，上一节我们已经知道，一个完整的TCP连接过程包括“建立连接”、“数据传输”、“断开连接“三个阶段。  </p></blockquote></li><li>发送HTTP请求<blockquote><p>HTTP请求是在TCP连接的数据传输阶段工作的，这个时候浏览器向服务器发送请求行，它包括请求方法、请求URI、HTTP版本协议。，HTTP中的数据在这个通信过程中传输。</p></blockquote></li></ul><h5 id="服务器端处理HTTP请求流程"><a href="#服务器端处理HTTP请求流程" class="headerlink" title="服务器端处理HTTP请求流程"></a>服务器端处理HTTP请求流程</h5><blockquote><p>这里可以在命令行中输入<code>curl -i https://www.google.com</code>来查看返回请求数据。 (-i 返回响应行、响应头和响应体信息。 -I 不返回响应体。)<br>返回网站的HTTP协议、Connection、Location、Cache-Control等信息。 </p><p>通常情况，一旦服务器向客户端返回了请求数据，它就要关闭TCP连接，但是如果浏览器或者服务器设置了<code>Connection:keep-alive</code>，那么TCP连接在发送后将仍保持打开状态。<code>保持TCP连接可以省去下次请求时需要建立连接的时间，提升资源加载速度</code>。</p></blockquote><h5 id="问题解答"><a href="#问题解答" class="headerlink" title="问题解答"></a>问题解答</h5><ol><li>为什么很多站点第二次打开速度会很快？<blockquote><p>主要原因肯定是第一次加载页面的过程中，缓存了一些数据(从上面的过程分析，我们知道<code>DNS缓存</code>和<code>页面资源缓存</code>这两块数据是会被浏览器缓存起来的).<br>网站把很多资源都缓存到了本地，浏览器缓存直接使用本地副本来回应请求，而不会产生真实的网络请求，从而节省了时间。</p></blockquote></li><li>登录状态是如何保持的 <blockquote><p>简单地说，如果服务器端发送的响应头内有 Set-Cookie 的字段，那么浏览器就会将该字段的内容保持到本地。当下次客户端再往该服务器发送请求时，客户端会自动在请求头中加入 Cookie 值后再发送出去。服务器端发现客户端发送过来的 Cookie 后，会去检查究竟是从哪一个客户端发来的连接请求，然后对比服务器上的记录，最后得到该用户的状态信息。</p></blockquote></li></ol><h4 id="04｜导航流程：从输入URl到页面展示，这中间发生了什么"><a href="#04｜导航流程：从输入URl到页面展示，这中间发生了什么" class="headerlink" title="04｜导航流程：从输入URl到页面展示，这中间发生了什么"></a>04｜导航流程：从输入URl到页面展示，这中间发生了什么</h4><hr><blockquote><p>流程开始前，回顾下浏览器进程、网络进程、渲染进程的各自主要职责：  </p><ul><li>浏览器进程：主要负责<code>用户交互</code>、<code>子进程管理</code>和<code>文件储存</code>等功能。  </li><li>网络进程：面向渲染进程或浏览器进程提供<code>网络资源下载</code>。  </li><li>渲染进程：将HTML、CSS、JS、图片等资源解析为可以显示和交互的页面。 </li></ul></blockquote><h5 id="过程大致描述"><a href="#过程大致描述" class="headerlink" title="过程大致描述"></a>过程大致描述</h5><blockquote><ul><li>首先，用户从浏览器进程中输入请求信息。  </li><li>然后，网络进程发起URL请求。 </li><li>服务器响应URL请求后，浏览器进程开始准备渲染进程。 </li><li>渲染进程准备好以后，需要先向渲染进程提交页面数据，这称之为文档提交阶段。  </li><li>渲染进程接收到文档信息之后，便开始解析页面和加载子资源，完成页面的渲染。<br>这其中，用户发出URL请求到页面开始解析的过程，就叫做导航。</li></ul></blockquote><h5 id="从输入URL到页面展示–过程细节"><a href="#从输入URL到页面展示–过程细节" class="headerlink" title="从输入URL到页面展示–过程细节"></a>从输入URL到页面展示–过程细节</h5><blockquote><ul><li>响应数据类型处理：根据服务端返回的<code>Content-Type</code>字段来决定如何显示响应体的内容。</li><li>同一站点下的多个页面会运行在一个渲染进程中。</li></ul></blockquote><h5 id="“从输入-URL-到页面展示，这中间发生了什么？”-留言总结"><a href="#“从输入-URL-到页面展示，这中间发生了什么？”-留言总结" class="headerlink" title="“从输入 URL 到页面展示，这中间发生了什么？”(留言总结)"></a>“从输入 URL 到页面展示，这中间发生了什么？”(留言总结)</h5><blockquote><ol><li>用户输入url并回车·</li><li>浏览器进程检查url，组装协议，构成完整的url</li><li>浏览器进程通过进程间通信（IPC）把url请求发送给网络进程</li><li>网络进程接收到url请求后检查本地缓存是否缓存了该请求资源，如果有则将该资源返回给浏览器进程</li><li>如果没有，网络进程向web服务器发起http请求（网络请求），请求流程如下：<br>5.1 进行DNS解析，获取服务器ip地址，端口<br>5.2 利用ip地址和服务器建立tcp连接<br>5.3 构建请求头信息<br>5.4 发送请求头信息<br>5.5 服务器响应后，网络进程接收响应头和响应信息，并解析响应内容</li><li>网络进程解析响应流程；<br>6.1 检查状态码，如果是301/302，则需要重定向，从Location自动中读取地址，重新进行第4步<br>6.2 200响应处理： <pre><code>检查响应类型Content-Type，如果是字节流类型，则将该请求提交给下载管理器，该导航流程结束，不再进行后续的渲染，如果是html则通知浏览器进程准备渲染进程准备进行渲染。</code></pre></li><li>准备渲染进程<br>7.1 浏览器进程检查当前url是否和之前打开的渲染进程根域名是否相同，如果相同，则复用原来的进程，如果不同，则开启新的渲染进程</li><li>传输数据、更新状态<br>8.1 渲染进程准备好后，浏览器向渲染进程发起“提交文档”的消息，渲染进程接收到消息和网络进程建立传输数据的“管道”<br>8.2 渲染进程接收完数据后，向浏览器发送“确认提交”<br>8.3 浏览器进程接收到确认消息后更新浏览器界面状态：安全、地址栏url、前进后退的历史状态、更新web页面。</li></ol></blockquote><h4 id="05｜渲染流程-上-：HTML、CSS和JavaScript，是如何变成页面的"><a href="#05｜渲染流程-上-：HTML、CSS和JavaScript，是如何变成页面的" class="headerlink" title="05｜渲染流程(上)：HTML、CSS和JavaScript，是如何变成页面的"></a>05｜渲染流程(上)：HTML、CSS和JavaScript，是如何变成页面的</h4><hr><blockquote><p>按照渲染的时间顺序，渲染流水线可分为以下几个构建阶段：<br><code>构建DOM树</code>、<code>样式计算</code>、<code>布局阶段</code>、<code>分层</code>、<code>绘制</code>、<code>光栅化</code>、<code>合成</code>。<br>本节主要讨论前三个阶段。  </p></blockquote><h5 id="构建DOM树"><a href="#构建DOM树" class="headerlink" title="构建DOM树"></a>构建DOM树</h5><blockquote><p>因为浏览器无法直接理解和使用 HTML，所以需要将 HTML 转换为浏览器能够理解的结构——DOM 树。<br>DOM树和HTML内容几乎一样，但和HTML不同的是：DOM是保存在内存中的树结构。  </p></blockquote><h5 id="样式计算"><a href="#样式计算" class="headerlink" title="样式计算"></a>样式计算</h5><blockquote><ol><li>把CSS转换为浏览器能够理解的结构。</li><li>转换样式表中的属性值，使其标准化。<br>「例如rem -&gt; px, red -&gt; rgb(255,0,0),bold -&gt; 700」  </li><li>计算出DOM树中每个节点的具体样式。<br>「CSS继承：每个DOM节点都包含有父节点的样式」<br>「CSS层叠：它在 CSS 处于核心地位，定义了如何合并来自多个源的属性值的算法」<br>「样式来源：如果一个元素不提供任何样式，默认使用的是UserAgent样式—浏览器提供的一组默认样式」。</li></ol></blockquote><h5 id="布局阶段"><a href="#布局阶段" class="headerlink" title="布局阶段"></a>布局阶段</h5><blockquote><p>内容： 布局阶段是根据DOM树和样式计算出元素的几何位置。 </p><ol><li>创建布局树「构建一颗只包含可见元素的布局树」  </li><li>布局计算 </li></ol></blockquote><blockquote><p>「在执行布局操作的时候，会把布局运算的结果重新写回布局树中，所以布局树既是输入内容也是输出内容，这是布局阶段一个不合理的地方，因为在布局阶段并没有清晰地将输入内容和输出内容区分开来。针对这个问题，Chrome 团队正在重构布局代码，下一代布局系统叫 <code>LayoutNG</code>，试图更清晰地分离输入和输出，从而让新设计的布局算法更加简单。」</p></blockquote><h4 id="06-渲染流程-下-：HTML、CSS和JavaScript，是如何变成页面的"><a href="#06-渲染流程-下-：HTML、CSS和JavaScript，是如何变成页面的" class="headerlink" title="06|渲染流程(下)：HTML、CSS和JavaScript，是如何变成页面的"></a>06|渲染流程(下)：HTML、CSS和JavaScript，是如何变成页面的</h4><hr><h5 id="分层"><a href="#分层" class="headerlink" title="分层"></a>分层</h5><blockquote><p>为了生成一些复杂效果(3D变换、页面滚动、z轴排序等)，渲染引擎还需要为特定的节点生成专用的图层，生成一颗对应的图层树.</p><ul><li>并不是布局树的每个节点都包含一个图层，如果一个节点没有对应的层，那么这个节点就从属于父节点的图层.   </li><li>素有了层叠上下文的属性或者需要被剪裁，满足这任意一点，就会被提升成为单独一层。  </li></ul></blockquote><h5 id="绘制"><a href="#绘制" class="headerlink" title="绘制"></a>绘制</h5><blockquote><p>一个图层的绘制拆分成很多小的绘制指令，然后再把这些指令按照顺序组成一个<code>待绘制列表</code>。「可在浏览器开发者工具的Layers中查看。」</p></blockquote><h5 id="栅格化操作"><a href="#栅格化操作" class="headerlink" title="栅格化操作"></a>栅格化操作</h5><blockquote><p>所谓栅格化，是指将图块转换为位图。<br>栅格化过程都会使用 GPU 来加速生成，使用 GPU 生成位图的过程叫快速栅格化，或者 GPU 栅格化，生成的位图被保存在 GPU 内存中. </p></blockquote><h5 id="合成和显示"><a href="#合成和显示" class="headerlink" title="合成和显示"></a>合成和显示</h5><blockquote><p>一旦所有图块都被光栅化，合成线程就会生成一个绘制图块的命令——“DrawQuad”，然后将该命令提交给浏览器进程。经过浏览器就会显示出页面。  </p></blockquote><blockquote><p>一个完整的渲染流程大致可总结为如下：  </p><ul><li>渲染进程将 HTML 内容转换为能够读懂的 DOM 树结构。 </li><li>渲染引擎将 CSS 样式表转化为浏览器可以理解的 styleSheets，计算出 DOM 节点的样式。  </li><li>创建布局树，并计算元素的布局信息。对布局树进行分层，并生成分层树。  </li><li>为每个图层生成绘制列表，并将其提交到合成线程。  </li><li>合成线程将图层分成图块，并在光栅化线程池中将图块转换成位图。  </li><li>合成线程发送绘制图块命令 DrawQuad 给浏览器进程。浏览器进程根据 DrawQuad 消息生成页面，并显示到显示器上。</li></ul></blockquote><h5 id="相关概念"><a href="#相关概念" class="headerlink" title="相关概念"></a>相关概念</h5><h6 id="重排-更新了元素的几何属性"><a href="#重排-更新了元素的几何属性" class="headerlink" title="重排(更新了元素的几何属性)"></a>重排(更新了元素的几何属性)</h6><blockquote><p>使用CSS或者JS使元素的几何位置发生了改变，例如改变元素的宽度、高度等，这会使得浏览器触发重新布局、解析之后的一系列子阶段，这个过程就是重排。无疑，重排需要更新完整的渲染流水线，所以开销是最大的。 </p></blockquote><h6 id="重绘-更新元素的绘制属性"><a href="#重绘-更新元素的绘制属性" class="headerlink" title="重绘(更新元素的绘制属性)"></a>重绘(更新元素的绘制属性)</h6><blockquote><p>比如改变了元素的背景色，这会触发浏览器进行重绘之后的操作。相较于重排操作，重绘省去了布局和分层阶段，所以执行效率会比重排操作要高一些。  </p></blockquote><h6 id="直接合成阶段"><a href="#直接合成阶段" class="headerlink" title="直接合成阶段"></a>直接合成阶段</h6><blockquote><p>那如果你更改一个既不要布局也不要绘制的属性，会发生什么变化呢？渲染引擎将跳过布局和绘制，只执行后续的合成操作，我们把这个过程叫做合成.<br>例如CSS的transform实现的动画效果，可以避开重排和重绘阶段，相对于重绘和重排，合成能大大提升绘制效率。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h6 id=&quot;前端时间在《极客时间》上学了一个专栏，通篇略过，干货不少，但理解相当不够透彻，于是计划用几周的时间，对本专栏内容用作者的总结以及自己的相对逐字理解，来个通篇的文字记录学习，书读百遍，其义自现。&quot;&gt;&lt;a href=&quot;#前端时间在《极客时间》上学了一个专栏，通篇略过，干货不少，但理解相当不够透彻，于是计划用几周的时间，对本专栏内容用作者的总结以及自己的相对逐字理解，来个通篇的文字记录学习，书读百遍，其义自现。&quot; class=&quot;headerlink&quot; title=&quot;前端时间在《极客时间》上学了一个专栏，通篇略过，干货不少，但理解相当不够透彻，于是计划用几周的时间，对本专栏内容用作者的总结以及自己的相对逐字理解，来个通篇的文字记录学习，书读百遍，其义自现。&quot;&gt;&lt;/a&gt;前端时间在《极客时间》上学了一个专栏，通篇略过，干货不少，但理解相当不够透彻，于是计划用几周的时间，对本专栏内容用作者的总结以及自己的相对逐字理解，来个通篇的文字记录学习，书读百遍，其义自现。&lt;/h6&gt;&lt;h6 id=&quot;本篇是这个专栏的第一章：《宏观视角下的浏览器》。本章分为六讲。&quot;&gt;&lt;a href=&quot;#本篇是这个专栏的第一章：《宏观视角下的浏览器》。本章分为六讲。&quot; class=&quot;headerlink&quot; title=&quot;本篇是这个专栏的第一章：《宏观视角下的浏览器》。本章分为六讲。&quot;&gt;&lt;/a&gt;本篇是这个专栏的第一章：《宏观视角下的浏览器》。本章分为六讲。&lt;/h6&gt;
    
    </summary>
    
      <category term="浏览器工作原理与实践" scheme="http://liugezhou.online/categories/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86%E4%B8%8E%E5%AE%9E%E8%B7%B5/"/>
    
    
      <category term="浏览器工作原理与实践" scheme="http://liugezhou.online/tags/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86%E4%B8%8E%E5%AE%9E%E8%B7%B5/"/>
    
  </entry>
  
  <entry>
    <title>每周总结第十七期</title>
    <link href="http://liugezhou.online/2019/11/03/%E6%AF%8F%E5%91%A8%E6%80%BB%E7%BB%93%E7%AC%AC%E5%8D%81%E4%B8%83%E6%9C%9F/"/>
    <id>http://liugezhou.online/2019/11/03/每周总结第十七期/</id>
    <published>2019-11-03T15:00:00.000Z</published>
    <updated>2019-11-03T15:03:31.694Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>这里记录过去一周，我的一些小总结。</p></blockquote><a id="more"></a><h4 id="Feeling"><a href="#Feeling" class="headerlink" title="Feeling"></a>Feeling</h4><blockquote><p>想想自己从小到大一直在做的事，除了抽烟就是喝酒。<br>二十多年来，不止一次的想要去坚持做一件事，但是往往三天结束，高考那会也未曾幸免，可能以后也不会幸免。<br>但我还是比较觉得“常立志”，比“立长志”要来的热血一些。因为时不时的兴奋一把，会让我在这活不明白的世上多去感受一些东西。<br>之前是受阮一峰，阮老师的周五公号文章推送影响，后来是看到很多人在坚持做的一些事，让我也感觉作为一个个体而言，一定要尝试去坚持做一件事。做什么事可能不重要，做的对不对可能也不重要，做的好不好或许也不重要，重要的是不停寻找，找到了这么一件想坚持做下去的事。如果这件事还带给了极大的乐趣与自我满足，那么便是极好的。<br>就像找另一半一样，如果当作人生的目标去寻找，那肯定会找到的，然后接下来就是油盐酱醋茶，如何平淡而不失乐趣的经营下去。</p></blockquote><h4 id="小丑-Joker"><a href="#小丑-Joker" class="headerlink" title="小丑(Joker)"></a>小丑(Joker)</h4><blockquote><p>《小丑》这部电影与今年10月4日在美国上映，「本片的故事独立于DCEU（DC[正义联盟]系列）之外，故事背景设置在20世纪80年代，讲述了一位生活陷入困境的脱口秀喜剧演员渐渐走向精神的崩溃，在哥谭市开始了疯狂的犯罪生涯，最终成为了蝙蝠侠的宿敌“小丑”的故事。」   </p></blockquote><blockquote><p>「他是美国DC漫画旗下的超级反派，常年稳居美媒票选的TOP100漫画反派角色第一名的位置，IGN评选的史上最伟大漫画反派角色中，小丑排名第一。」 </p><p>看这部电影的来源是：<a href="https://movie.douban.com/review/10454598/" target="_blank" rel="noopener">《小丑》超万字终极解析，一个精神病患者从受害者到恶魔的自白</a> </p><p>看完这部电影最大的感受是：思想能够上上下下、完完全全改变一个人的所有。</p><p>当然这个角色被多数人熟知是在《蝙蝠侠～黑暗骑士》中，在这部电影中，这个小丑「向观众展现了没有逻辑的恶」，小丑饰演者「希斯·莱杰」，「2008年1月22日，被人发现死于纽约的公寓内，时年28岁。很多人猜测他是因为受到了小丑这一角色的不良影响而自杀」。 </p></blockquote><h4 id="人人网"><a href="#人人网" class="headerlink" title="人人网"></a>人人网</h4><blockquote><p>「人人网曾是中国领先的实名制社交网络平台。」<br>「2015年1月30日，人人网发消息称将下线站内信功能。」<br>「2018年11月14日，人人公司宣布以2000万美元代价把人人社交网络全部资产出售予北京多牛互动传媒股份有限公司 。」<br>「2019年10月，“人人”APP在苹果商店上架。」</p></blockquote><blockquote><p>目前人人网之前的账号仍可登录，明星大V们的信息记录都清空了，而作者本人未删除的消息都还在，然后我看了一下之前转发的一些文章，链接到的地址七七八八的被删的差不多。<br>由小看大，这很有可能说明在网络的世界里，人类的文明、言语、艺术、文化等一些人们真正关注的东西，可能不被历史铭记。各种网站、巨头公司当不存在商业运作的动力时，业务不再继续，信息记录会永远丢在某个硬盘里。人们的言论、关注也在一次次嘈杂之中被淹没。<br>然而我之前一直认为现在的历史不可能会发生“焚书坑儒”之事，然而，有可能发生的事就一定会发生的。</p></blockquote><h4 id="三种JS方法重定向到另一个网页的方法"><a href="#三种JS方法重定向到另一个网页的方法" class="headerlink" title="三种JS方法重定向到另一个网页的方法"></a>三种JS方法重定向到另一个网页的方法</h4><blockquote><ul><li>location.href </li><li>location.replace </li><li>location.assign<br>所有方法的输出都相同，但location.replace()方法从文档历史记录中删除当前文档的url。因此，如果希望选项导航回原始文档，最好使用location.assign()方法。</li></ul></blockquote><h4 id="Vue-js"><a href="#Vue-js" class="headerlink" title="Vue.js"></a>Vue.js</h4><h6 id="Vue源码"><a href="#Vue源码" class="headerlink" title="Vue源码"></a>Vue源码</h6><blockquote><p>「Vue.js 3.x 想全面替代 Vue.js 2.x 需要有相当长的路要走，未来相当长一段时间 Vue.js 2.x 仍然是主流，Vue.js 2.x 的源码学习并没有过时，如果你是一个 Vue.js 2.x 的使用者，就应该去学习 Vue.js 2.x 的源码。」</p></blockquote><h6 id="Vue组件通信有哪几种方式"><a href="#Vue组件通信有哪几种方式" class="headerlink" title="Vue组件通信有哪几种方式"></a>Vue组件通信有哪几种方式</h6><blockquote><ul><li>父子组件通信 : <code>props/$emit</code> </li><li>父子组件通信: <code>ref与$parent/$children</code> </li><li>父子、隔代、兄弟组件通信:<code>EventBus($emit/$on)</code> </li><li>隔代组件通信:<code>$attrs/$listeners</code>    </li><li>隔代组件通信:<code>provide/inject</code>    </li><li>Vuex适用于父子、隔代、兄弟组件通信。主要包括的模块为：State、getter、Mutation、Action、Module</li></ul></blockquote><h6 id="在Vue2-x中，是如何实现数据双向绑定的"><a href="#在Vue2-x中，是如何实现数据双向绑定的" class="headerlink" title="在Vue2.x中，是如何实现数据双向绑定的"></a>在Vue2.x中，是如何实现数据双向绑定的</h6><blockquote><p>一句话总结：Vue内部通过Object.defineProperty方法属性拦截的方式，把data对象里的每个数据的读写转换成getter/setter，当数据变化时视图发生更新。 </p><p>但是Object.defineProperty方法只能对属性进行数据劫持，不能对整个对象进行劫持，同理无法对数组进行劫持，但是，我们在使用Vue框架的时候都知道，Vue能检测到对象和数组（部分方法的操作）的变化，那么它是怎么实现的呢？   </p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Observe a list of Array items.</span><br><span class="line"> */</span><br><span class="line">observeArray (items: Array&lt;any&gt;) &#123;</span><br><span class="line">  for (let i = 0, l = items.length; i &lt; l; i++) &#123;</span><br><span class="line">    observe(items[i])  // observe 功能为监测数据的变化</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 对属性进行递归遍历</span><br><span class="line"> */</span><br><span class="line">let childOb = !shallow &amp;&amp; observe(val) // observe 功能为监测数据的变化</span><br></pre></td></tr></table></figure><blockquote><p>通过以上 Vue 源码部分查看，我们就能知道 Vue 框架是通过遍历数组 和递归遍历对象，从而达到利用 Object.defineProperty() 也能对对象和数组（部分方法的操作）进行监听。</p></blockquote><h6 id="Proxy与Object-definePropertyObject-defineProperty优劣对比"><a href="#Proxy与Object-definePropertyObject-defineProperty优劣对比" class="headerlink" title="Proxy与Object.definePropertyObject.defineProperty优劣对比"></a>Proxy与Object.definePropertyObject.defineProperty优劣对比</h6><blockquote><p>Proxy优势：</p><ul><li>Proxy可以直接监听对象而非属性</li><li>Proxy可以直接监听数组的变化 </li><li>Proxy有多达13中拦截方法，不限于apply、ownKeys、deleteProperty、has等等是Object.defineProperty不具备的。 </li><li>Proxy返回的是一个新对象，我们可以只操作新的对象达到目的，而Object.defineProperty只能遍历对象属性直接修改。 </li><li>Proxy作为新标准将受到浏览器厂商重点持续的性能优化，也就是传说中的新标准的性能红利。<br>而Object.defineProperty兼容性好，支持IE9，Proxy存在浏览器兼容性问题，无法用polyfill磨平。</li></ul></blockquote><h5 id="30-道-Vue-面试题，内含详细讲解"><a href="#30-道-Vue-面试题，内含详细讲解" class="headerlink" title="30 道 Vue 面试题，内含详细讲解"></a><a href="https://juejin.im/post/5d59f2a451882549be53b170#heading-18" target="_blank" rel="noopener">30 道 Vue 面试题，内含详细讲解</a></h5>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;这里记录过去一周，我的一些小总结。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="每周分享" scheme="http://liugezhou.online/categories/%E6%AF%8F%E5%91%A8%E5%88%86%E4%BA%AB/"/>
    
    
      <category term="每周分享" scheme="http://liugezhou.online/tags/%E6%AF%8F%E5%91%A8%E5%88%86%E4%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title>每周分享第十六期</title>
    <link href="http://liugezhou.online/2019/10/27/%E6%AF%8F%E5%91%A8%E5%88%86%E4%BA%AB%E7%AC%AC%E5%8D%81%E5%85%AD%E6%9C%9F/"/>
    <id>http://liugezhou.online/2019/10/27/每周分享第十六期/</id>
    <published>2019-10-27T13:06:00.000Z</published>
    <updated>2019-10-27T13:05:54.147Z</updated>
    
    <content type="html"><![CDATA[<h2 id="每周分享第十六期"><a href="#每周分享第十六期" class="headerlink" title="每周分享第十六期"></a>每周分享第十六期</h2><blockquote><p>这里记录我的周末，我的关注以及值得记录的东西。</p></blockquote><a id="more"></a><h4 id="刊首语"><a href="#刊首语" class="headerlink" title="刊首语"></a>刊首语</h4><blockquote><p>我们在这个世界上辛苦劳作，来回奔波是为了什么？<br>所有这些贪婪和欲望，所有这些对财富、权利和名声的追求，其目的到底何在？<br>归根结底，是为了得到他人的爱和认同。<br><cite>亚当·斯密《道德情操论》</cite></p></blockquote><h4 id="拼多多百亿补贴"><a href="#拼多多百亿补贴" class="headerlink" title="拼多多百亿补贴"></a>拼多多百亿补贴</h4><blockquote><p>双十一就来了，我是一个不怎么在购物网站混战的小年轻，特别是近几年看到的各种打折券、更是眼花缭乱，因此买东西一般只买那种不搞价、官方统一价的物品。<br>然后这几天看到了PDD的百亿补贴活动，MacBookPro双十一补贴到手价不到一万七，比我买的时候整整便宜了三千块，血亏啊。<br>貌似是在本周五纳斯达克收盘价时，拼多多股价上涨12.5%，其市值超越京东，成为中国第四大互联网公司，一个成长仅四年的公司发展这么迅速，真是挺牛皮的。<br>因此双十一要买东西的话，可以在拼多多上看一下，货比三家瞅一瞅。</p></blockquote><h4 id="Github可视化大数据平台"><a href="#Github可视化大数据平台" class="headerlink" title="Github可视化大数据平台"></a>Github可视化大数据平台</h4><blockquote><p>现在做政府项目的大数据可视化平台挺火，很多政府机构都喜欢打造各个行业的大数据可视化平台。<br>Github上有个开源项目，基于Vue构建一个Github的可视化大数据平台，这个开源项目是：<a href="https://github.com/HongqingCao/GitDataV" target="_blank" rel="noopener">GitDataV</a>.<br>Github主页的生成效果图：<br><img src="http://img.liugezhou.online/GitDataV.png" alt="GitDataV"></p></blockquote><h4 id="nodebestpractices"><a href="#nodebestpractices" class="headerlink" title="nodebestpractices"></a><a href="https://github.com/goldbergyoni/nodebestpractices" target="_blank" rel="noopener">nodebestpractices</a></h4><blockquote><p>一本在线书籍–Node.js最佳实践。是对Node.js最佳实践中排名最高的内容的总结和分享。 Star：35.1k.</p></blockquote><h4 id="leetcode"><a href="#leetcode" class="headerlink" title="leetcode"></a><a href="https://github.com/azl397985856/leetcode" target="_blank" rel="noopener">leetcode</a></h4><blockquote><p>leetcode题解，记录自己的leetcode解题之路。</p></blockquote><h4 id="这个网站的确很酷"><a href="#这个网站的确很酷" class="headerlink" title="这个网站的确很酷"></a><a href="https://bruno-simon.com/" target="_blank" rel="noopener">这个网站的确很酷</a></h4><blockquote><p>阮老师Twitter文：<br>“这是很久以来，我见过的最酷主页，整个页面需要3D导航。<a href="https://bruno-simon.com" target="_blank" rel="noopener">https://bruno-simon.com</a><br>页面源码是开源的。<a href="https://github.com/brunosimon/folio-2019”" target="_blank" rel="noopener">https://github.com/brunosimon/folio-2019”</a></p></blockquote><blockquote><p>Made with #thressJS and # canonJS</p></blockquote><h4 id="Vue-js3-x源码解析先导"><a href="#Vue-js3-x源码解析先导" class="headerlink" title="Vue.js3.x源码解析先导"></a><a href="https://mp.weixin.qq.com/s/q8PVgF7_sL0XhcBfP1WDPA" target="_blank" rel="noopener">Vue.js3.x源码解析先导</a></h4><blockquote><p>黄老师的一篇对于3.0源码的介绍。</p></blockquote><h4 id="是学不动还是不想学"><a href="#是学不动还是不想学" class="headerlink" title="是学不动还是不想学"></a>是学不动还是不想学</h4><blockquote><p>各种技术文章、各种公众号推送、各种人工智能培训班广告、各种知识付费APP，充斥眼球与大脑.<br>我们都知道技术是学不完的，但还是有看到什么新的课程慌的一批的感觉，什么TS、Vue3源码、WebGL、NodeJS等等等等，我知道应该去动身学习，但是总是会出现学不下去的情况，造成这种情况的原因是现在各种分散注意力的消息过于庞杂，一会东、一会西，太容易找不到方向。<br>这种情况下，得收心，管他弱水三千，只取一瓢。<br>并不是学不动，是不想学罢了。  </p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;每周分享第十六期&quot;&gt;&lt;a href=&quot;#每周分享第十六期&quot; class=&quot;headerlink&quot; title=&quot;每周分享第十六期&quot;&gt;&lt;/a&gt;每周分享第十六期&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;这里记录我的周末，我的关注以及值得记录的东西。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="每周分享" scheme="http://liugezhou.online/categories/%E6%AF%8F%E5%91%A8%E5%88%86%E4%BA%AB/"/>
    
    
      <category term="每周分享" scheme="http://liugezhou.online/tags/%E6%AF%8F%E5%91%A8%E5%88%86%E4%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title>每周分享第十五期</title>
    <link href="http://liugezhou.online/2019/10/20/%E6%AF%8F%E5%91%A8%E5%88%86%E4%BA%AB%E7%AC%AC%E5%8D%81%E4%BA%94%E6%9C%9F/"/>
    <id>http://liugezhou.online/2019/10/20/每周分享第十五期/</id>
    <published>2019-10-20T10:20:00.000Z</published>
    <updated>2019-10-20T10:21:30.758Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>这里记录我的周末，我的关注以及值得记录的东西。</p></blockquote><a id="more"></a><h5 id="刊首语"><a href="#刊首语" class="headerlink" title="刊首语"></a>刊首语</h5><blockquote><p>不同肤色、不同文化、不同国籍的生活在这个星球上的人，大都觉得是按自己的生活方式在度此生。<br>我也会这么认为，但事实可能大相径庭。<br>很多时候，我会觉得自己是悲哀的：没有文化、没有信仰、没有追求、没有修养、不了解历史、不敢关心政治。<br>总结为一句话就是：没有过意识形态的形成。 </p><p>不知是对世界百花齐放思想散播的招架不住，还是由于人类本质劣性的残留，亦或者是社会发展带来的人心躁动，我竟记不起上次在何时感动，我竟再未关注社会生活那些人性与善良，进入眼帘的的只有动乱与不幸。<br>我不再抱有一颗怜悯之心、有些厌倦社会生活的伪装，我想是因为还不能聚焦自己，未能再作出一件有成就的事、也再未能给人带来些快乐与微笑。<br>这是我个人的悲哀，可能也是社会的一个缩影·。<br><cite>看动漫《赌博默示录》、《赌博破戒录》而感</cite></p></blockquote><h4 id="马拉松"><a href="#马拉松" class="headerlink" title="马拉松"></a>马拉松</h4><blockquote><p><code>肯尼亚</code>的世界纪录保持者<code>埃留德·基普乔格</code>（Eliud Kipchoge）10月12日在维也纳以<code>1:59:40</code>的成绩，成为第一个马拉松进入两小时以内的人！  </p><p>这相当于，100米的平均速度为17秒，然后不间断跑422个这样的100米。</p><p>不过，由于这是一次专门为他破记录举办的挑战赛，为了创造记录，有41个人配合他跑，为他挡风和配速，所以国际田联不会承认这个纪录.</p></blockquote><h4 id="英雄联盟"><a href="#英雄联盟" class="headerlink" title="英雄联盟"></a>英雄联盟</h4><blockquote><p>英雄联盟手游预约开启，新一轮的手游狂潮要到来了，吗？  </p></blockquote><h4 id="世界互联网大会"><a href="#世界互联网大会" class="headerlink" title="世界互联网大会"></a>世界互联网大会</h4><blockquote><p>第六届世界互联网大会，将于10月20日-22日在浙江乌镇召开。本次大会以“智能互联 开放合作——携手共建网络空间命运共同体”为主题。</p></blockquote><h4 id="VSCode–mock数据"><a href="#VSCode–mock数据" class="headerlink" title="VSCode–mock数据"></a>VSCode–mock数据</h4><blockquote><p>掘金沸点上看到一个VSCode插件：<code>Mock_Myself</code>，为日常开发提供mock数据，在后端接口还未完善下，可以先自己模拟一些数据进行页面展示数据的代码开发。</p></blockquote><h4 id="javascript-questions"><a href="#javascript-questions" class="headerlink" title="javascript-questions"></a><a href="https://github.com/lydiahallie/javascript-questions/blob/master/zh-CN/README-zh_CN.md" target="_blank" rel="noopener">javascript-questions</a></h4><blockquote><p>JavaScript 进阶问题列表。 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&quot;我在我的 Instagram 上每天都会发布 JavaScript 的多选问题，并且同时也会在这个仓库中发布。  </span><br><span class="line">从基础到进阶，测试你有多了解 JavaScript，刷新你的知识，或者帮助你的 coding 面试！ 💪 🚀 我每周都会在这个仓库下更新新的问题。  </span><br><span class="line">答案在问题下方的折叠部分，点击即可展开问题。祝你好运 ❤️&quot;</span><br></pre></td></tr></table></figure></blockquote><h4 id="奶牛快传"><a href="#奶牛快传" class="headerlink" title="奶牛快传"></a><a href="https://cowtransfer.com/" target="_blank" rel="noopener">奶牛快传</a></h4><blockquote><p>平时我们用微信发送文件大小会限制在20M，不怎么方便，这是一个在线快传文件网站，上传文件速度特别快，不用注册就可以在线传输本地的文件，传输完毕后只需要将下载链接发送给对方在线下载即可，不需要使用U盘等拷贝文件，非常方便。<br>可能会有风险，管理员会看得到，如若担心推荐此网站的楼主建议压缩文件的时候设置密码上传。  </p></blockquote><h4 id="IPhone使用小技巧"><a href="#IPhone使用小技巧" class="headerlink" title="IPhone使用小技巧"></a>IPhone使用小技巧</h4><blockquote><p>IPhone在文本框输入文字或者网站的时候，会出现这样一个问题：直接用手指点击刚输入内容到某处时，极不方便。<br>这个时候，你可以长按默认输入法的空格键，然后指针便可以拖动了。  </p></blockquote><h4 id="当然我在扯淡"><a href="#当然我在扯淡" class="headerlink" title="当然我在扯淡"></a><a href="http://yinwang.org" target="_blank" rel="noopener">当然我在扯淡</a></h4><blockquote><p>个人博客：<a href="http://yinwang.org" target="_blank" rel="noopener">当然我在扯淡</a>。<br>王垠[yín]，四川大学97级本科毕业，保送到清华大学计算机系直博。期间曾在清华大学计算机系软件工程专业就读，主要进行集成电路布线算法的研究。在此期间，他因《完全用GNU/Linux工作》一文和对TeX的推广等“非研究成果的业余东西”而出名。 在只剩一年就要博士毕业的时候，他申请退学，并将1万7千余字的“退学申请书”（题为清华梦的粉碎）公布在网上，引起舆论界一时对教育体制、理想主义等的热议。</p></blockquote><h4 id="idea激活码"><a href="#idea激活码" class="headerlink" title="idea激活码"></a>idea激活码</h4><blockquote><p>一大批idea激活码失效，window系统下激活码地址：<a href="https://www.lanzous.com/i5clxlc" target="_blank" rel="noopener">https://www.lanzous.com/i5clxlc</a>  </p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;这里记录我的周末，我的关注以及值得记录的东西。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="每周分享" scheme="http://liugezhou.online/categories/%E6%AF%8F%E5%91%A8%E5%88%86%E4%BA%AB/"/>
    
    
      <category term="每周分享" scheme="http://liugezhou.online/tags/%E6%AF%8F%E5%91%A8%E5%88%86%E4%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title>弱(强)类型语言、静(动)态语言、编译(解释)型语言概念总览</title>
    <link href="http://liugezhou.online/2019/10/15/%E5%BC%B1(%E5%BC%BA)%E7%B1%BB%E5%9E%8B%E8%AF%AD%E8%A8%80%E3%80%81%E9%9D%99(%E5%8A%A8)%E6%80%81%E8%AF%AD%E8%A8%80%E3%80%81%E7%BC%96%E8%AF%91(%E8%A7%A3%E9%87%8A)%E5%9E%8B%E8%AF%AD%E8%A8%80%E6%A6%82%E5%BF%B5%E6%80%BB%E8%A7%88/"/>
    <id>http://liugezhou.online/2019/10/15/弱(强)类型语言、静(动)态语言、编译(解释)型语言概念总览/</id>
    <published>2019-10-14T16:00:00.000Z</published>
    <updated>2019-10-15T02:56:46.475Z</updated>
    
    <content type="html"><![CDATA[<h4 id="这篇文章用来彻底区分各种语言概念的区别"><a href="#这篇文章用来彻底区分各种语言概念的区别" class="headerlink" title="这篇文章用来彻底区分各种语言概念的区别."></a>这篇文章用来彻底区分各种<code>语言</code>概念的区别.</h4><a id="more"></a><h3 id="动态语言-VS-静态语言"><a href="#动态语言-VS-静态语言" class="headerlink" title="动态语言 VS 静态语言"></a>动态语言 VS 静态语言</h3><blockquote><p>每种编程语言都具有内建的数据类型，但它们的数据类型常有不同之处，使用方式也不一样，比如C语言、Java语言在定义变量前，就需要确定变量的类型。<br>这种声明变量的特点是：在声明变量之前需要先定义变量类型。我们把这种在使用之前就需要确认其变量数据类型的称为<code>静态语言</code>。<br>相反地，我们把在运行过程中需要检查数据类型的语言称为<code>动态语言</code>。</p></blockquote><h3 id="强类型语言-VS-弱类型语言"><a href="#强类型语言-VS-弱类型语言" class="headerlink" title="强类型语言 VS 弱类型语言"></a>强类型语言 VS 弱类型语言</h3><blockquote><p>虽然 C 语言是静态，但是在 C 语言中，我们可以把其他类型的数据赋予给一个声明好的变量， 比如在C语言中声明好了两个变量 ： </p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">int a = 1;</span><br><span class="line">bool b = true;</span><br><span class="line">b = a;</span><br></pre></td></tr></table></figure><blockquote><p>我们把 int 型的变量 a 赋值给了 bool 型的变量b，这段代码也是可以编译执行的，因为在赋值过程中，C编译器会把 int 型的变量悄悄转换为 bool 型的变量.<br>通常把偷偷进行类型转换的操作成为<code>隐式类型转换</code>：<br>支持因此类型转换的语言称为<code>弱类型语言</code>，不支持隐式类型转换的语言称为<code>强类型语言</code>。</p></blockquote><h3 id="编译型语言-VS-解释型语言"><a href="#编译型语言-VS-解释型语言" class="headerlink" title="编译型语言 VS 解释型语言"></a>编译型语言 VS 解释型语言</h3><blockquote><p>编译型语言代表有：C语言，C++、Object-C以及swift.<br>通常都会对源代码进行编译，生成可以执行的二进制代码，执行的是编译后的结果. </p><p>解释型语言代表有：JavaScript、Python、Erlang、PHP、Perl、Ruby<br>通常不用对源代码进行编译，一般是通过解释器载入脚本后运行。由于每个语句都是执行的时候才进行解释翻译，这样解释性语言每次执行就要翻译一次，效率相对要低。</p><p>Java具有编译与解释两种特性：既可以将其源代码当作脚本执行，也可以进行编译成.class代码（字节码）载入运行.</p><p><a href="https://www.liugezhou.online/2018/12/31/编译型语言与解释型语言的区别/" target="_blank" rel="noopener">拓展–编译型语言与解释型语言的区别–详细介绍</a></p></blockquote><h4 id="盗图"><a href="#盗图" class="headerlink" title="盗图"></a>盗图</h4><blockquote><p><img src="http://img.liugezhou.online/language.jpg" alt="语言类型"></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;这篇文章用来彻底区分各种语言概念的区别&quot;&gt;&lt;a href=&quot;#这篇文章用来彻底区分各种语言概念的区别&quot; class=&quot;headerlink&quot; title=&quot;这篇文章用来彻底区分各种语言概念的区别.&quot;&gt;&lt;/a&gt;这篇文章用来彻底区分各种&lt;code&gt;语言&lt;/code&gt;概念的区别.&lt;/h4&gt;
    
    </summary>
    
      <category term="编程概念类" scheme="http://liugezhou.online/categories/%E7%BC%96%E7%A8%8B%E6%A6%82%E5%BF%B5%E7%B1%BB/"/>
    
    
      <category term="编程概念类" scheme="http://liugezhou.online/tags/%E7%BC%96%E7%A8%8B%E6%A6%82%E5%BF%B5%E7%B1%BB/"/>
    
  </entry>
  
  <entry>
    <title>每周分享第十四期</title>
    <link href="http://liugezhou.online/2019/10/13/%E6%AF%8F%E5%91%A8%E5%88%86%E4%BA%AB%E7%AC%AC%E5%8D%81%E5%9B%9B%E6%9C%9F/"/>
    <id>http://liugezhou.online/2019/10/13/每周分享第十四期/</id>
    <published>2019-10-13T15:10:00.000Z</published>
    <updated>2019-10-13T15:32:34.377Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>这里记录我的周末，强迫自己要去总结点什么的东西。</p></blockquote><a id="more"></a><h4 id="Rocket"><a href="#Rocket" class="headerlink" title="Rocket"></a><a href="https://weibo.com/u/3393510594?refer_flag=1005055013_" target="_blank" rel="noopener">Rocket</a></h4><blockquote><p>“对于此次”火箭经理辱华”事件的各路带哥们，我想说，继续带节奏让事态扩大吧，逞口舌之快只会两败俱伤，双方都是。我们已经忍了一百多年，不就是硬实力掰不过吗？古训讲究一个忍，厚积薄发、一击制胜。</p><p>这个事再发酵下去那就不单单是一个NBA的问题了，现在这个时期就从政治到文化开始全面撕票真的明智？我双手支持我国立场，只是反对极端化发展，戾气太重、无脑热血只会被人利用。</p><p>而且肯定存在其它的解决方法，莫雷、肖华都不能代表整个NBA，换句话说，川普对我国也不友好，那么我们就要跟美帝全面断交？而且现在国人有发表中立缓和意见的，马上会有一批喷子赶来问候同族的家人，这是理智爱国？？”</p><p><cite>引自‘沉默的羔羊’</cite></p></blockquote><h4 id="武汉颁发自动驾驶商用牌照"><a href="#武汉颁发自动驾驶商用牌照" class="headerlink" title="武汉颁发自动驾驶商用牌照"></a><a href="http://www.xinhuanet.com/2019-09/22/c_1125025261.htm" target="_blank" rel="noopener">武汉颁发自动驾驶商用牌照</a></h4><blockquote><p>武汉，简称“汉”，别称江城，是湖北省省会，中部六省唯一的副省级市和特大城市，中国中部地区的中心城市.</p><p>国家智能网联汽车（武汉）测试示范区22日在江城武汉揭牌，百度、海梁科技、深兰科技等企业获得武汉市交通部门颁发的自动驾驶车辆商用牌照.  </p><p>今后，无人驾驶车辆不仅可在开放道路进行载人测试，也可进行商业化运营探索。 </p><p>武汉市交通运输局综合协调处胡浩军表示，在示范区内首期建成的28公里支持智能网联汽车示范应用道路上，此次获牌照的巴士、公交、出租车等，均可上路正常载客运营。“市民上车‘刷卡’后即可乘车，但不实际扣费。”  </p><p>颁发自动驾驶商用牌照的最大意义在于，相关企业可在原有测试基础上，加强测试远程驾驶、车路协同等在5G环境下的新功能，并进行载人试运营，从而推动智能驾驶技术在真实场景下的应用。</p></blockquote><h4 id="呦呦鹿鸣"><a href="#呦呦鹿鸣" class="headerlink" title="呦呦鹿鸣"></a>呦呦鹿鸣</h4><blockquote><p>10月8日媒体报道以来，关于北大附中实验学校教学楼的空气质量问题在北大附中师生和社会一定范围间散播开来，并逐渐演化成为一起舆论事件。 </p><p>公众号《呦呦鹿鸣》，文章还在还可以阅读，但是最近的两篇文章因违反《微信公众号运营规范》，文章被禁止分享。</p></blockquote><h4 id="远方青木"><a href="#远方青木" class="headerlink" title="远方青木"></a>远方青木</h4><blockquote><p>公众号《远方青木》，差不多篇篇文章10万+。 </p><p>前公众号《紫竹张先生》的作者，猜测可能是由于彩票事件，被央视新闻点名，做封号处理。 </p><p>沉寂一段时间后，换了此公众号，文章针对社会热点事件总是有理有据、更具煽动，其文章逻辑分析强行洗脑，学识渊博，会总结会写文。</p><p>可能是在被约谈之后，更明白什么样的文章更具传播性。  </p><p>就像不是没有好记者，只是我们不知道一样–这个世界上有太多的能人，不为我们所知。有的风生水起，有的苟延残喘，有的高风亮节，有的同流合污，然而对于我们多数没见过市面的普通老百姓而言，遵从社会的主流价值观才算我们也有价值观。</p><p><cite>此为揣测。</cite></p></blockquote><h4 id="一句话"><a href="#一句话" class="headerlink" title="一句话"></a>一句话</h4><blockquote><p>一项研究发现，在线课程的完成率只有4%，100个报名网上课程的人，只有4个能坚持学完。</p></blockquote><h4 id="Octotree"><a href="#Octotree" class="headerlink" title="Octotree"></a>Octotree</h4><blockquote><p>Chrome浏览器应用商店上的插件，安装此插件后，在Github仓库下，会对仓库源文件进行目录排版。 </p></blockquote><h4 id="Teamview"><a href="#Teamview" class="headerlink" title="Teamview"></a>Teamview</h4><blockquote><p>APT41 安全组织已经攻破了 TeamViewer 公司，使其能够访问安装了 TeamViewer 的任何系统。<br>所以，简单来说，请卸载你的 TeamViewer 软件.</p></blockquote><h4 id="Vue3-0代码仓库公开"><a href="#Vue3-0代码仓库公开" class="headerlink" title="Vue3.0代码仓库公开"></a><a href="https://github.com/vuejs/vue-next" target="_blank" rel="noopener">Vue3.0代码仓库公开</a></h4><blockquote><p>Vue3.0完全由TypeScript编写，目前处于alpha阶段，计划与2020年第一季度发布。</p><p>最重要的变化之一是，受React Hooks的启发，新的API将允许使用基于函数的方式编写组件。 </p><p><a href="https://mp.weixin.qq.com/s/sOOGQvnRLrgRbz_0TEY93w" target="_blank" rel="noopener">Vue3.0的五个关键变化</a>：速度、体积、可维护性、面向原生、易用性。 </p></blockquote><h4 id="女装大佬项目"><a href="#女装大佬项目" class="headerlink" title="女装大佬项目"></a><a href="https://github.com/komeiji-satori/Dress" target="_blank" rel="noopener">女装大佬项目</a></h4><blockquote><p>表面上是”面向可爱的蓝孩子的Git学习实践项目 on Github”,实际上是让程序员po出自己的女装照片。 </p><p>这个项目全部是男孩穿女装的照片，很辣眼睛。喜欢看男孩穿女装的人儿这回可大饱眼福了。</p></blockquote><h4 id="Postwoman"><a href="#Postwoman" class="headerlink" title="Postwoman"></a><a href="https://github.com/liyasthomas/postwoman" target="_blank" rel="noopener">Postwoman</a></h4><blockquote><p>一个在线 HTTP 请求调试工具，类似 Postman，不过是 Web 版。</p></blockquote><h4 id="前端面试每日3-1"><a href="#前端面试每日3-1" class="headerlink" title="前端面试每日3+1"></a><a href="https://github.com/haizlin/fe-interview" target="_blank" rel="noopener">前端面试每日3+1</a></h4><blockquote><p>前端面试每日 3+1，以面试题来驱动学习，提倡每日学习与思考，每天进步一点！每天早上5点纯手工发布面试题（死磕自己，愉悦大家）。</p></blockquote><h4 id="购房"><a href="#购房" class="headerlink" title="购房"></a><a href="https://github.com/houshanren/hangzhou_house_knowledge" target="_blank" rel="noopener">购房</a></h4><blockquote><p>2017年买房经历总结出来的买房购房知识分享给大家，希望对大家有所帮助。买房不易，且买且珍惜。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;这里记录我的周末，强迫自己要去总结点什么的东西。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="每周分享" scheme="http://liugezhou.online/categories/%E6%AF%8F%E5%91%A8%E5%88%86%E4%BA%AB/"/>
    
    
      <category term="每周分享" scheme="http://liugezhou.online/tags/%E6%AF%8F%E5%91%A8%E5%88%86%E4%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title>每周分享第十三期</title>
    <link href="http://liugezhou.online/2019/09/28/%E6%AF%8F%E5%91%A8%E5%88%86%E4%BA%AB%E7%AC%AC%E5%8D%81%E4%B8%89%E6%9C%9F/"/>
    <id>http://liugezhou.online/2019/09/28/每周分享第十三期/</id>
    <published>2019-09-28T10:10:00.000Z</published>
    <updated>2019-09-30T03:30:19.488Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>这里记录我的周末，强迫自己要去总结点什么的东西。</p></blockquote><a id="more"></a><h3 id="Brendan-Ecich"><a href="#Brendan-Ecich" class="headerlink" title="Brendan Ecich"></a>Brendan Ecich</h3><blockquote><p>布兰登～艾克，1961年7月4日生人，JavaScript发明人。</p><p>这个哥们上大学时，主修的时物理学，到了大三因人家的兴趣改变主修为计算机科学，后获取了数学与计算机科学学士学位，后来上了个研究生，25岁时获取了计算机科学硕士学位。</p><p>毕业后进入SGI工作，工作七年负责操作系统与网络功能，之后他在MicroUnity工作了三年。1995年4月，任职于网景期间，为网景浏览器开发出JavaScript，之后成为网页浏览器领域应用最广泛的脚本语言之一。1998年，艾克协助成立Mozilla.org，2003年在美国在线决定结束网景部门营运后，艾克协助成立了Mozilla基金会。2014年4月3日，艾克宣布从Mozilla离职，2015年5月28日，艾克成立Brave软件公司，这是一家互联网安全公司，2016年1月20日，该公司发布了Brave网页浏览器。</p></blockquote><blockquote><p>下载了一下Brave网页浏览器，作为一个开发者，第一关注的当然是其开发调试功能，第一感觉是跟谷歌一个模子。</p><p>当前版本是v0.68.142,从网上查阅资料得知，当前 0.xx 版本是基于 electron 开发的，但未来的 1.0 版本将会是基于 chromium 魔改而来。</p><p>这个浏览器据说是想改变web商业模式，目前 Web 基于广告的商业模式有很多问题，Brave 浏览器提出了一个新的思路，就是用户给内容提供者打赏付钱，我这里把它叫做“打赏模式”。</p><p>它的打赏按钮在地址栏的右侧，点击后会有网站的验证是否经Brave网页验证。<br>这个模式很有意思。</p><p>官网地址：<a href="https://brave.com" target="_blank" rel="noopener">https://brave.com</a></p></blockquote><h3 id="长尾理论"><a href="#长尾理论" class="headerlink" title="长尾理论"></a>长尾理论</h3><blockquote><p>1897年，意大利经济学家发现一个经济规律：在任何一组东西中，最重要的只占其中一小部分，约20%，其余80%尽管占多数，却是次要的，这被称为<code>帕累托法则</code>，或者叫二八定律。80%的东西之所以次要，不是因为没有人需要，而是因为发现或呈现它们的成本实在太高了。</p></blockquote><blockquote><p>长尾理论的提出者是：克里斯·安德森。</p><p>安德森开始的一项工程，在考察了所有互联网电商公司的数据后，得出了几乎惊人一致的结论：在互联网世界里，任何商品都能找到它的消费者。  </p><p>由于关注的成本大大降低，人们有可能以很低的成本关注正态分布曲线的“尾部”，而且，关注“尾部”产生的总体效益甚至会超过“头部”. </p><p>在互联网环境下，<code>帕累托法则</code>失灵了，取而代之的是倒二八法则，即所谓的“长尾理论”。这一理论也推导出了一种新的互联网经营模式。</p></blockquote><blockquote><p>在长尾理论一书中，安德森总结了9个法则：</p><ol><li>数字化仓储是降低库存成本的最佳办法；</li><li>挖掘消费者心理数据，让他们参与生产；</li><li>从多个传播渠道挖掘潜在需求，深入长尾的尾部；</li><li>不要试图生产一款适合所有人的商品；</li><li>建立更加灵活的定价策略；</li><li>在企业与顾客之间建立共享信息的机制，达到双赢的效果；</li><li>结合自身产品的特点，考虑产品之间的“和”与“或”的问题；</li><li>借助长尾效应，根据市场自身淘汰结果来做出相应的反应，让市场替你做事；</li><li>重视免费的力量。<br><cite><a href="https://mp.weixin.qq.com/s/zJbXy8GwPJoISkxvLRWf4g" target="_blank" rel="noopener">文章来源</a></cite></li></ol></blockquote><h3 id="Github-Actions"><a href="#Github-Actions" class="headerlink" title="Github Actions"></a>Github Actions</h3><blockquote><p>之前在Github上注册了Actions，但是当时也不知道是干嘛的，今日读到一篇文章,虽然还是有点蒙。<br>在大脑里留个印象，在用到的时候，可以再来了解一下。</p><p><cite><a href="https://mp.weixin.qq.com/s/ILg6Ba7EGeqhDFYfIuo6kg" target="_blank" rel="noopener">玩转GitHub Actions ，简化npm发布流程</a></cite></p></blockquote><h3 id="阮一峰–周分享内容"><a href="#阮一峰–周分享内容" class="headerlink" title="阮一峰–周分享内容"></a>阮一峰–周分享内容</h3><blockquote><h4 id="35岁以后油腻中年人该去哪"><a href="#35岁以后油腻中年人该去哪" class="headerlink" title="35岁以后油腻中年人该去哪"></a><a href="https://mp.weixin.qq.com/s/AXmXQye9_puIFVn_okTEPw" target="_blank" rel="noopener">35岁以后油腻中年人该去哪</a></h4><p>这篇文章挺有意思。</p><h4 id="starcharts"><a href="#starcharts" class="headerlink" title="starcharts"></a><a href="https://github.com/caarlos0/starcharts" target="_blank" rel="noopener">starcharts</a></h4><p>一个开源工具，可以查看 GitHub 仓库的 Star 变化情况，生成折线图。<br>但是比较受欢迎的项目比如Vue、React等，显示：<br>Please try again in a few minutes. This might not work for very famous repository.<br>不过对一些小众，不是太famous的项目，还是可以的。</p><h4 id="showme-bug"><a href="#showme-bug" class="headerlink" title="showme.bug"></a><a href="https://showme.bug" target="_blank" rel="noopener">showme.bug</a></h4><p>一个国产的在线实时编程环境，程序员面试助手，可以实时观看应聘者远程编程。</p><p>作为技术人员，手敲代码的能力毕竟最重要的。随着技术人才的不断年轻化，面试过程的不断考察实力化，像我这种还没学什么就要老了的人，如果不好好在自己的职业技术上下点功夫，混吃等死，那技能只能一步步退化，手里端的这碗饭很是危险啊。</p><h4 id="GK-Docs"><a href="#GK-Docs" class="headerlink" title="GK Docs"></a><a href="http://geekdocs.cn/" target="_blank" rel="noopener">GK Docs</a></h4><p>面向前端开发者的网址导航站。</p></blockquote><h3 id="JS字符串方法"><a href="#JS字符串方法" class="headerlink" title="JS字符串方法"></a>JS字符串方法</h3><blockquote><p>基础知识要牢固，最后来温习一下20个常用的JavaScript字符串方法。<br><cite><a href="https://mp.weixin.qq.com/s/YfO_Cdp6f0WmRt2S2JhCIA" target="_blank" rel="noopener">20个常用的JavaScript字符串方法</a></cite></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;这里记录我的周末，强迫自己要去总结点什么的东西。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="每周分享" scheme="http://liugezhou.online/categories/%E6%AF%8F%E5%91%A8%E5%88%86%E4%BA%AB/"/>
    
    
      <category term="每周分享" scheme="http://liugezhou.online/tags/%E6%AF%8F%E5%91%A8%E5%88%86%E4%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title>浏览器工作原理与实践</title>
    <link href="http://liugezhou.online/2019/09/16/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86%E4%B8%8E%E5%AE%9E%E8%B7%B5/"/>
    <id>http://liugezhou.online/2019/09/16/浏览器工作原理与实践/</id>
    <published>2019-09-16T02:15:00.000Z</published>
    <updated>2019-11-03T15:24:33.085Z</updated>
    
    <content type="html"><![CDATA[<h3 id="导读"><a href="#导读" class="headerlink" title="导读"></a>导读</h3><h5 id="本文主要是从极客时间专栏《浏览器工作原理与实践》，对其每一章的学习进行系统性总结。"><a href="#本文主要是从极客时间专栏《浏览器工作原理与实践》，对其每一章的学习进行系统性总结。" class="headerlink" title="本文主要是从极客时间专栏《浏览器工作原理与实践》，对其每一章的学习进行系统性总结。"></a>本文主要是从极客时间专栏《浏览器工作原理与实践》，对其每一章的学习进行系统性总结。</h5><hr><a id="more"></a><h3 id="宏观视角下的浏览器-6讲"><a href="#宏观视角下的浏览器-6讲" class="headerlink" title="宏观视角下的浏览器(6讲)"></a>宏观视角下的浏览器(6讲)</h3><h4 id="01-Chrome架构：仅仅打开了一个页面，为什么会有四个进程"><a href="#01-Chrome架构：仅仅打开了一个页面，为什么会有四个进程" class="headerlink" title="01 | Chrome架构：仅仅打开了一个页面，为什么会有四个进程"></a>01 | Chrome架构：仅仅打开了一个页面，为什么会有四个进程</h4><hr><h5 id="线程-VS-进程"><a href="#线程-VS-进程" class="headerlink" title="线程 VS 进程"></a>线程 VS 进程</h5><blockquote><ul><li>计算机的并行处理是指：同一时刻处理多个任务。</li><li>多线程可以并行处理任务，但线程是不能单独存在的，它是由进程来启动和管理的。</li><li>一个进程就是一个程序的运行实例。（Chrome打开一个页面，启动了四个进程）。</li><li>线程是依附于进程的，而进程中使用多线程并行处理可以提升运算效率。</li></ul><p>进程与线程关系的四个特点：</p><ol><li>进程中任一线程执行出错，都会导致整个进程的崩溃。</li><li>线程之间共享进程中的数据。  </li><li>当一个进程关闭之后，操作系统会回收进程所占用的内存。 </li><li>进程之间相互隔离。（如果进程之间需要进行数据的通信，就需要使用用于进程间通信(IPC)的机制了）。  </li></ol><p>最新的Chrome浏览器包括：浏览器主进程(Browser)、渲染进程、GPU进程、网络进程、插件进程。<br>多进程模型提升了浏览器的稳定性、流畅性和安全性，但是同样不可避免的带来了一些问题：更高的资源占用、更复杂的体系结构。</p></blockquote><h4 id="02-TCP协议：如何保证页面文件能被完整送达浏览器？"><a href="#02-TCP协议：如何保证页面文件能被完整送达浏览器？" class="headerlink" title="02 | TCP协议：如何保证页面文件能被完整送达浏览器？"></a>02 | TCP协议：如何保证页面文件能被完整送达浏览器？</h4><hr><blockquote><p>在网络中，一个文件通常会被拆分为很多数据包来进行传输。</p><p>计算机的地址就称为IP地址，访问任何网站实际上只是你的计算机向另一台计算机请求信息。</p><p>用户数据包协议-UDP：IP通过IP地址信息把数据包发送给指定的电脑，而UDP通过端口号把数据包分发给正确的程序。</p><p>UDP不能保证数据可靠性(这是因为UDP可以校验数据正确，但对出错的数据包，不提供重发机制，只丢弃当前的包)，但是传输速度却非常快，所以UDP会应用在一些关注速度、但不那么要求数据完整性的领域，如在线视频、互动游戏等。</p><p>TCP(传输控制协议)是一种面向连接的、可靠的、基于字节流的传输层通信协议。相对于UDP,TCP有下面两个特点：</p><ul><li>对于数据包丢失的情况，TCP提供重传机制；  </li><li>TCP引入数据包排序机制，用来保证把乱序的数据包组合成一个完整的文件。</li></ul></blockquote><h5 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h5><blockquote><ul><li>互联网中的数据是通过数据包来传输的，数据包在传输过程中容易丢失或出错。  </li><li>IP负责把数据包送达目的机。</li><li>UDP负责把数据包送达具体应用。</li><li>TCP保证了数据完整地传输，它的连接可分为三个阶段：建立连接、传输数据和断开连接。</li></ul></blockquote><h4 id="03-HTTP请求流程：为什么很多站点第二次打开速度会很快"><a href="#03-HTTP请求流程：为什么很多站点第二次打开速度会很快" class="headerlink" title="03 | HTTP请求流程：为什么很多站点第二次打开速度会很快"></a>03 | HTTP请求流程：为什么很多站点第二次打开速度会很快</h4><hr><blockquote><p>HTTP协议是建立在TCP协议基础之上的，HTTP是一种允许浏览器向服务器获取资源的协议，是Web的基础。</p></blockquote><h5 id="浏览器端发起HTTP请求流程"><a href="#浏览器端发起HTTP请求流程" class="headerlink" title="浏览器端发起HTTP请求流程"></a>浏览器端发起HTTP请求流程</h5><blockquote><ul><li>构建请求—-浏览器构建请求行信息，构建好后，浏览器准备发起网络请求。</li><li>查找缓存—-若缓存有副本，拦截请求，返回副本，结束请求。</li><li>准备IP地址和端口—- HTTP的内容是通过TCP的传输数据阶段来实现的、那HTTP网络请求的第一步就是和服务器建立TCP连接（DNS域名解析以及从URL中获取端口）。  </li><li>等待TCP队列—-Chrome有一个机制：同一个域名最多只能建立6个TCP连接，若同一域名同一时间有10个请求产生，则会有4个会进入排队等待状态。</li><li>建立TCP连接—-排队等待结束，和服务器握手，在HTTP工作开始前，浏览器便通过TCP与服务器建立了连接。</li><li>发送HTTP请求</li><li>服务器处理请求</li><li>服务器返回请求</li><li>断开连接</li></ul></blockquote><h4 id="04-导航流程：从输入URL到页面显示，这中间发生了什么？"><a href="#04-导航流程：从输入URL到页面显示，这中间发生了什么？" class="headerlink" title="04 | 导航流程：从输入URL到页面显示，这中间发生了什么？"></a>04 | 导航流程：从输入URL到页面显示，这中间发生了什么？</h4><hr><blockquote><p>大致描述如下：</p><ul><li>首先，用户从浏览器进程里输入请求信息；</li><li>然后，网络进程发起URL请求；</li><li>服务器响应URL请求之后，浏览器进程就又要开始准备渲染进程了；</li><li>渲染进程准备好之后，需要先向渲染进程提交页面数据，我们称之为提交文档阶段；</li><li>渲染进程接收完文档信息之后，便开始解析页面和加载子资源，完成页面的渲染。</li></ul></blockquote><h4 id="05-渲染流程上–HTML、CSS、JavaScript是如何变成页面的？"><a href="#05-渲染流程上–HTML、CSS、JavaScript是如何变成页面的？" class="headerlink" title="05 | 渲染流程上–HTML、CSS、JavaScript是如何变成页面的？"></a>05 | 渲染流程上–HTML、CSS、JavaScript是如何变成页面的？</h4><hr><blockquote></blockquote><h3 id="浏览器中的JavaScript执行机制-5讲"><a href="#浏览器中的JavaScript执行机制-5讲" class="headerlink" title="浏览器中的JavaScript执行机制 (5讲)"></a>浏览器中的JavaScript执行机制 (5讲)</h3><h4 id="07-变量提升：JavaScript代码是按顺序执行的吗？"><a href="#07-变量提升：JavaScript代码是按顺序执行的吗？" class="headerlink" title="07 | 变量提升：JavaScript代码是按顺序执行的吗？"></a>07 | 变量提升：JavaScript代码是按顺序执行的吗？</h4><hr><blockquote><p>本节的主要内容为：</p><ul><li>JavaScript代码执行过程中，需要先做<code>变量提升</code>，而之所以需要实现变量提升，是因为 JavaScript 代码在执行之前需要<code>先编译</code>。</li><li>在<code>编译阶段</code>，变量和函数会被存放到<code>变量环境</code>中，变量的默认值会被设置为undefined；在代码执行阶段,JavaScript引擎会从变量环境去查找自定义的变量和函数。</li><li>如果在编译阶段，存在两个相同的函数，那么最终存放在变量环境中的是最后定义的那个，这是因为后定义的会覆盖掉之前定义的。</li></ul></blockquote><blockquote><p>这一节的内容主要就是清楚的了解JavaScript的执行机制：<code>先编译，再执行</code>.</p></blockquote><h4 id="08-调用栈：为什么JavaScript代码会出现栈溢出？"><a href="#08-调用栈：为什么JavaScript代码会出现栈溢出？" class="headerlink" title="08 | 调用栈：为什么JavaScript代码会出现栈溢出？"></a>08 | 调用栈：为什么JavaScript代码会出现栈溢出？</h4><hr><blockquote><p>本节的主要内容为：<br>每调用一个函数，JavaScript 引擎会为其创建执行上下文，并把该执行上下文压入调用栈，然后 JavaScript引擎开始执行函数代码。<br>如果一个函数 A中调用了另一个函数B，那么JavaScript引擎会为B函数创建执行上下文，并将B函数的执行上下文压入栈顶。<br>当函数执行完毕时，JavaScript引擎会将该函数的执行上下文弹出栈。<br>当分配的调用栈空间被占满时，会引发“堆栈溢出”问题。</p></blockquote><blockquote><p>栈是一种非常重要的数据结构，不只在JS中，在其它编程语言，如C++、Java、Python等语言，，在执行过程中也都使用了栈来管理函数之间的调用关系。</p></blockquote><h4 id="09-块级作用域：var缺陷以及为什么要引入let和const？"><a href="#09-块级作用域：var缺陷以及为什么要引入let和const？" class="headerlink" title="09 | 块级作用域：var缺陷以及为什么要引入let和const？"></a>09 | 块级作用域：var缺陷以及为什么要引入let和const？</h4><hr><blockquote><p>本节的主要内容为：<br>ES6之前，ES的作用域只有两种：全局作用域和函数作用域。<br>作用域是指在程序中定义变量的区域，该位置决定了变量的生命周期。<br>ES6同时支持变量提升和块级作用域，分别是通过变量环境和词法环境的栈结构来实现的:<br>  块级作用域通过词法环境的栈结构来实现，变量提升是通过变量环境来实现的。</p></blockquote><h4 id="10-作用域链和闭包-：代码中出现相同的变量，JavaScript引擎是如何选择的？"><a href="#10-作用域链和闭包-：代码中出现相同的变量，JavaScript引擎是如何选择的？" class="headerlink" title="10 | 作用域链和闭包 ：代码中出现相同的变量，JavaScript引擎是如何选择的？"></a>10 | 作用域链和闭包 ：代码中出现相同的变量，JavaScript引擎是如何选择的？</h4><hr><blockquote><p>学习本节内容之前首先需要对<code>调用栈</code>、<code>执行上下文</code>、<code>变量环境</code>、<code>词法环境</code>的概念弄清楚。<br>本节的主要内容为：</p><ul><li>变量是通过作用域链来查找的。</li><li>词法作用域：词法作用域就是指作用域是由代码中函数声明的位置来决定的，所以词法作用域是静态的作用域，通过它就能够预测代码在执行过程中如何查找标识符。词法作用域是代码阶段就决定好的，和函数是怎么调用的没有关系。</li></ul></blockquote><blockquote><p>本节内容概念有点多且理解起来有一些晦涩，必须对JS代码的执行逻辑流程还有一些概念多多熟悉，理解起来才更容易一些。</p></blockquote><h4 id="11-this：从JavaScript执行上下文的视角讲清楚this"><a href="#11-this：从JavaScript执行上下文的视角讲清楚this" class="headerlink" title="11 | this：从JavaScript执行上下文的视角讲清楚this"></a>11 | this：从JavaScript执行上下文的视角讲清楚this</h4><hr><blockquote><p>首先学习this之前，要区分清楚<code>作用域链</code>和``this`是两套不同的系统，他们之间基本没太多联系。<br>执行上下文： 变量环境、词法环境、outer、this<br>全局执行上下文中的this：全局执行上下文中的 this 是指向 window 对象的。<br>函数执行上下文中的this：</p><blockquote><p>①、通过函数的call方法设置（bind、apply）</p></blockquote><blockquote><p>②、通过对象调用方法设置：得出两个结论</p><ul><li>在全局环境中调用一个函数，函数内部的 this 指向的是全局的window.</li><li>通过一个对象来调用其内部的一个方法，该方法的执行上下文中的this指向本身。</li></ul></blockquote><blockquote><p>③、通过构造函数中设置:<br>当执行 var myObj = new CreateObj() 的时候，JavaScript引擎做了四件事：</p><ul><li>首先创建了一个空对象tempObj。</li><li>调用CreateObj对象的call方法，并将tempObj作为call方法的参数，这样当CreateObj的执行上下文创建时，它的this就指向了tempObj对象。</li><li>然后执行CreateObj函数，此时的CreateObj函数执行上下文中的this指向了tempObj对象。</li><li>最后返回tempObj对象。</li></ul></blockquote></blockquote><h3 id="V8工作原理-3讲"><a href="#V8工作原理-3讲" class="headerlink" title="V8工作原理(3讲)"></a>V8工作原理(3讲)</h3><hr><h4 id="12-栈空间和堆空间：数据是如何存储的？"><a href="#12-栈空间和堆空间：数据是如何存储的？" class="headerlink" title="12 | 栈空间和堆空间：数据是如何存储的？"></a>12 | 栈空间和堆空间：数据是如何存储的？</h4><blockquote><p>我们把这种在使用之前就需要确认其变量数据类型的称为<code>静态语言</code>。<br>相反地，我们把在运行过程中需要检查数据类型的语言称为<code>动态语言</code>。</p></blockquote><blockquote><p>通常把偷偷转换的操作成为隐式类型转换：支持因此类型转换的语言称为<code>弱类型语言</code>，不支持隐式类型转换的语言称为<code>强类语言</code>。</p></blockquote><blockquote><p>原始数据类型的值都是直接保存在“栈”中，引用数据类型的值是存放在“堆”中的。</p></blockquote><h4 id="13-垃圾回收：垃圾数据是如何自动回收的？"><a href="#13-垃圾回收：垃圾数据是如何自动回收的？" class="headerlink" title="13 | 垃圾回收：垃圾数据是如何自动回收的？"></a>13 | 垃圾回收：垃圾数据是如何自动回收的？</h4><hr><blockquote><p>通常情况下：垃圾数据回收分为<code>手动回收</code>和<code>自动回收</code>两种策略。</p><p>JavaScript、Java、Python 等语言，产生的垃圾数据是由垃圾回收期来释放的，并不需要手动通过代码来释放。</p></blockquote><h5 id="调用栈中的数据是如何回收的"><a href="#调用栈中的数据是如何回收的" class="headerlink" title="调用栈中的数据是如何回收的"></a>调用栈中的数据是如何回收的</h5><blockquote><p>在调用栈中，有一个记录当前执行状态的指针(称为ESP),当一个函数执行结束之后，JavaScript引擎会通过向下移动ESP来销毁该函数保存在栈中的执行上下文。</p></blockquote><h5 id="堆中的数据是如何回收的"><a href="#堆中的数据是如何回收的" class="headerlink" title="堆中的数据是如何回收的"></a>堆中的数据是如何回收的</h5><blockquote><p>堆中的数据是如何回收的—-回收堆中的垃圾数据，需要用到JavaScript中的<code>垃圾回收期</code>。</p><p><b>前置知识点：代际假说的两个特点：</b>(代际假说时垃圾回收领域一个重要的术语)  </p><ul><li>第一个是大部分对象在内存中存在的时间很短，简单来说，就是很多对象一经分配内存，很快就变得不可访问。  </li><li>第二个是不死的对象，会活的更久。</li></ul><p>有了代际假说基础，我们便可以探讨V8是如何实现垃圾回收的了：<br>在V8中会把堆分为<code>新生代</code>和<code>老生代</code>两个区域，新生代存放的是<code>生存时间极短的对象</code>，老生代中存放的是<code>生存时间久的对象</code>。</p><ul><li>副垃圾回收器，主要负责新生代的垃圾回收。</li><li>主垃圾回收期，主要负责老生代的垃圾回收。</li></ul><p>接下来我们开始分析<b>垃圾回收期的工作流程</b><br>V8把堆分成了两个区域，并分别使用不同的垃圾回收期，但不论什么类型回收期，他们使用的是一套共同的执行流程。 </p></blockquote><h5 id="副垃圾回收器"><a href="#副垃圾回收器" class="headerlink" title="副垃圾回收器"></a>副垃圾回收器</h5><blockquote><p>新生代中用Scavenge算法来处理：即把新生代空间对半划分为两个区域：一半是<code>对象区域</code>，一半是<code>空闲区域</code>。<br>对象区域与回收区域会经过反复的角色翻转操作。<br>JavaScipt引擎采用了对象晋升策略，也就是经过两次垃圾回收仍然存活的对象，会被移动到老生区中。</p></blockquote><h5 id="主垃圾回收器"><a href="#主垃圾回收器" class="headerlink" title="主垃圾回收器"></a>主垃圾回收器</h5><blockquote><p>主要负责老生区中的垃圾回收，老生区中的对象有两个特点：一个是对象占用空间大，一个是对象存活时间长。<br>采用标记-清除(Mark-Sweep)的算法进行垃圾回收。<br>由于碎片过多而导致大对象无法分配到足够的连续内存，于是又产生来另外一种算法–标记-整理(Mark-Compact)。 </p><p>全停顿：为了降低老生代的垃圾回收而造成的卡顿，V8将标记过程分为一个个的子标记过程，同时让垃圾回收标记和JavaScript应用逻辑交替进行，直到标记阶段完成，我们把这个算法称为增量标记(Incremental Marking)算法。</p></blockquote><h4 id="14-编译器和解释器：V8是如何执行一段JavaScript代码的？"><a href="#14-编译器和解释器：V8是如何执行一段JavaScript代码的？" class="headerlink" title="14 | 编译器和解释器：V8是如何执行一段JavaScript代码的？"></a>14 | 编译器和解释器：V8是如何执行一段JavaScript代码的？</h4><hr><blockquote><p>了解V8的编译流程能让你对语言以及相关工具有更充分的认识。<br>深入理解V8的工作原理，这里我们需要搞清楚一些概念和原理：<code>编译器(Compiler)</code>、<code>解释器(Interpreter)</code>、<code>抽象语法树(AST)</code>、<code>字节码(Bytecode)</code>、<code>即时编译器(JIT)</code>等概念。</p></blockquote><h5 id="编译器和解释器"><a href="#编译器和解释器" class="headerlink" title="编译器和解释器"></a>编译器和解释器</h5><blockquote><p>按语言的执行流程，可以把语言划分为编译型语言和解释型语言。<br><code>编译型语言</code>在程序执行之前，需要经过编译器的编译过程，并且编译之后会直接保留机器能读懂的二进制文件，这样每次运行程序时，都可以直接运行该二进制文件，而不需要再次重新编译了。<br>而由<code>解释型语言</code>编写的程序，在每次运行时都需要通过解释器对程序进行动态解释和执行。</p></blockquote><h5 id="V8时如何执行一段JavaScript代码的"><a href="#V8时如何执行一段JavaScript代码的" class="headerlink" title="V8时如何执行一段JavaScript代码的"></a>V8时如何执行一段JavaScript代码的</h5><blockquote><p>V8在执行过程中既有解释器Ignition，也有编译器TurboFan.下面分解其执行流程：  </p><ol><li>生成抽象<code>语法树(AST)</code>和执行上下文。<br>AST的结构和代码的结构非常相似。因此可以把AST看成代码的结构化表示，编译器和解释器后续的工作都需要依赖于AST,而不是源代码。<br>抽象语法树(AST)的应用：Babel、ESLint。  </li></ol><p>生成AST需要经过两个阶段：第一阶段是分词(tokenize)，又称为词法分析。第二个阶段是解析(parse)，又称为语法分析。<br>这就是 AST 的生成过程，先分词，再解析。<br>有了AST后，接下来V8就会生成该代码的执行上下文。</p><ol start="2"><li><p>生成<code>字节码</code><br>第一步的AST和执行上下文搞定后，下一步就是解释器登场，根据AST生成字节码，并解释执行字节码。<br>说到字节码，其实一开始的时候V8是没有字节码的，而是直接将AST转换为机器码。但是随着Chrome在手机上普及，内存占用问题暴露出来了（这是因为V8需要消耗大量的内存在存放转换后的机器码）。因此为了解决内存占用问题，引入来字节码。</p><p><b>字节码就是介于AST和机器码之间的一种代码。但是与特定类型的机器码无关，字节码需要通过解释器将其转换为机器码后才能执行。</b></p></li><li><p>执行代码<br>通常，如果有一段第一次执行的字节码，解释器 Ignition会逐条解释执行，若发现有热点代码，那么编译器TurboFan就会把该段热点的字节码编译为高效的机器码，再次执行这段被优化的代码时，只需要执行编译后的机器码就可以了。<br>我们把这种技术称为<code>即时编译(JIT)</code>。</p></li></ol></blockquote><h5 id="JavaScript的性能优化"><a href="#JavaScript的性能优化" class="headerlink" title="JavaScript的性能优化"></a>JavaScript的性能优化</h5><blockquote><p>在过去几年中，JavaScript的性能得到了大幅提升，这得益于V8团队对解释器和编译器的不断改进和优化。<br>应该将优化的中心聚焦在单次脚本的执行时间和脚本的网络下载上，主要关注以下三点内容：  </p><ul><li>提升单次脚本执行速度 。 </li><li>避免大的内联脚本 。 </li><li>减少JavScript文件容量。  </li></ul></blockquote><h3 id="浏览器中的页面循环系统-5讲"><a href="#浏览器中的页面循环系统-5讲" class="headerlink" title="浏览器中的页面循环系统(5讲)"></a>浏览器中的页面循环系统(5讲)</h3><h4 id="15-消息队列和事件循环：页面上怎么“活”起来的？"><a href="#15-消息队列和事件循环：页面上怎么“活”起来的？" class="headerlink" title="15 | 消息队列和事件循环：页面上怎么“活”起来的？"></a>15 | 消息队列和事件循环：页面上怎么“活”起来的？</h4><hr><blockquote><p>浏览器页面是由消息队列和事件循环系统来驱动的。</p></blockquote><blockquote><p>如果把一个渲染进程比作一个国家，在线程世界里，我们将主线程比作一个总统。总统公务如此繁忙，当然需要一些得力大臣来帮助统筹调度等，我们这里要说的得力大臣就是要学习的<code>消息队列</code>和<code>事件循环系统</code>.  </p></blockquote><h5 id="在线程运行中处理新任务"><a href="#在线程运行中处理新任务" class="headerlink" title="在线程运行中处理新任务"></a>在线程运行中处理新任务</h5><blockquote><p>要想在线程运行过程中，能接受并执行新的任务，就需要采用事件循环机制。</p></blockquote><h5 id="处理其它线程发送过来的任务"><a href="#处理其它线程发送过来的任务" class="headerlink" title="处理其它线程发送过来的任务"></a>处理其它线程发送过来的任务</h5><blockquote><p>处理其它线程发送过来的任务通用模式是消息队列。<br><code>消息队列</code>说一种数据结构，可以存放要执行的任务。它符合队列“先进先出”的特点。</p></blockquote><h5 id="处理其它进程发送过来的任务"><a href="#处理其它进程发送过来的任务" class="headerlink" title="处理其它进程发送过来的任务"></a>处理其它进程发送过来的任务</h5><blockquote><p>渲染进程专门有一个IO线程用来接受其他进程传进来的消息。接受到消息后将这些消息组装成任务发送给主线程，后续步骤同上述。</p></blockquote><h5 id="消息队列中的任务类型"><a href="#消息队列中的任务类型" class="headerlink" title="消息队列中的任务类型"></a>消息队列中的任务类型</h5><blockquote><p>输入事件（鼠标滚动、点击、移动）、微任务、文件读写、WebSocket、JavaScript定时器等等。<br>消息队列还包含了很多与页面相关的事件：JavaScript执行、解析DOM、样式计算、布局计算、CSS动画等。</p></blockquote><h4 id="16-WebAPI：setTimeout是如何实现的？"><a href="#16-WebAPI：setTimeout是如何实现的？" class="headerlink" title="16 | WebAPI：setTimeout是如何实现的？"></a>16 | WebAPI：setTimeout是如何实现的？</h4><hr><blockquote><p>setTimeout。一个定时器，用来指定某个函数在多少毫秒之后执行。 </p><p>首先，为了支持定时器实现，浏览器增加了延时队列。<br>其次，由于消息队列排队和一些系统级别的限制，通过setTimeout设置的回调任务并非总是可以实时地执行，这样就不能满足一些实时性要求较高的需求了。<br>最后，在定时器中使用过程中，还存在一些陷阱需要去留意。</p></blockquote><h4 id="17-WebAPI：XMLHttpRequest是怎么实现的？"><a href="#17-WebAPI：XMLHttpRequest是怎么实现的？" class="headerlink" title="17 | WebAPI：XMLHttpRequest是怎么实现的？"></a>17 | WebAPI：XMLHttpRequest是怎么实现的？</h4><hr><h5 id="回调函数-VS-系统调用栈"><a href="#回调函数-VS-系统调用栈" class="headerlink" title="回调函数 VS  系统调用栈"></a>回调函数 VS  系统调用栈</h5><h4 id="18-宏任务和微任务：不是所有任务都是一个待遇"><a href="#18-宏任务和微任务：不是所有任务都是一个待遇" class="headerlink" title="18 | 宏任务和微任务：不是所有任务都是一个待遇"></a>18 | 宏任务和微任务：不是所有任务都是一个待遇</h4><hr><p>##### </p><h4 id="19-Promise：使用Promise，告别回调函数"><a href="#19-Promise：使用Promise，告别回调函数" class="headerlink" title="19 | Promise：使用Promise，告别回调函数"></a>19 | Promise：使用Promise，告别回调函数</h4><hr><blockquote><p>Promise已经成为现代前端的“水”和“电”，很是关键，学好Promise势在必行！</p></blockquote><blockquote><p>Promise解决的是异步编码风格的问题。</p></blockquote><h5 id="Promise：消灭嵌套调用和多次错误处理"><a href="#Promise：消灭嵌套调用和多次错误处理" class="headerlink" title="Promise：消灭嵌套调用和多次错误处理"></a>Promise：消灭嵌套调用和多次错误处理</h5><h3 id="浏览器中的页面-8讲"><a href="#浏览器中的页面-8讲" class="headerlink" title="浏览器中的页面(8讲)"></a>浏览器中的页面(8讲)</h3><h4 id="21-Chrome开发者工具：利用网络面板做性能分析"><a href="#21-Chrome开发者工具：利用网络面板做性能分析" class="headerlink" title="21 | Chrome开发者工具：利用网络面板做性能分析"></a>21 | Chrome开发者工具：利用网络面板做性能分析</h4><hr><blockquote><p>这节内容是介绍了我们平时开发用到的Chrome浏览器的面板。下面记录一下从这篇文章加深印象的知识点：</p><p>控制器：红色圆点表示“开始/暂停抓包”。<br>Disabled cache:禁止从Cache中加载资源。<br>下载信息概要：重点关注【DOMContentLoaded】和【Load】两个事件。</p><ul><li>DOMContentLoaded:这个事件发生后，说明页面已经构建好DOM，意味着构建DOM需要的HTML文件、JavaScript、CSSCSS文件都已经下载完成。</li><li>Load:说明浏览器已经加载了所有的资源（样式、图片等）。<br>单个资源的时间线面板：</li><li>Queuing:导致排队有三个原因，一为资源优先级别；二是浏览器会为每个域名最多维护6个TCP连接；第三个是网络进程为数据分配磁盘空间。</li><li>Stalled：排队完成，进入连接状态，进入连接之前，还有一些原因会导致连接过程被推迟，体现在此。</li><li>Request send:网络进程准备请求数据，并将它发送至网络。这个时间通常不超过1毫秒。</li><li>Waiting(TTFB):数据发送出去，等待接受服务器的第一个字节的数据，通常称为“第一字节时间“。反映服务器响应时间的重要指标。</li></ul></blockquote><h4 id="22-DOM树-JavaScript是如何影响DOM树构建的"><a href="#22-DOM树-JavaScript是如何影响DOM树构建的" class="headerlink" title="22 | DOM树 | JavaScript是如何影响DOM树构建的"></a>22 | DOM树 | JavaScript是如何影响DOM树构建的</h4><hr><p><code>什么是DOM？</code> </p><blockquote><p>从网络传给渲染引擎的HTML文件字节流是无法直接被渲染引擎理解的。<br>所以要将其转化为渲染引擎能够理解的内部结构。<br>这个结构就是DOM。<br><code>DOM三个层面的作用：</code>  </p><ul><li>从页面视角看，DOM是生成页面的基础数据结构。  </li><li>从JS视角来看，DOM提供了给JS脚本操作的接口，JS通过这套接口可以对DOM进行访问，从而改变文档的内容、结构、样式。  </li><li>从安全视角来看，DOM是一道安全防护线。一些不安全的内容在DOM解析阶段被拒之门外。<br>总结：DOM是表述HTML的内部文件，它将Web页面和JavaScript脚本连接起来，并过滤一些不安全的内容。<br><code>DOM树如何生成</code><br>通过<code>HTML解析器</code>：它存在与渲染引擎内部，负责将HTML字节流转换为DOM结构。<br>注意：HTML解析器不是等整个文档加载完毕之后再去解析的，而是网络进程加载了多少数据，HTML解析器便解析多少数据。 </li><li>第一个阶段：通过分词器将字节流转换为Token。（分为Tag Token和文本Token），Tag Token又分为StartTag和EndTag。  </li><li>第二三阶段同步：需要将Token解析为DOM节点，并将DOM节点添加到DOM树中。  </li></ul></blockquote><blockquote><p>JavaScript的下载过程会阻塞DOM的解析。Chrome对此做了优化，其中最主要的一个优化是<code>预解析操作</code>(预解析线程会提前下载这些文件)。 </p></blockquote><h4 id="23-渲染流水线：CSS如何影响首次加载时的白屏时间"><a href="#23-渲染流水线：CSS如何影响首次加载时的白屏时间" class="headerlink" title="23 | 渲染流水线：CSS如何影响首次加载时的白屏时间"></a>23 | 渲染流水线：CSS如何影响首次加载时的白屏时间</h4><hr><p><code>渲染流水线视角下的CSS</code> </p><blockquote><p>合成布局树需要CSSOM和DOM。</p></blockquote><blockquote><p>同HTML一样，浏览器渲染引擎是不理解CSS的，需要将其解析成渲染引擎能够理解的结构：CSSOM。<br>CSSOM有两个作用：第一个是提供给JavaScript操作样式表的能力，第二个是为布局树的合成提供基础的样式信息。 </p></blockquote><blockquote><p>等DOM和CSSOM都构建好之后，渲染引擎就会构造布局树.<br>CSS的白屏出现的通常瓶颈主要体现在：下载CSS文件、下载JavaScript文件和执行JavaSCript。  </p></blockquote><blockquote><p>缩短白屏时间的策略：  </p><ul><li>通过内敛JavaScript、内敛CSS来移除这两种类型的文件下载，这样获取到HTML文件后就可以直接开始渲染流程。 </li><li>在不适合内敛的场景下，减少文件体积，比如通过Webpack等工具移除一些不必要的注释，并压缩JavaScript文件。 </li><li>可以将一些不需要在解析HTML阶段使用的JavaScrit，标记上async活defer。 </li><li>对于特大的CSS文件，可以通过媒体查询属性，将其拆分为不同用途的多CSS文件。</li></ul></blockquote><h4 id="24-分层和合成机制：为什么CSS动画比JavaScript高效？"><a href="#24-分层和合成机制：为什么CSS动画比JavaScript高效？" class="headerlink" title="24 | 分层和合成机制：为什么CSS动画比JavaScript高效？"></a>24 | 分层和合成机制：为什么CSS动画比JavaScript高效？</h4><hr><blockquote><p>关于任意一桢的生成方式，有重排、重绘和合成三种方式。 </p><p>本节主要学习渲染引擎的分层和合成机制，因为分层和合成机制代表了浏览器最为先进的合成技术。<br>Chrome中的合成技术，用三个词来概括的话：分层、分块、合成。  </p></blockquote><h3 id="浏览器安全-5讲"><a href="#浏览器安全-5讲" class="headerlink" title="浏览器安全(5讲)"></a>浏览器安全(5讲)</h3><h4 id="35-CSRF攻击、陌生链接不要点"><a href="#35-CSRF攻击、陌生链接不要点" class="headerlink" title="35 | CSRF攻击、陌生链接不要点"></a>35 | CSRF攻击、陌生链接不要点</h4><hr><blockquote><p><code>黑客经常采用的三种攻击方式是：</code> </p><ul><li>自动发起Get请求。 </li><li>自动发起Post请求。</li><li>引诱用户点击链接。<br>和XSS攻击不同的是，CSRF攻击不需要将恶意代码注入用户的页面，仅仅是利用服务器的漏洞和用户的登录状态来展开攻击。 </li></ul></blockquote><blockquote><p><code>要发起CSRF攻击需要具备三个条件：</code>  </p><ul><li>目标站点存在服务器漏洞。  </li><li>用户登录过目标站点。  </li><li>黑客需要通过第三方站点发起攻击。<br>黑客通过CSRF攻击，最关键的一点是找到服务器的漏洞，所以说对于CSRF攻击的主要防护手段是提升服务器的安全性。  </li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;导读&quot;&gt;&lt;a href=&quot;#导读&quot; class=&quot;headerlink&quot; title=&quot;导读&quot;&gt;&lt;/a&gt;导读&lt;/h3&gt;&lt;h5 id=&quot;本文主要是从极客时间专栏《浏览器工作原理与实践》，对其每一章的学习进行系统性总结。&quot;&gt;&lt;a href=&quot;#本文主要是从极客时间专栏《浏览器工作原理与实践》，对其每一章的学习进行系统性总结。&quot; class=&quot;headerlink&quot; title=&quot;本文主要是从极客时间专栏《浏览器工作原理与实践》，对其每一章的学习进行系统性总结。&quot;&gt;&lt;/a&gt;本文主要是从极客时间专栏《浏览器工作原理与实践》，对其每一章的学习进行系统性总结。&lt;/h5&gt;&lt;hr&gt;
    
    </summary>
    
      <category term="浏览器工作原理与实践" scheme="http://liugezhou.online/categories/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86%E4%B8%8E%E5%AE%9E%E8%B7%B5/"/>
    
    
      <category term="浏览器工作原理与实践" scheme="http://liugezhou.online/tags/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86%E4%B8%8E%E5%AE%9E%E8%B7%B5/"/>
    
  </entry>
  
  <entry>
    <title>每周分享第十二期</title>
    <link href="http://liugezhou.online/2019/09/15/%E6%AF%8F%E5%91%A8%E5%88%86%E4%BA%AB%E7%AC%AC%E5%8D%81%E4%BA%8C%E6%9C%9F/"/>
    <id>http://liugezhou.online/2019/09/15/每周分享第十二期/</id>
    <published>2019-09-15T07:00:00.000Z</published>
    <updated>2019-09-30T03:18:02.129Z</updated>
    
    <content type="html"><![CDATA[<blockquote><h4 id="有的人-将跑步贯穿自己的生命"><a href="#有的人-将跑步贯穿自己的生命" class="headerlink" title="有的人 将跑步贯穿自己的生命"></a>有的人 将跑步贯穿自己的生命</h4><h4 id="有的人-把对动物的呵护作为一种消遣"><a href="#有的人-把对动物的呵护作为一种消遣" class="headerlink" title="有的人 把对动物的呵护作为一种消遣"></a>有的人 把对动物的呵护作为一种消遣</h4><h4 id="有的人-通过看书来来作为自己追求自由的一种方式"><a href="#有的人-通过看书来来作为自己追求自由的一种方式" class="headerlink" title="有的人 通过看书来来作为自己追求自由的一种方式"></a>有的人 通过看书来来作为自己追求自由的一种方式</h4><h4 id="有的人-读史写史，想要观测人生的意义"><a href="#有的人-读史写史，想要观测人生的意义" class="headerlink" title="有的人 读史写史，想要观测人生的意义"></a>有的人 读史写史，想要观测人生的意义</h4><h4 id="有的人-无为而治-平淡的对着一切喜怒哀乐"><a href="#有的人-无为而治-平淡的对着一切喜怒哀乐" class="headerlink" title="有的人 无为而治 平淡的对着一切喜怒哀乐"></a>有的人 无为而治 平淡的对着一切喜怒哀乐</h4><h4 id="有的人-悲观乐观交至，无奈的挥洒着每一滴汗水"><a href="#有的人-悲观乐观交至，无奈的挥洒着每一滴汗水" class="headerlink" title="有的人 悲观乐观交至，无奈的挥洒着每一滴汗水"></a>有的人 悲观乐观交至，无奈的挥洒着每一滴汗水</h4><h4 id="有的人-不喜思考不愿作为，按着别人的意识走着自以为的康庄大道"><a href="#有的人-不喜思考不愿作为，按着别人的意识走着自以为的康庄大道" class="headerlink" title="有的人 不喜思考不愿作为，按着别人的意识走着自以为的康庄大道"></a>有的人 不喜思考不愿作为，按着别人的意识走着自以为的康庄大道</h4></blockquote><a id="more"></a><blockquote><h4 id="不管怎样，在未来或者现在，当回收往事的时候，有那么一件、两件、三四件我们为之自豪、骄傲、坚持的事，那我们便是幸运的。"><a href="#不管怎样，在未来或者现在，当回收往事的时候，有那么一件、两件、三四件我们为之自豪、骄傲、坚持的事，那我们便是幸运的。" class="headerlink" title="不管怎样，在未来或者现在，当回收往事的时候，有那么一件、两件、三四件我们为之自豪、骄傲、坚持的事，那我们便是幸运的。"></a>不管怎样，在未来或者现在，当回收往事的时候，有那么一件、两件、三四件我们为之自豪、骄傲、坚持的事，那我们便是幸运的。</h4></blockquote><h3 id="门萨俱乐部"><a href="#门萨俱乐部" class="headerlink" title="门萨俱乐部"></a>门萨俱乐部</h3><hr><blockquote><p>门萨的英文名为：<code>MENSA</code>, 是拉丁语中”圆桌”的意思。</p><p>MENSA不涉及任何政治、宗教及社会事务而只关注纯粹的智商问题。</p><p>MENSA特别注重的是它是一个非营利性社团，在其运作中可能产生的少量获利都用作其活动经费且受到严格监控。</p><p>除了高智商外，MENSA的会员可以说并无其他特征。参加MENSA的惟一途径便是参加考试并脱颖而出（平均每一百人中有两人有机会被吸纳为正式会员）。</p><p>MENSA拥有十万会员，分布遍及世界100个国家和地区.</p></blockquote><h3 id="双峰干涉实验–《天才最左，疯子在右》"><a href="#双峰干涉实验–《天才最左，疯子在右》" class="headerlink" title="双峰干涉实验–《天才最左，疯子在右》"></a>双峰干涉实验–《天才最左，疯子在右》</h3><hr><blockquote><p>这本书在三四年前看了一些，根本不知道写的是个什么，最近打开这本书瞅了瞅激起了一些兴趣。</p></blockquote><blockquote><p>其中印象比较深刻的一节–<code>迷失的旅行者</code>，提到了关于双峰干涉实验的一个解释–多重宇宙。</p></blockquote><blockquote><p>未曾查到此书是真记录还是真噱头，只是抱着一种不求甚解的感觉，引发一些遐想。</p></blockquote><h3 id="左耳朵耗子"><a href="#左耳朵耗子" class="headerlink" title="左耳朵耗子"></a>左耳朵耗子</h3><hr><blockquote><p>微博用户【左耳朵耗子】。</p></blockquote><blockquote><p>陈皓：20年软件开发相关工作经验，10年以上项目和团队管理经验，个人网站：<a href="https://coolshell.cn/" target="_blank" rel="noopener">https://coolshell.cn/</a></p><p>之前读过他的好几篇文章，很有想法。时不时的跟人在网上怼两句，也被人怼。</p><p>他在微博的很多言论、有意思。</p></blockquote><h3 id="Zoom"><a href="#Zoom" class="headerlink" title="Zoom"></a>Zoom</h3><hr><blockquote><p>如果你的团队需要开视频会议，可以使用Zoom。<br>但不幸的是前几天：左耳朵耗子在他的微博上说Zoom被墙。</p></blockquote><h3 id="邮箱"><a href="#邮箱" class="headerlink" title="邮箱"></a>邮箱</h3><hr><blockquote><p>由于邮箱众多，很早之前便开始使用网易邮箱大师，今天突然发现还是IPhone自带的邮件功能好用很多，纯天然无广告。</p></blockquote><h3 id="Research"><a href="#Research" class="headerlink" title="Research"></a><a href="http://www.suiyuanka.com" target="_blank" rel="noopener">Research</a></h3><blockquote><p>一个中文搜索的聚合网站，显示同一个关键字在不同网站的搜索结果。</p></blockquote><h3 id="在开源项目中展示广告的后续"><a href="#在开源项目中展示广告的后续" class="headerlink" title="在开源项目中展示广告的后续"></a><a href="https://mp.weixin.qq.com/s/UnRg1CuiupNos_h2XRNf-w" target="_blank" rel="noopener">在开源项目中展示广告的后续</a></h3><hr><blockquote><p>前一段时间，一个 Star 数超过 2.2 万的 Standard JS 开源项目做了一个尝试，通过终端安装后展示赞助商的广告。<br><b>事件后续:</b><br>0、该实验自开启后就遭到很多批评，两个赞助商也退出了；<br>1、实验发起人之一的 feross，在其个人博客发文，宣告实验终结；<br>2、npm 公司的 CTO 已对外作出回应，不接受在终端展示商业广告。另外，npm 会修改更新政策.</p></blockquote><h3 id="better-scroll"><a href="#better-scroll" class="headerlink" title="better-scroll"></a>better-scroll</h3><hr><blockquote><p>BetterScroll 是一款重点解决移动端（已支持 PC）各种滚动场景需求的插件。它的核心是借鉴的 iscroll 的实现，它的 API 设计基本兼容 iscroll，在 iscroll 的基础上又扩展了一些 feature 以及做了一些性能优化。</p></blockquote><blockquote><p>关于此插件：<br><a href="https://better-scroll.github.io/docs/zh-CN/guide/" target="_blank" rel="noopener">better-scroll的官方文档</a><br><a href="https://zhuanlan.zhihu.com/p/27407024" target="_blank" rel="noopener">当better-scroll遇见Vue</a></p></blockquote><h3 id="数据记录"><a href="#数据记录" class="headerlink" title="数据记录"></a>数据记录</h3><hr><blockquote><p>阮一峰的本周分享刊首语提到了如何让三分钟热度的用户坚持下来的一个解决方法：就是数据记录。每天都记录下来干的事情。可以看到自己的进步，产生一种不断挑战自己、超越自己的愿望。<br>正如文中提到的，GitHub 个人页的日历栏目，以及我现在所磕磕盼盼的周总结，希望可以通过数据记录的方式、看到自己的进步，让自己在这个做什么都像是浪费生命的世界里有些记录。</p></blockquote><h3 id="蚂蚁搬家工具"><a href="#蚂蚁搬家工具" class="headerlink" title="蚂蚁搬家工具"></a><a href="https://github.com/ant-move/antmove" target="_blank" rel="noopener">蚂蚁搬家工具</a></h3><hr><blockquote><p>小程序跨平台开发工具。一键实现微信小程序项目到支付宝小程序的迁徙，不再为重复开发而烦恼。</p></blockquote><h3 id="HelloDjango-Django-博客教程"><a href="#HelloDjango-Django-博客教程" class="headerlink" title="HelloDjango - Django 博客教程"></a><a href="https://www.zmrenwu.com/courses/hellodjango-blog-tutorial/" target="_blank" rel="noopener">HelloDjango - Django 博客教程</a></h3><hr><blockquote><p>Django 框架的中文入门教程，免费带你学 django 全栈。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;h4 id=&quot;有的人-将跑步贯穿自己的生命&quot;&gt;&lt;a href=&quot;#有的人-将跑步贯穿自己的生命&quot; class=&quot;headerlink&quot; title=&quot;有的人 将跑步贯穿自己的生命&quot;&gt;&lt;/a&gt;有的人 将跑步贯穿自己的生命&lt;/h4&gt;&lt;h4 id=&quot;有的人-把对动物的呵护作为一种消遣&quot;&gt;&lt;a href=&quot;#有的人-把对动物的呵护作为一种消遣&quot; class=&quot;headerlink&quot; title=&quot;有的人 把对动物的呵护作为一种消遣&quot;&gt;&lt;/a&gt;有的人 把对动物的呵护作为一种消遣&lt;/h4&gt;&lt;h4 id=&quot;有的人-通过看书来来作为自己追求自由的一种方式&quot;&gt;&lt;a href=&quot;#有的人-通过看书来来作为自己追求自由的一种方式&quot; class=&quot;headerlink&quot; title=&quot;有的人 通过看书来来作为自己追求自由的一种方式&quot;&gt;&lt;/a&gt;有的人 通过看书来来作为自己追求自由的一种方式&lt;/h4&gt;&lt;h4 id=&quot;有的人-读史写史，想要观测人生的意义&quot;&gt;&lt;a href=&quot;#有的人-读史写史，想要观测人生的意义&quot; class=&quot;headerlink&quot; title=&quot;有的人 读史写史，想要观测人生的意义&quot;&gt;&lt;/a&gt;有的人 读史写史，想要观测人生的意义&lt;/h4&gt;&lt;h4 id=&quot;有的人-无为而治-平淡的对着一切喜怒哀乐&quot;&gt;&lt;a href=&quot;#有的人-无为而治-平淡的对着一切喜怒哀乐&quot; class=&quot;headerlink&quot; title=&quot;有的人 无为而治 平淡的对着一切喜怒哀乐&quot;&gt;&lt;/a&gt;有的人 无为而治 平淡的对着一切喜怒哀乐&lt;/h4&gt;&lt;h4 id=&quot;有的人-悲观乐观交至，无奈的挥洒着每一滴汗水&quot;&gt;&lt;a href=&quot;#有的人-悲观乐观交至，无奈的挥洒着每一滴汗水&quot; class=&quot;headerlink&quot; title=&quot;有的人 悲观乐观交至，无奈的挥洒着每一滴汗水&quot;&gt;&lt;/a&gt;有的人 悲观乐观交至，无奈的挥洒着每一滴汗水&lt;/h4&gt;&lt;h4 id=&quot;有的人-不喜思考不愿作为，按着别人的意识走着自以为的康庄大道&quot;&gt;&lt;a href=&quot;#有的人-不喜思考不愿作为，按着别人的意识走着自以为的康庄大道&quot; class=&quot;headerlink&quot; title=&quot;有的人 不喜思考不愿作为，按着别人的意识走着自以为的康庄大道&quot;&gt;&lt;/a&gt;有的人 不喜思考不愿作为，按着别人的意识走着自以为的康庄大道&lt;/h4&gt;&lt;/blockquote&gt;
    
    </summary>
    
      <category term="每周分享" scheme="http://liugezhou.online/categories/%E6%AF%8F%E5%91%A8%E5%88%86%E4%BA%AB/"/>
    
    
      <category term="每周分享" scheme="http://liugezhou.online/tags/%E6%AF%8F%E5%91%A8%E5%88%86%E4%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title>每周分享第十一期</title>
    <link href="http://liugezhou.online/2019/09/08/%E6%AF%8F%E5%91%A8%E5%88%86%E4%BA%AB%E7%AC%AC%E5%8D%81%E4%B8%80%E6%9C%9F/"/>
    <id>http://liugezhou.online/2019/09/08/每周分享第十一期/</id>
    <published>2019-09-08T00:32:00.000Z</published>
    <updated>2019-09-30T03:18:02.128Z</updated>
    
    <content type="html"><![CDATA[<blockquote><h4 id="这两周疲于总结，想到之前写简书文章的时候，也是坚持日更到五十来天便停滞不前了。这两者最后都中断了下的原因，大概是对一件事的忠诚度不够，驱动力不足、对做的这件事回报感不强烈，越写越疲于应付，实在是一个不好的苗头。我们中华文化传统常言道要坚持，我想-搞清楚坚持的目的是什么-才是当下比较重要的一件事。"><a href="#这两周疲于总结，想到之前写简书文章的时候，也是坚持日更到五十来天便停滞不前了。这两者最后都中断了下的原因，大概是对一件事的忠诚度不够，驱动力不足、对做的这件事回报感不强烈，越写越疲于应付，实在是一个不好的苗头。我们中华文化传统常言道要坚持，我想-搞清楚坚持的目的是什么-才是当下比较重要的一件事。" class="headerlink" title="这两周疲于总结，想到之前写简书文章的时候，也是坚持日更到五十来天便停滞不前了。这两者最后都中断了下的原因，大概是对一件事的忠诚度不够，驱动力不足、对做的这件事回报感不强烈，越写越疲于应付，实在是一个不好的苗头。我们中华文化传统常言道要坚持，我想 搞清楚坚持的目的是什么,才是当下比较重要的一件事。"></a>这两周疲于总结，想到之前写简书文章的时候，也是坚持日更到五十来天便停滞不前了。这两者最后都中断了下的原因，大概是对一件事的忠诚度不够，驱动力不足、对做的这件事回报感不强烈，越写越疲于应付，实在是一个不好的苗头。我们中华文化传统常言道要坚持，我想 搞清楚坚持的目的是什么,才是当下比较重要的一件事。</h4></blockquote><a id="more"></a><h3 id="ZAO刷屏"><a href="#ZAO刷屏" class="headerlink" title="ZAO刷屏"></a>ZAO刷屏</h3><blockquote><p>从8月30日(上周五)晚开始，一款在陌陌团队开发的名为 “ZAO” 的换脸软件迅速在朋友圈刷屏，宣称采用了 AI 技术，只需要一张正脸照就可以把自己变成视频中的主角，受到大火🔥，迅速抢占榜单。随后被富有正义感、社会责任感的一系列公号提出质疑：根据之前的协议，一旦你换脸了，他将可以使用你的肖像权，而且是完全免费、不可撤销、永久、可转授权和可再许可的权利。<br>此后经过国媒人民日报等大V披露，“ZAO”修改了他的协议。</p><p>这件事的背后反应的是一部分人对隐私权的重视程度在逐步提高。在国际化社会氛围下的一个营造、知识水平的提高等都在日益加强，同时联想到最近在推广的刷脸支付等。技术的发展是工作人员日夜辛勤付出的劳动成果，只是其背后的数据存储、数据运用的暗箱最后会不会又反过来引领社会潮流，就好比达尔文的[进化论]一样，新的进化可能通过互联网已经开始新一轮的进化。</p></blockquote><h3 id="切尔诺贝利：核电事故"><a href="#切尔诺贝利：核电事故" class="headerlink" title="切尔诺贝利：核电事故"></a>切尔诺贝利：核电事故</h3><blockquote><p>切利诺贝尔核事故，是一件发生在苏联统治下乌克兰境内切尔诺贝利核电站的核子反应堆事故。该事故被认为是历史上最严重的核电事故，也是首例被国际核事件分级表评为第七级事件的特大事故（第二例是2011年3月11日发生在日本福岛县的福岛第一核电站事故）.<br>1986年4月26日凌晨1点23分，在乌克兰普里皮亚季邻近的切尔诺贝利，核电站在进行第四次的停电测试过程中，由于一系列的原因，核电厂连续爆炸且发出大量的高能辐射，射线剂量是二战时期爆炸于广岛的原子弹的400倍以上。<br>此次事件网上有部分观点认为也是苏联解体的一个诱因，事故发生后，其造成的影响是及其深远、惨痛至今。</p></blockquote><blockquote><p>Craig Mazin执笔﹑Johan Renck执导的HBO/Sky合拍5集迷你剧《切尔诺贝利 Chernobyl》就是那宗闻名的人为灾难事件。</p></blockquote><h3 id="简明美国史"><a href="#简明美国史" class="headerlink" title="简明美国史"></a>简明美国史</h3><blockquote><p>《简明美国史》是一本很有趣的关于美国历史的著作，短小精悍，如果只是想简单了解一下美国历史，可以读读这本书，很震撼。</p></blockquote><blockquote><p>这本书看完之后感觉这描述的美国是一个神奇、牛逼、法制、民主、神的国度。不得不感觉，美国的老大哥地位值得让人尊敬。</p></blockquote><h3 id="vconsole"><a href="#vconsole" class="headerlink" title="vconsole"></a><a href="https://github.com/Tencent/vConsole" target="_blank" rel="noopener">vconsole</a></h3><blockquote><p>预览:<a href="http://wechatfe.github.io/vconsole/demo.html" target="_blank" rel="noopener">http://wechatfe.github.io/vconsole/demo.html</a><br>一款轻量、可扩展的用于在H5网页调试打印的第三方插件。</p></blockquote><h3 id="VSCode"><a href="#VSCode" class="headerlink" title="VSCode"></a>VSCode</h3><blockquote><p>[如何让 vscode 变成你的开发神器？] (<a href="https://mp.weixin.qq.com/s/kSRPBjpU4DlGJFYUeXwf4Q" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/kSRPBjpU4DlGJFYUeXwf4Q</a>).</p><ul><li><code>Ctrl H</code> ：替换文字</li><li><code>Ctrl P</code> ：搜索文件名称</li><li><code>Ctrl B</code> ：侧边栏开关</li><li><code>Ctrl J</code> ：控制台开关</li><li><code>Ctrl 2</code> ：创建新的窗口</li><li><code>Ctrl +</code> ：窗口放大</li></ul></blockquote><blockquote><p>这篇记录了一些常用、简单的VSCode快捷指令、基础使用等。</p></blockquote><h3 id="Vue音乐APP系列专题"><a href="#Vue音乐APP系列专题" class="headerlink" title="Vue音乐APP系列专题"></a>Vue音乐APP系列专题</h3><blockquote><p>这周把Vue的项目代码过了一遍，但代码的分析文章还没有跟上，代码提交至Github仓库。</p></blockquote><h3 id="游戏"><a href="#游戏" class="headerlink" title="游戏"></a>游戏</h3><blockquote><p>这个周末过得有点丧，两天来什么也没做，跟着几个小伙伴玩了几局狼人杀，当玩过这个游戏后，感觉跟从小到大玩过的骰子，有异曲同工之妙，都是在找个其它的窗口去套路。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;h4 id=&quot;这两周疲于总结，想到之前写简书文章的时候，也是坚持日更到五十来天便停滞不前了。这两者最后都中断了下的原因，大概是对一件事的忠诚度不够，驱动力不足、对做的这件事回报感不强烈，越写越疲于应付，实在是一个不好的苗头。我们中华文化传统常言道要坚持，我想-搞清楚坚持的目的是什么-才是当下比较重要的一件事。&quot;&gt;&lt;a href=&quot;#这两周疲于总结，想到之前写简书文章的时候，也是坚持日更到五十来天便停滞不前了。这两者最后都中断了下的原因，大概是对一件事的忠诚度不够，驱动力不足、对做的这件事回报感不强烈，越写越疲于应付，实在是一个不好的苗头。我们中华文化传统常言道要坚持，我想-搞清楚坚持的目的是什么-才是当下比较重要的一件事。&quot; class=&quot;headerlink&quot; title=&quot;这两周疲于总结，想到之前写简书文章的时候，也是坚持日更到五十来天便停滞不前了。这两者最后都中断了下的原因，大概是对一件事的忠诚度不够，驱动力不足、对做的这件事回报感不强烈，越写越疲于应付，实在是一个不好的苗头。我们中华文化传统常言道要坚持，我想 搞清楚坚持的目的是什么,才是当下比较重要的一件事。&quot;&gt;&lt;/a&gt;这两周疲于总结，想到之前写简书文章的时候，也是坚持日更到五十来天便停滞不前了。这两者最后都中断了下的原因，大概是对一件事的忠诚度不够，驱动力不足、对做的这件事回报感不强烈，越写越疲于应付，实在是一个不好的苗头。我们中华文化传统常言道要坚持，我想 搞清楚坚持的目的是什么,才是当下比较重要的一件事。&lt;/h4&gt;&lt;/blockquote&gt;
    
    </summary>
    
      <category term="每周分享" scheme="http://liugezhou.online/categories/%E6%AF%8F%E5%91%A8%E5%88%86%E4%BA%AB/"/>
    
    
      <category term="每周分享" scheme="http://liugezhou.online/tags/%E6%AF%8F%E5%91%A8%E5%88%86%E4%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title>每周分享第十期</title>
    <link href="http://liugezhou.online/2019/08/26/%E6%AF%8F%E5%91%A8%E5%88%86%E4%BA%AB%E7%AC%AC%E5%8D%81%E6%9C%9F/"/>
    <id>http://liugezhou.online/2019/08/26/每周分享第十期/</id>
    <published>2019-08-26T02:06:00.000Z</published>
    <updated>2019-09-30T03:18:02.129Z</updated>
    
    <content type="html"><![CDATA[<blockquote><h4 id="原本计划第十期做一个之前文章记录的总结、将一些收藏的网站等内容再做个消化，然后不可饶恕的偷了个懒！"><a href="#原本计划第十期做一个之前文章记录的总结、将一些收藏的网站等内容再做个消化，然后不可饶恕的偷了个懒！" class="headerlink" title="原本计划第十期做一个之前文章记录的总结、将一些收藏的网站等内容再做个消化，然后不可饶恕的偷了个懒！"></a>原本计划第十期做一个之前文章记录的总结、将一些收藏的网站等内容再做个消化，然后不可饶恕的偷了个懒！</h4></blockquote><a id="more"></a><blockquote><p>前天跟小天去给小盘子搬家。</p><p>三个人夜晚把酒言欢，从一个聊到另一个，我一堆疯狂的输出，宣泄着自己的情绪–淋漓尽致的嘚吧嘚。</p><p>昨天回到家中，有了一点小小的自省。</p><p>这些想法的产生首先是持续关注某一类事的结果导向，看到了自我认为的不公、欺骗、谎言。于是看到社会事件便会有角色代入感，慢慢便心中隐藏起来一些戾气。</p><p>就像之前感受的那样，可能自身还处在一个明辨是非的阶段。</p><p>如果看够了不对的，质疑的、怀疑的、气愤的，那么接下来的一步：应该去追求那些认为对的，值得去追寻的东西。不要再去关注那些不认同，更不要花时间和精力去批判质疑那些，皆为无用功。</p><p>当我们谈论的时候，应该是梦想、目标。那些让人热泪盈眶、富有激情的散发在我们日常生活中的点滴。</p><p>众生皆苦，唯有自渡。保留一身正气，生活便没有恐惧。</p></blockquote><h3 id="设计网站大全"><a href="#设计网站大全" class="headerlink" title="设计网站大全"></a><a href="http://hao.shejidaren.com/index.html" target="_blank" rel="noopener">设计网站大全</a></h3><blockquote><p>做设计的应该去关注的一个网站，此网站的知识、工具等聚合应该会让做设计的人产生一丝共鸣。</p></blockquote><h3 id="美化二维码"><a href="#美化二维码" class="headerlink" title="美化二维码"></a><a href="http://www.mobanma.com" target="_blank" rel="noopener">美化二维码</a></h3><blockquote><p>之前二维码的制作用的是草料二维码，无意间发现这样一个网站，也是关于二维码的制作。</p></blockquote><h3 id="Instagram"><a href="#Instagram" class="headerlink" title="Instagram"></a><a href="https://www.instagram.com/liugezhou/" target="_blank" rel="noopener">Instagram</a></h3><blockquote><p>上面链接为我在ins上发的日常生活照片，感觉是非常滴优美，欢迎互关互粉。</p></blockquote><h3 id="人类简史"><a href="#人类简史" class="headerlink" title="人类简史"></a>人类简史</h3><blockquote><p>最早读到这本书的时候是在三四年前，那会为书中的种种思想感叹唏嘘，现在想来也可能是由于收此书的影响，在那之后的生活中思考发生了些变化。上周在地铁、睡前的碎片时间又在重看，希望可以站在旁观者而不是代入感的角色去重新感受这本书。推荐，另外还有两部《未来简史》、《今日简史》为以色列作家尤瓦尔·赫拉利的三重奏。</p><p>另外还对犹太民族做了一个简单的资料查询，为之文化、教育、贡献而感叹。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;h4 id=&quot;原本计划第十期做一个之前文章记录的总结、将一些收藏的网站等内容再做个消化，然后不可饶恕的偷了个懒！&quot;&gt;&lt;a href=&quot;#原本计划第十期做一个之前文章记录的总结、将一些收藏的网站等内容再做个消化，然后不可饶恕的偷了个懒！&quot; class=&quot;headerlink&quot; title=&quot;原本计划第十期做一个之前文章记录的总结、将一些收藏的网站等内容再做个消化，然后不可饶恕的偷了个懒！&quot;&gt;&lt;/a&gt;原本计划第十期做一个之前文章记录的总结、将一些收藏的网站等内容再做个消化，然后不可饶恕的偷了个懒！&lt;/h4&gt;&lt;/blockquote&gt;
    
    </summary>
    
      <category term="每周分享" scheme="http://liugezhou.online/categories/%E6%AF%8F%E5%91%A8%E5%88%86%E4%BA%AB/"/>
    
    
      <category term="每周分享" scheme="http://liugezhou.online/tags/%E6%AF%8F%E5%91%A8%E5%88%86%E4%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title>Vue.js文档再回顾</title>
    <link href="http://liugezhou.online/2019/08/21/Vue.js%E6%96%87%E6%A1%A3%E5%86%8D%E5%9B%9E%E9%A1%BE/"/>
    <id>http://liugezhou.online/2019/08/21/Vue.js文档再回顾/</id>
    <published>2019-08-21T07:00:00.000Z</published>
    <updated>2019-09-30T03:18:02.110Z</updated>
    
    <content type="html"><![CDATA[<blockquote><h4 id="学习Vue也有差不多两年了，业务代码呱呱的写，一来二去就那两下子，只有拳脚功夫渐涨，而忽略了内功的修炼，气运丹田，将Vue秘籍再次翻阅咀嚼一下子。"><a href="#学习Vue也有差不多两年了，业务代码呱呱的写，一来二去就那两下子，只有拳脚功夫渐涨，而忽略了内功的修炼，气运丹田，将Vue秘籍再次翻阅咀嚼一下子。" class="headerlink" title="学习Vue也有差不多两年了，业务代码呱呱的写，一来二去就那两下子，只有拳脚功夫渐涨，而忽略了内功的修炼，气运丹田，将Vue秘籍再次翻阅咀嚼一下子。"></a>学习Vue也有差不多两年了，业务代码呱呱的写，一来二去就那两下子，只有拳脚功夫渐涨，而忽略了内功的修炼，气运丹田，将Vue秘籍再次翻阅咀嚼一下子。</h4></blockquote><a id="more"></a><h3 id="Object-freeze"><a href="#Object-freeze" class="headerlink" title="Object.freeze()"></a><strong>Object.freeze()</strong></h3><blockquote><p>Vue的响应式系统中加入了其data对象，能在其找到所有的属性，属性改变，视图响应。我们这里复习的一个例外是<code>Object.freeze()</code>.</p></blockquote><blockquote><p>它会阻止修改现有的属性，也意味着响应系统无法再追踪变化。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">var obj = &#123;</span><br><span class="line">  foo: &apos;bar&apos;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Object.freeze(obj)</span><br><span class="line"></span><br><span class="line">new Vue(&#123;</span><br><span class="line">  el: &apos;#app&apos;,</span><br><span class="line">  data: obj</span><br><span class="line">&#125;)</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><h3 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h3><blockquote><p>记录一下<code>create()</code>和<code>mounted()</code>两个钩子函数。</p></blockquote><blockquote><ul><li>这两个函数均是为一些数据做初始化处理。</li><li>created是在实例创建完成后被立即调用。在这一步，实例已完成以下配置：数据观测 (data observer)，属性和方法的运算，watch/event 事件回调。然而，挂载阶段还没开始。</li><li>mounted钩子函数一般是用来向后端发起请求拿到数据以后做一些业务处理，这时候vue模板已经渲染完毕。</li></ul></blockquote><blockquote><p>一句话：通常created使用的次数多，而mounted通常是在一些插件的使用或者组件的使用中进行操作。</p></blockquote><h3 id="v-once"><a href="#v-once" class="headerlink" title="v-once"></a>v-once</h3><blockquote><p>通过使用 v-once 指令，可以执行一次性地插值，当数据改变时，插值处的内容不会更新。</p></blockquote><h3 id="v-if条件渲染–template"><a href="#v-if条件渲染–template" class="headerlink" title="v-if条件渲染–template"></a>v-if条件渲染–template</h3><blockquote><p>因为 v-if 是一个指令，所以必须将它添加到一个元素上。但是如果想切换多个元素呢？此时可以把一个 <template> 元素当做不可见的包裹元素，并在上面使用 v-if。最终的渲染结果将不包含 <template> 元素。</template></template></p></blockquote><h3 id="Vue中包含的七个观察数组的方法"><a href="#Vue中包含的七个观察数组的方法" class="headerlink" title="Vue中包含的七个观察数组的方法"></a>Vue中包含的七个观察数组的方法</h3><blockquote><p>push(): 在数组的末尾添加一个新元素，改变了原数组。<br>pop(): 在数组的末尾删除一个新元素，改变了原数组。<br>shift(): 与pop()对应，在一个数组的开始删除一个新元素，改变了原数组。<br>unshift(): 获取数组的最后一个值，不会改变原数组。<br>splice()： 第一个参数为从哪里开始，第二个元素为取几个值，改变了原数组。<br>sort(): 对数组的元素进行排序。<br>reverse(): 数反转。</p></blockquote><h3 id="v-for-with-v-if"><a href="#v-for-with-v-if" class="headerlink" title="v-for with v-if"></a>v-for with v-if</h3><blockquote><p>当他们处于同一节点时，v-for的优先级要比v-if更高，这意味着v-if将分别重复运行于每个v-for循环中。</p></blockquote><h3 id="事件修饰符"><a href="#事件修饰符" class="headerlink" title="事件修饰符"></a>事件修饰符</h3><blockquote><ul><li><code>.stop</code> (阻止单击事件继续传播—-只触发当前点击事件，不会触发父元素的点击事件)—⭐⭐⭐</li><li><code>.self</code> (只当事件是从事件绑定的元素本身触发时才触发回调)</li><li><code>.prevent</code> (提交事件不再重载页面—-用于阻止事件的默认行为)</li><li><code>.capture</code> (事件触发从包含这个元素的顶层开始往下触发)</li><li><code>.once</code> (点击事件将只触发一次)</li><li><code>.passive</code>(当我们在监听元素滚动事件的时候，会一直触发onscroll事件，在pc端是没啥问题的，但是在移动端，会让我们的网页变卡，因此我们使用这个修饰符的时候，相当于给onscroll事件整了一个.lazy修饰符)</li><li><code>.native</code> (将原生事件绑定到组件)</li></ul></blockquote><h3 id="记住全局注册的行为必须在根Vue实例（通过new-Vue）创建之前发生。"><a href="#记住全局注册的行为必须在根Vue实例（通过new-Vue）创建之前发生。" class="headerlink" title="记住全局注册的行为必须在根Vue实例（通过new Vue）创建之前发生。"></a>记住全局注册的行为必须在根Vue实例（通过new Vue）创建之前发生。</h3><h3 id="将原生事件绑定到组件上"><a href="#将原生事件绑定到组件上" class="headerlink" title="将原生事件绑定到组件上"></a>将原生事件绑定到组件上</h3><blockquote><p>想要在一个组件的根元素上直接监听一个原生事件，可以使用 <code>@click.native</code>。</p></blockquote><h3 id="访问根实例"><a href="#访问根实例" class="headerlink" title="访问根实例"></a>访问根实例</h3><blockquote><p>在每个new Vue实例的子组件中，其根实例可以通过<code>$root</code>属性进行访问。—-对于 demo 或非常小型的有少量组件的应用来说这是很方便的。但对中大型应用来说就不适用了，因此也可以说我们在开发过程中极大概率会是不适用这个<code>$root</code>的。</p></blockquote><h3 id="混入"><a href="#混入" class="headerlink" title="混入"></a>混入</h3><blockquote><p>混入（mixin）是用来分发Vue组件中的可复用功能。比如两个组件中都使用了某一个方法、某一个action或者某一个Getters，可以在mixin中集中管理，只要在这两个组件中引入mixin便可共用了。</p></blockquote><h3 id="过渡类名"><a href="#过渡类名" class="headerlink" title="过渡类名"></a>过渡类名</h3><blockquote><p>在进入/离开的过渡中，会有6个class切换</p></blockquote><blockquote><ul><li><p><code>v-enter</code> :定义进入过渡的开始状态。在元素被插入之前生效，在元素被插入之后的下一帧移除。</p></li><li><p><code>v-enter-active</code>: 定义进入过渡的开始状态。在整个进入过渡的阶段中应用。这个类可以被用来定义进入过渡的过程时间，延迟和曲线函数。</p></li><li><p><code>v-enter-to</code>: 定义进入过渡的结束状态。</p></li><li><p><code>v-leave</code>: 定义离开过渡的开始状态。在离开过渡被触发时立刻生效，下一帧被移除。</p></li><li><p><code>v-leave-active</code>: 定义离开过渡生效时的状态。这个类可以被用来定义离开过渡的过程时间，延迟和曲线函数。</p></li><li><p><code>v-leave-to</code>: 定理离开过渡的结束状态。</p></li></ul><p>Vue的进入/离开 &amp;列表过渡，很是想象，就想文档说的一句话：唯一的限制是你的想象力。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;h4 id=&quot;学习Vue也有差不多两年了，业务代码呱呱的写，一来二去就那两下子，只有拳脚功夫渐涨，而忽略了内功的修炼，气运丹田，将Vue秘籍再次翻阅咀嚼一下子。&quot;&gt;&lt;a href=&quot;#学习Vue也有差不多两年了，业务代码呱呱的写，一来二去就那两下子，只有拳脚功夫渐涨，而忽略了内功的修炼，气运丹田，将Vue秘籍再次翻阅咀嚼一下子。&quot; class=&quot;headerlink&quot; title=&quot;学习Vue也有差不多两年了，业务代码呱呱的写，一来二去就那两下子，只有拳脚功夫渐涨，而忽略了内功的修炼，气运丹田，将Vue秘籍再次翻阅咀嚼一下子。&quot;&gt;&lt;/a&gt;学习Vue也有差不多两年了，业务代码呱呱的写，一来二去就那两下子，只有拳脚功夫渐涨，而忽略了内功的修炼，气运丹田，将Vue秘籍再次翻阅咀嚼一下子。&lt;/h4&gt;&lt;/blockquote&gt;
    
    </summary>
    
      <category term="web前端" scheme="http://liugezhou.online/categories/web%E5%89%8D%E7%AB%AF/"/>
    
      <category term="Vue.js" scheme="http://liugezhou.online/categories/web%E5%89%8D%E7%AB%AF/Vue-js/"/>
    
    
      <category term="Vue.js" scheme="http://liugezhou.online/tags/Vue-js/"/>
    
  </entry>
  
  <entry>
    <title>每周分享第九期</title>
    <link href="http://liugezhou.online/2019/08/18/%E6%AF%8F%E5%91%A8%E5%88%86%E4%BA%AB%E7%AC%AC%E4%B9%9D%E6%9C%9F/"/>
    <id>http://liugezhou.online/2019/08/18/每周分享第九期/</id>
    <published>2019-08-18T07:00:00.000Z</published>
    <updated>2019-09-30T03:18:02.125Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><strong>这里记录过去一周，我的关注以及值得记录的东西。</strong></p></blockquote><a id="more"></a><h3 id="崩人设"><a href="#崩人设" class="headerlink" title="崩人设"></a>崩人设</h3><blockquote><p>这年头，公众人物最怕的就是“崩人设”。 </p><p>吴秀波“好男人”人设崩塌，翟天临“学霸”人设崩塌，“黄海波”人设崩塌。 </p><p>没有人设，就没有记忆点，也就不会红。但假的人设，终会崩塌，这是摆在所有明星也是整个地球面前的难题。 </p><p>不知为何，就突然想到以色列作家【尤瓦尔·赫拉利】在《人类简史：从动物到上帝》里面说的一句话： </p><p><code>人类几乎从出生到死亡都被种种虚构的故事和概念围绕，让他们以特定的方式思考，以特定的标准行事</code>。 </p></blockquote><h3 id="头条搜索"><a href="#头条搜索" class="headerlink" title="头条搜索"></a>头条搜索</h3><blockquote><p>日前，字节跳动旗下的搜索引擎——“头条搜索”网页版已悄然上线。<br>截至目前(Aug 17,2019)，头条搜索还只有一个主打移动端的网址：<a href="https://m.toutiao.com/search" target="_blank" rel="noopener">https://m.toutiao.com/search</a> ,打开后，搜索框出现了“搜你想看”的slogan。输入关键词后，搜索框下端的“猜你想搜”会出现热门推荐内容<br>百度内容更多元、头条内容更纯粹，但二者都面临着自有内容和站外内容的平衡问题。  </p><p><cite><a href="https://mp.weixin.qq.com/s/NdfBuAC1lgkT3rrMKzg5wA" target="_blank" rel="noopener">文章来源</a></cite></p><p>我现在日常用的搜索引擎为：<code>[多吉搜索](https://www.dogedoge.com)</code>,非常推荐。</p></blockquote><h3 id="美国五大科技巨头都存在监听用户行为"><a href="#美国五大科技巨头都存在监听用户行为" class="headerlink" title="美国五大科技巨头都存在监听用户行为"></a>美国五大科技巨头都存在监听用户行为</h3><blockquote><p>本周三，微软表示已更新隐私政策，让客户知道微软一直在员工和承包商的帮助下收集用户的语音数据。  </p><p>目前，谷歌、微软、苹果、亚马逊等美国科技巨头已经接受美国相关部门调查，美国科技公司因隐私问题一直受到立法者和监管机构的广泛批评。</p><p><cite>那那那么，国内巨头呢？</cite></p></blockquote><h3 id="知乎F轮融资"><a href="#知乎F轮融资" class="headerlink" title="知乎F轮融资"></a>知乎F轮融资</h3><blockquote><p>8月12日，知乎宣布完成F轮融资，总额4.34亿美元。本轮融资由快手领投、百度跟投，腾讯和今日资本原有投资方继续跟投.</p><p>这是知乎迄今为止最大的一轮融资，也是近两年来中文互联网文化和娱乐领域金额最大的融资之一。</p></blockquote><h3 id="印度AI开发应用"><a href="#印度AI开发应用" class="headerlink" title="印度AI开发应用"></a>印度AI开发应用</h3><blockquote><p>8月16日（本周五），有个丑闻刷爆科技媒体、技术圈和创投圈：一个宣称用AI自动开发APP的初闯公司（印度Enginerr.ai），其实是在用真人程序员。 </p><p>同时，该公司利用AI的噱头来吸引客户和投资，获得了软银旗下公司等机构将近3000万美元投资。  </p></blockquote><h3 id="电击、警棍、爆头，被骗去柬埔寨的程序员有多惨？"><a href="#电击、警棍、爆头，被骗去柬埔寨的程序员有多惨？" class="headerlink" title="电击、警棍、爆头，被骗去柬埔寨的程序员有多惨？"></a>电击、警棍、爆头，被骗去柬埔寨的程序员有多惨？</h3><blockquote><p>这篇文章讲述了一些恐怖故事，不知真假，值得警惕、关注。</p><p><cite><a href="https://mp.weixin.qq.com/s/2XM8h2i2OKTdAb0GgIT6vQ" target="_blank" rel="noopener">电击、警棍、爆头，被骗去柬埔寨的程序员有多惨？</a></cite></p></blockquote><h3 id="前端-后端-全栈"><a href="#前端-后端-全栈" class="headerlink" title="前端-后端-全栈"></a>前端-后端-全栈</h3><blockquote><p>这篇文章将对前端和后端开发技术多一个对比，先从基本的开始，然后逐步不比较他们的不同点，比如开发技能的要求、发展潜力、职业生涯的发展和薪水，等等。<br><cite><a href="https://mp.weixin.qq.com/s/F8LG7gMfao-h-EGW_B1l0w" target="_blank" rel="noopener">代码编程一条街，前端后端谁为先</a> </cite><br>这篇文章虽然比较片面，但是可以让不了解编程开发前后端的人有一个小小的认知。</p><p>在这篇文章中，作者尝试总结前端须知的后端体系入门。<br><cite> <a href="https://mp.weixin.qq.com/s/WrpL_QzaKe7qxn-Wq_cZZQ" target="_blank" rel="noopener">「全栈之路」Web前端开发的后端指南</a>  </cite></p></blockquote><h3 id="以下内容来自阮一峰的网络日志"><a href="#以下内容来自阮一峰的网络日志" class="headerlink" title="以下内容来自阮一峰的网络日志"></a>以下内容来自阮一峰的网络日志</h3><blockquote><p>日本批准第一例人体细胞移植入小鼠胚胎，长大以后就是带有人类细胞的老鼠。实验目的是让人类细胞在老鼠身上发育，长出人体器官，最后在移植回人体。</p></blockquote><blockquote><p><code>三氟化氯</code>是人类已知的最强氟化剂，氧化能力比氧更强，可以让已经烧到无法再烧的东西继续燃烧下去。比如沙子、砖块和石棉瓦片、玻璃。目前它主要用于半导体工业，清除电路板表面的氧化物，可以保存在钢、铜、铝等金属容器。</p></blockquote><blockquote><p>软件的运行速度快，说明这个软件是专注的。</p></blockquote><blockquote><p>20世纪50年代，建造月球基地是一项工程和技术的挑战。今天，它基本上是一个政治和经济挑战，难点是说服足够多的的人，花时间和精力去做这件事是值得的。</p></blockquote><h3 id="极客时间"><a href="#极客时间" class="headerlink" title="极客时间"></a>极客时间</h3><blockquote><p>本周五在朋友圈有个前端大V推荐一本来自极客时间的专栏《浏览器工作原理与实践》，优惠价格68，扫大V的码，输入优惠码，与大V私聊还有返现，我扫码购买总共花费了42.40.</p></blockquote><blockquote><p>本周六这本专栏升值至99元.<br>今天看了一些这个专栏的内容，可能由于自己的技术水平与知识认知还很欠缺，目前觉得这个专栏不值优惠的这个价格–四十多块。</p></blockquote><blockquote><p>由此而对电商平台这种销售模式进行了一些瞎想：就好比在天猫买东西、饿了吗订餐一样，如果你直接下单会按网站标注进行收费，但是如果你通过其它方式获得优惠券或者在不同平台下单（比如饿了吗在小程序中下单可以领红包）会有一笔不小的优惠，对这种错综复杂的网购套路，感觉真是乱糟糟的，没有一点精于算计的头脑，同样购买一个商品要比别人花费更多的钱。</p></blockquote><blockquote><p>当然这也是商家的套路，所谓的推广。只是网购市场这么成熟还这么多套路，总觉得会有很多消费者被蒙骗。</p></blockquote><h3 id="编译原理之美"><a href="#编译原理之美" class="headerlink" title="编译原理之美"></a>编译原理之美</h3><blockquote><p>极客时间上最近在推一个专栏：《编译原理之美》。</p><p>技术的世界如此枝繁叶茂。</p><p>看到这个专栏的推广也是在MacTalk池建强的公众号.，大概没有时间和精力去学习各种的技术，但是让我想到了很早之前总结的一篇文章，有一点点的知识穿插，对之前的总结做一个回顾。</p><p><cite>原总结：<a href="https://www.liugezhou.online/2018/12/31/%E7%BC%96%E8%AF%91%E5%9E%8B%E8%AF%AD%E8%A8%80%E4%B8%8E%E8%A7%A3%E9%87%8A%E5%9E%8B%E8%AF%AD%E8%A8%80%E7%9A%84%E5%8C%BA%E5%88%AB/" target="_blank" rel="noopener">编译型语言与解释型语言的区别</a></cite></p></blockquote><h3 id="数组中好用的一些方法"><a href="#数组中好用的一些方法" class="headerlink" title="数组中好用的一些方法"></a>数组中好用的一些方法</h3><blockquote><p>写js代码的时候，我们一般习惯了使用for循环进行遍历。我们也要熟悉几个特别好用的数组的方法：</p><ul><li><code>filter()</code><br>创建一个新的数组，新数组中的元素是通过检查指定数组中符合条件的所有元素，注意：<br>1️⃣、filter()不会对空数组进行检测。<br>2️⃣、filter()不会改变原始数组。<br>语法：<code>array.filter(function(currentValue,index,arr),thisValue)</code> </li><li><code>find()</code><br>方法返回通过测试（函数内判断）的数组的<code>第一个元素</code>的值。注意：<br>1️⃣、find()对于空数组、函数是不会执行的。<br>2️⃣、find()不会改变原始数组。<br>语法：<code>array.find(function(currentValue,index,arr),thisValue)</code>   </li><li><code>map()</code><br>返回一个新数组，数组中的元素为原始数组元素调用函数处理后的值。注意：<br>1️⃣、map()不会对空数组进行检测。<br>2️⃣、map()不会改变原始数组。<br>语法：<code>array.map(function(currentValue,index,arr),thisValue)</code>   </li></ul></blockquote><h3 id="CSS如何使文本以大写字母开头"><a href="#CSS如何使文本以大写字母开头" class="headerlink" title="CSS如何使文本以大写字母开头"></a>CSS如何使文本以大写字母开头</h3><blockquote><p><code>text-transform:capitalize</code>  </p><p>这个一般在外文网站使用较多，我们开发的时候很少会用到，但若遇到了，我想在我不知道有这样一个CSS属性的时候会选择使用JS。</p></blockquote><h3 id="ios键盘唤起，键盘收起页面不归位"><a href="#ios键盘唤起，键盘收起页面不归位" class="headerlink" title="ios键盘唤起，键盘收起页面不归位"></a>ios键盘唤起，键盘收起页面不归位</h3><blockquote><p>本周项目开发中遇到的一个问题。 </p><ul><li><p>问题详情描述：<br>在ios上，input框中输入内容，软键盘弹出，页面内容整体上移，但是键盘收起（即input框失去焦点时），页面内容不下滑，导致再次点击input框时没有反应。（如果是整个页面会发现在安卓机上是不可以上下滑动的，但是在ios机型下整个页面虽有fixed，也可以上下滑动）。  </p></li><li><p>出现原因分析：<br>固定定位的元素 在元素内 input 框聚焦的时候 弹出的软键盘占位 失去焦点的时候软键盘消失 但是还是占位的 导致input框不能再次输入 在失去焦点的时候给一个事件</p></li><li><p>解决办法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&gt;  &lt;input @blur.prevent=&quot;changeBlur&quot; /&gt;</span><br><span class="line">&gt;  …………</span><br><span class="line">&gt;  </span><br><span class="line">&gt;changeBlur()&#123;</span><br><span class="line">&gt;      let u = navigator.userAgent, app = navigator.appVersion;</span><br><span class="line">&gt;      let isIOS = !!u.match(/\(i[^;]+;( U;)? CPU.+Mac OS X/);</span><br><span class="line">&gt;      if(isIOS)&#123;</span><br><span class="line">&gt;        setTimeout(() =&gt; &#123;</span><br><span class="line">&gt;          const scrollHeight = document.documentElement.scrollTop || document.body.scrollTop || 0</span><br><span class="line">&gt;          window.scrollTo(0, Math.max(scrollHeight - 1, 0))</span><br><span class="line">&gt;          &#125;, 200)</span><br><span class="line">&gt;     &#125;</span><br><span class="line">&gt;   &#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></li></ul></blockquote><blockquote><p>在这篇文章中还有几个微信H5页面前端开发，大多数人会遇到的几个兼容性坑.<br><cite>文章来源<a href="https://mp.weixin.qq.com/s/MaRZgFFUj0PB5lY7-wxrFw" target="_blank" rel="noopener">戳这里</a></cite></p></blockquote><h3 id="前端UI框架"><a href="#前端UI框架" class="headerlink" title="前端UI框架"></a>前端UI框架</h3><blockquote><p>本周对几个前端UI框架做了一个小小的了解。<br><a href="https://element.eleme.io/#/zh-CN" target="_blank" rel="noopener">Element-UI</a><br>Element是饿了么前端开源维护的Vue UI组件库,组件齐全，基本涵盖后台所需的所有组件，文档讲解详细，例子也很丰富。 主要用于开发PC端的页面，是一个质量比较高的Vue UI组件库。<br>截至到本周日，Github Star数：<code>40330</code></p><p><a href="https://iview.github.io/docs/guide/introduce" target="_blank" rel="noopener">iView</a><br>iView 是一套基于 Vue.js 的开源 UI 组件库，主要服务于 PC 界面的中后台产品。<br>截至到本周日，Github Star数：<code>22242</code></p><p><a href="https://www.layui.com/" target="_blank" rel="noopener">layui</a><br>layui是一款采用自身模块规范编写的前端 UI 框架，遵循原生 HTML/CSS/JS 的书写与组织形式，门槛极低，拿来即用。其外在极简，却又不失饱满的内在，体积轻盈，组件丰盈，从核心代码到 API 的每一处细节都经过精心雕琢，非常适合界面的快速开发。<br>截至到本周日，Github Star数：<code>19254</code></p><p><a href="https://mint-ui.github.io/#!/zh-cn" target="_blank" rel="noopener">Mint UI</a><br>Mint UI是 饿了么团队开发基于vue .js的移动端UI框架，它包含丰富的 CSS 和 JS 组件，能够满足日常的移动端开发需要.<br>截至到本周日，Github Star数：<code>14810</code></p><p><a href="https://youzan.github.io/vant/#/zh-CN/intro" target="_blank" rel="noopener">vant</a><br>vant–轻量、可靠的移动端 Vue 组件库.<br>vant UI是有赞前端团队基于有赞统一的规范实现的 Vue 组件库，提供了一整套 UI 基础组件和业务组件。通过 Vant，可以快速搭建出风格统一的页面，提升开发效率<br>截至到本周日，Github Star数：<code>9986</code></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;这里记录过去一周，我的关注以及值得记录的东西。&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="每周分享" scheme="http://liugezhou.online/categories/%E6%AF%8F%E5%91%A8%E5%88%86%E4%BA%AB/"/>
    
    
      <category term="每周分享" scheme="http://liugezhou.online/tags/%E6%AF%8F%E5%91%A8%E5%88%86%E4%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title>jsonp温故</title>
    <link href="http://liugezhou.online/2019/08/11/jsonp%E6%B8%A9%E6%95%85/"/>
    <id>http://liugezhou.online/2019/08/11/jsonp温故/</id>
    <published>2019-08-11T12:00:00.000Z</published>
    <updated>2019-09-30T03:18:02.112Z</updated>
    
    <content type="html"><![CDATA[<h5 id="今天重新学习之前写了半截的项目，其中提到了jsonp，当时也是查了很多资料，做了很多笔记，但是最近在写一个项目的时候，竟然遗忘了很多，所以特此做个总结，在下次再遇到jsonp的时候，可以有一个清晰的认识。"><a href="#今天重新学习之前写了半截的项目，其中提到了jsonp，当时也是查了很多资料，做了很多笔记，但是最近在写一个项目的时候，竟然遗忘了很多，所以特此做个总结，在下次再遇到jsonp的时候，可以有一个清晰的认识。" class="headerlink" title="今天重新学习之前写了半截的项目，其中提到了jsonp，当时也是查了很多资料，做了很多笔记，但是最近在写一个项目的时候，竟然遗忘了很多，所以特此做个总结，在下次再遇到jsonp的时候，可以有一个清晰的认识。"></a>今天重新学习之前写了半截的项目，其中提到了jsonp，当时也是查了很多资料，做了很多笔记，但是最近在写一个项目的时候，竟然遗忘了很多，所以特此做个总结，在下次再遇到jsonp的时候，可以有一个清晰的认识。</h5><a id="more"></a><h4 id="jsonp原理介绍"><a href="#jsonp原理介绍" class="headerlink" title="jsonp原理介绍"></a>jsonp原理介绍</h4><hr><blockquote><p>jsonp就是为了解决前端的跨域问题而进行的一项设计，jsonp之所以能实现跨域，是因为<code>它发送的不是ajax请求</code>，它<code>动态创建了script标签</code>，script标签是不受同源策略限制的，将script的src指向正式的服务器地址。</p></blockquote><h4 id="查找资料："><a href="#查找资料：" class="headerlink" title="查找资料："></a>查找资料：</h4><blockquote><p>目前为止(2012年)最被推崇或者说首选的方案还是用JSON来传数据，靠JSONP来跨域。<br>JSON是一种数据交换格式，而JSONP是一种依靠开发人员的聪明才智创造出的一种非官方跨域数据交互协议。</p></blockquote><h4 id="JSONP是怎么产生的："><a href="#JSONP是怎么产生的：" class="headerlink" title="JSONP是怎么产生的："></a>JSONP是怎么产生的：</h4><blockquote><p>1、一个众所周知的问题，Ajax直接请求普通文件存在跨域无权限访问的问题，甭管你是静态页面、动态网页、web服务、WCF，只要是跨域请求，一律不准； </p><p>2、不过我们又发现，Web页面上调用js文件时则不受是否跨域的影响（不仅如此，我们还发现凡是拥有”src”这个属性的标签都拥有跨域的能力，比如<code>&lt;script&gt;</code>、<code>&lt;img&gt;</code>、<code>&lt;iframe&gt;</code>）；</p><p>3、于是可以判断，当前端如果想通过纯web端（ActiveX控件、服务端代理、属于未来的HTML5之Websocket等方式不算）跨域访问数据就只有一种可能，那就是在远程服务器上设法把数据装进js格式的文件里，供客户端调用和进一步处理；</p><p>4、恰巧我们已经知道有一种叫做JSON的纯字符数据格式可以简洁的描述复杂数据，更妙的是JSON还被js原生支持，所以在客户端几乎可以随心所欲的处理这种格式的数据；</p><p>5、这样子解决方案就呼之欲出了，web客户端通过与调用脚本一模一样的方式，来调用跨域服务器上动态生成的js格式文件（一般以JSON为后缀），显而易见，服务器之所以要动态生成JSON文件，目的就在于把客户端需要的数据装入进去。</p><p>6、客户端在对JSON文件调用成功之后，也就获得了自己所需的数据，剩下的就是按照自己需求进行处理和展现了，这种获取远程数据的方式看起来非常像AJAX，但其实并不一样。</p><p>7、为了便于客户端使用数据，逐渐形成了一种非正式传输协议，人们把它称作JSONP，该协议的一个要点就是允许用户传递一个callback参数给服务端，然后服务端返回数据时会将这个callback参数作为函数名来包裹住JSON数据，这样客户端就可以随意定制自己的函数来自动处理返回数据了。</p></blockquote><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><blockquote><p>npm install jsonp –save</p></blockquote><h4 id="GithubAPI"><a href="#GithubAPI" class="headerlink" title="GithubAPI"></a><a href="https://github.com/webmodules/jsonp" target="_blank" rel="noopener">GithubAPI</a></h4><blockquote><p>API介绍很简洁，下面为全文。</p><p>//语法：<br><strong>jsonp(url,opts,fn)</strong></p><ul><li>url (String) url to fetch<br>//要获取的网址</li><li>opts(Object) ,optional<br>//一个参数对象<br>·param(String) name of the query string parameter to specify the callback (default to callback)<br>// 用于指定回调的查询字符串参数的名称 (默认为callback)<br>·timeout(Number) how long after a timeout error is emitted. 0 to disable(default to 60000)<br>// 超时错误多长时间后出发。 0表示禁用（默认为60s）<br>·prefix(String) prefix for the global callback functions that handle jsonp responses(default to __ip)<br>// 处理jsonp响应的全局回调函数的前缀<br>·name(String) name of the global callback funcitions that handle jsonp responses(default to <code>prefix</code> + incremented counter)<br>// 处理jsonp响应的全局回调函数的名称</li><li>fn callback </li></ul><p>The callback is called with <code>err</code>,<code>data</code> parameters.<br>// 使用<code>err</code>，<code>data</code>参数调用回调。<br>If it times out ,the err will be an ERROR object whose message is Timeout.<br>// 如果超时，则错误将是ERROR对象，其消息为Timeout。<br>Return a function that ,when called,will cancel the in-progress jsonp request( <code>fn</code> wont’t be called)<br>// 返回一个函数，当出现错误时，将取消正在进行的jsonp请求（<code>fn</code>不会被调用）</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;今天重新学习之前写了半截的项目，其中提到了jsonp，当时也是查了很多资料，做了很多笔记，但是最近在写一个项目的时候，竟然遗忘了很多，所以特此做个总结，在下次再遇到jsonp的时候，可以有一个清晰的认识。&quot;&gt;&lt;a href=&quot;#今天重新学习之前写了半截的项目，其中提到了jsonp，当时也是查了很多资料，做了很多笔记，但是最近在写一个项目的时候，竟然遗忘了很多，所以特此做个总结，在下次再遇到jsonp的时候，可以有一个清晰的认识。&quot; class=&quot;headerlink&quot; title=&quot;今天重新学习之前写了半截的项目，其中提到了jsonp，当时也是查了很多资料，做了很多笔记，但是最近在写一个项目的时候，竟然遗忘了很多，所以特此做个总结，在下次再遇到jsonp的时候，可以有一个清晰的认识。&quot;&gt;&lt;/a&gt;今天重新学习之前写了半截的项目，其中提到了jsonp，当时也是查了很多资料，做了很多笔记，但是最近在写一个项目的时候，竟然遗忘了很多，所以特此做个总结，在下次再遇到jsonp的时候，可以有一个清晰的认识。&lt;/h5&gt;
    
    </summary>
    
      <category term="web前端" scheme="http://liugezhou.online/categories/web%E5%89%8D%E7%AB%AF/"/>
    
      <category term="js" scheme="http://liugezhou.online/categories/web%E5%89%8D%E7%AB%AF/js/"/>
    
    
      <category term="js" scheme="http://liugezhou.online/tags/js/"/>
    
      <category term="jsonp" scheme="http://liugezhou.online/tags/jsonp/"/>
    
  </entry>
  
  <entry>
    <title>每周分享第八期</title>
    <link href="http://liugezhou.online/2019/08/11/%E6%AF%8F%E5%91%A8%E5%88%86%E4%BA%AB%E7%AC%AC%E5%85%AB%E6%9C%9F/"/>
    <id>http://liugezhou.online/2019/08/11/每周分享第八期/</id>
    <published>2019-08-10T16:00:00.000Z</published>
    <updated>2019-09-30T03:18:02.127Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><strong>这里记录过去一周，我的关注以及值得记录的东西。</strong></p></blockquote><a id="more"></a><h4 id="在线流程图工具"><a href="#在线流程图工具" class="headerlink" title="在线流程图工具"></a><a href="https://www.zenflowchart.com/" target="_blank" rel="noopener">在线流程图工具</a></h4><blockquote><p>简单好用的在线流程图工具。</p><p>之前开发项目的时候，画过【流程图】，为此还专门下载软件进行点点熟悉画图。</p><p>这个网站简单、易用，不论你是做什么工作，在需要绘制流程图的时候不必用专有软件，可直接打开此网站，使用此网站提供的服务进行流程图的绘画。</p></blockquote><h4 id="面包多–为创造者创收"><a href="#面包多–为创造者创收" class="headerlink" title="面包多–为创造者创收"></a>面包多–为创造者创收</h4><blockquote><p>面包多致力于帮助创造者(开发者，写作者，设计师等)获得收入，创造者可以上传作品到面包多，设置价格，然后获得出售链接，这些链接可以放置于任何地方，以供用户购买这些创造成果.</p><p>我在此平台发布了一篇文章：<a href="https://mianbaoduo.com/product/show/mbd-Yp2Ukw==" target="_blank" rel="noopener">作为一名开发者应该收藏的网站</a></p></blockquote><blockquote><p>内容即为本博客的【工具收藏】。</p></blockquote><blockquote><p>未曾想到想到还收到一个付费。</p></blockquote><blockquote><p>大概了解了一下此产品，基于知识付费方面。</p></blockquote><h4 id="今日热榜-APP"><a href="#今日热榜-APP" class="headerlink" title="今日热榜  APP"></a>今日热榜  APP</h4><blockquote><p>知乎热搜、微博热搜、微信热搜、澎湃新闻、豆瓣、百度等等等热点。</p></blockquote><blockquote><p>此APP便是提供这样一个内容。可通过自己的订阅，查看当下舆论新闻的热搜、热点事件。</p></blockquote><h4 id="华为-HarmonyOS-鸿蒙系统"><a href="#华为-HarmonyOS-鸿蒙系统" class="headerlink" title="华为 HarmonyOS 鸿蒙系统"></a>华为 HarmonyOS 鸿蒙系统</h4><blockquote><p>这是本周五的一大热点事件。<br>根据余承东介绍，“鸿蒙”具备以下特点：</p><p>1、基于微内核、面向全场景的分布式操作系统。  </p><p>2、面向的是“下一代”的 IOT 场景，包括已发布的荣耀智慧屏，规划中的PC、手表手环、车机、音箱、耳机、VR 设备，未来还会延伸至工业、航空航天等领域。 </p><p>3、开源。</p><h5 id="微内核"><a href="#微内核" class="headerlink" title="微内核"></a>微内核</h5><p>“内核”指代的是操作系统中的核心架构，大体可分为“宏内核”与“微内核”，前者代表为 iOS 与安卓，后者代表是谷歌 Fuchsia 与鸿蒙。两者的区别在于：内核越小，涉及的操作系统代码越少，进程越简单。</p></blockquote><blockquote><p>由于宏内核包含的系统服务很多，比如文件系统、进程管理、内存管理、声卡显卡驱动程序等，调用起来需要强大的处理器，所以适用于手机、电脑、PC 等产品；但微内核只提供诸如 CPU 管理、进程调度等最基础的功能，其余服务均以后期叠加的形式完成，因此更适合对于运算需求没那么高的手表、智能家居等 IOT 设备。</p><h5 id="分布式"><a href="#分布式" class="headerlink" title="分布式"></a>分布式</h5><p>分布式技术是 IoT 厂商提出“万物互联”的基础。从手机、到手表、到智能家居、汽车，不同设备对于系统的运算需求（本地/云端）、内存处理都不一样，而“分布式”则是用来连接这些设备的操作系统。<br>…………</p><h6 id="更多文章内容：-鸿蒙初问世，华为敛锋芒"><a href="#更多文章内容：-鸿蒙初问世，华为敛锋芒" class="headerlink" title="更多文章内容： 鸿蒙初问世，华为敛锋芒"></a>更多文章内容： <a href="https://mp.weixin.qq.com/s/v61phlapZi5sXiOpIGJJaw" target="_blank" rel="noopener">鸿蒙初问世，华为敛锋芒</a></h6></blockquote><h4 id="Taro与uni-app"><a href="#Taro与uni-app" class="headerlink" title="Taro与uni-app"></a>Taro与uni-app</h4><blockquote><p>开发一次，到处运行，是每个程序员的梦想。<br>对Taro与uni-app两个框架做了一个小小的对比，对于框架的选型我已然有了自己的选择。下面为简单结论。</p><table><thead><tr><th>描述</th><th>Uni-app：10412</th><th>Taro：20662</th></tr></thead><tbody><tr><td>技术栈</td><td>Vue.js</td><td>React.js</td></tr><tr><td>案例</td><td>案例丰富</td><td>案例丰富</td></tr><tr><td>微信小程序</td><td>⭕</td><td>⭕</td></tr><tr><td>支付宝小程序</td><td>⭕</td><td>⭕</td></tr><tr><td>百度小程序</td><td>⭕</td><td>⭕</td></tr><tr><td>头条小程序</td><td>⭕</td><td>⭕</td></tr><tr><td>H5</td><td>⭕</td><td>⭕</td></tr><tr><td>App</td><td>⭕</td><td>⭕</td></tr></tbody></table></blockquote><blockquote><p>公说公有理婆说婆有理,下面为两个框架各自的评测与开发者评测链接：<br>Taro官方评测：<a href="https://juejin.im/post/5c90eb366fb9a070d4199cc9" target="_blank" rel="noopener">Taro评测</a>.<br>uni-app官方评测：<a href="https://ask.dcloud.net.cn/article/35867" target="_blank" rel="noopener">uni-app评测</a>.<br>开发者评测：<a href="https://juejin.im/post/5c4ec383f265da613e229a67" target="_blank" rel="noopener">Taro vs uni-app</a>. </p><h6 id="开发者评测的简单总结："><a href="#开发者评测的简单总结：" class="headerlink" title="开发者评测的简单总结："></a>开发者评测的简单总结：</h6><p><code>质量对比</code>：<br>从两个项目的实际运行来看，uni-app的跨端效果更好（其实不止对比了官方demo，我们自己也写了小demo），特别是在H5平台相比taro要完善不少。<br>taro 的 dist 目录下不区分编译平台，同一时间仅可编译到一个平台，不支持多个平台对比查看运行效果；<br>uni-app 的 dist 目录区分编译平台，故支持同时编译到多个平台，可同时对比查看不同平台运行效果，这个体验是不错的，更有跨端开发的感觉。<br>另外uni-app的条件编译比较完善，这个在处理平台差异时很有用。</p><p><code>案例对比</code>：<br>两个框架都在官网放上了众多案例，只是taro案例清一色是微信小程序，没看到其他端，难道大家使用taro，只是为了用react开发微信小程序，不需要跨端？<br>综合比较，uni-app跨端质量更好，真实跨端案例也更多.</p></blockquote><blockquote><p><code>运行性能:</code><br>taro在性能优化上做的更细致，使用uni-app需要自己注意代码优化。</p></blockquote><blockquote><p><code>开发体验</code>:<br>都挺好。taro官方未特别推荐IDE，但提供了vscode支持的d.ts； uni-app推荐的开发工具是他自家的HBuilderX，用它可以不配环境，开箱即用.  </p></blockquote><blockquote><p><code>学习交流</code>:<br>另外文档角度，uni-app的文档比taro要完善，数了数交流群的数量，也是uni-app.</p></blockquote><h4 id="微信小程序PC端内测"><a href="#微信小程序PC端内测" class="headerlink" title="微信小程序PC端内测"></a>微信小程序PC端内测</h4><blockquote><p>小程序在PC端的使用，正在内测，这是要移动端、PC端通吃的节奏啊。</p></blockquote><blockquote><p>大约是本周五该新闻被爆料，微信强调，希望通过这一探索，帮助用户在聊天场景中更连贯地使用小程序。</p></blockquote><blockquote><p>小程序的红利应该还未真正到来，一切都在酝酿之中。在我看来，一方面是因为苹果的应用商店在那卡着，另一方面就是生态的布局还在继续，很有可能像微信公众平台、微信读书一样，持续不断的给用户、给开发者一个学习使用的机会，成熟之时，便是爆发之日。</p></blockquote><blockquote><p>在此再插一句：这种垄断巨头做出来的产品是真的好，但是由于垄断天然特性，总是会损害一部分人的利益，大体上看可能会慢慢损害大多数，只是会如温水壶青蛙般不知情。慢慢被同化、无力反驳。垄断者的耐心布局给人方面却又使人感到恐惧。</p></blockquote><h4 id="守望先锋-UI-组件库"><a href="#守望先锋-UI-组件库" class="headerlink" title="守望先锋 UI 组件库"></a><a href="https://haixiang6123.github.io/overwatch-ui-doc/#/start" target="_blank" rel="noopener">守望先锋 UI 组件库</a></h4><blockquote><p>一个《守望先锋》游戏风格的组件库，基于 Vue.js。</p></blockquote><h4 id="视频学英语"><a href="#视频学英语" class="headerlink" title="视频学英语"></a>视频学英语</h4><blockquote><p>金山词霸APP里面有个【视频学英语】模块，画风与抖音相似，推荐。下面为一个小段子的摘抄：<br>[对话场景：一场最终面试，面试者对两个候选人进行面试提问]</p><p>Interviewer：<br>‘You both are excellent.’<br>‘But we only have one vacant position.’<br>‘Let me ask you three more questions.’<br>‘First of all:’<br>‘What’s your hobby?’  </p></blockquote><blockquote><p>Candidate 1:<br>‘I enjoy delicious food.’<br>‘I know all the good restaurants in the city.’</p><p>Candidate 2:<br>‘I enjoy working extra hours.’<br>‘I love my work, my work is my hobby.’</p><p>Interviewer：<br>‘What do you first thing when you get to work?’</p><p>Candidate 1:<br>‘I usually make a task list first,’<br>‘so that my whole day is organzied.’</p><p>Candidate 2:<br>‘I open the door’<br>‘I’m always the first one to work.’</p><p>Interviewer：<br>‘What the last thing you do before leaving work?’</p><p>Candidate 1:<br>‘Close the door’<br>‘I enjoy being the last person to leave work.’</p><p>Candidate 2:<br>‘I copy the next day’s tasks to my USB’<br>‘so I can bring it home and get started on the next day’s work.’</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;这里记录过去一周，我的关注以及值得记录的东西。&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="每周分享" scheme="http://liugezhou.online/categories/%E6%AF%8F%E5%91%A8%E5%88%86%E4%BA%AB/"/>
    
    
      <category term="每周分享" scheme="http://liugezhou.online/tags/%E6%AF%8F%E5%91%A8%E5%88%86%E4%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title>每周分享第七期</title>
    <link href="http://liugezhou.online/2019/08/04/%E6%AF%8F%E5%91%A8%E5%88%86%E4%BA%AB%E7%AC%AC%E4%B8%83%E6%9C%9F/"/>
    <id>http://liugezhou.online/2019/08/04/每周分享第七期/</id>
    <published>2019-08-03T16:00:00.000Z</published>
    <updated>2019-09-30T03:18:02.123Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><strong>这里记录过去一周，一些个人记录。</strong></p></blockquote><blockquote><p>自从公众号被封以及FQ看的国外的一些新闻，突然觉得生活有点不愉快。<br>关注的一些东西充斥着大脑，质疑的太多，想的太多总感觉一些东西在慢慢吞噬自己，很不喜欢现在的状态。有待慢慢调解。</p></blockquote><a id="more"></a><h4 id="哥德巴赫猜想"><a href="#哥德巴赫猜想" class="headerlink" title="哥德巴赫猜想"></a>哥德巴赫猜想</h4><blockquote><p>哥德巴赫1742年给欧拉的信中哥德巴赫提出了以下猜想：<strong>任一大于2的偶数都可写成两个质数之和</strong>。但是哥德巴赫自己无法证明它，于是就写信请教赫赫有名的大数学家欧拉帮忙证明，但是一直到死，欧拉也无法证明。</p></blockquote><blockquote><p>今日常见的猜想陈述为欧拉的版本，即<strong>任一大于2的偶数都可写成两个素数之和</strong>，亦称为“强哥德巴赫猜想”或“关于偶数的哥德巴赫猜想”。</p></blockquote><blockquote><p>上述的哥德巴赫猜想就是我们小学数学经常说的数学为什么要证明1+1=2这样的问题。  </p></blockquote><blockquote><p>1966年陈景润证明了”1+2”成立，即<code>&quot;任一充分大的偶数都可以表示成二个素数的和，或是一个素数和一个半素数的和&quot;</code>。</p></blockquote><blockquote><p>从关于偶数的哥德巴赫猜想，可推出：<code>任一大于7的奇数都可写成三个质数之和的猜想</code>。后者称为“弱哥德巴赫猜想”或“关于奇数的哥德巴赫猜想”。若关于偶数的哥德巴赫猜想是对的，则关于奇数的哥德巴赫猜想也会是对的。2013年5月，巴黎高等师范学院研究员哈洛德·贺欧夫各特发表了两篇论文，宣布彻底证明了弱哥德巴赫猜想。</p></blockquote><blockquote><p>关于偶数的哥德巴赫猜想（强哥德巴赫猜想），迄今还未被证明。</p></blockquote><h4 id="博弈论–金币分配"><a href="#博弈论–金币分配" class="headerlink" title="博弈论–金币分配"></a>博弈论–金币分配</h4><blockquote><p>本周看到一道特别有意思的题目：关于一百个金币如何分配的问题。</p></blockquote><blockquote><p>简单概述为：有一百个金币，A B C依次将分配方案进行提议，超过总人数1/2(不包含)通过，则游戏结束，若第一个人提议不通过，则第一个人要被砍掉，游戏继续。关于这个有意思的博弈论问题，在文末底部的公众号里做了问题的详细描述。</p></blockquote><h4 id="集合悖论"><a href="#集合悖论" class="headerlink" title="集合悖论"></a>集合悖论</h4><blockquote><p>关于集合悖论，有这样一个意思差不多的故事：</p></blockquote><blockquote><p>一个小镇上只有一个理发师，这个理发师理发有这样一个规则：<br><code>他只给不给自己理发的人进行理发，那么他是否可以给自己理发？</code></p></blockquote><blockquote><p>这个问题显然没有答案。</p><p>然后提一下集合悖论：李永乐老师在Youtube上引申大概这么说：<br>这个发明了集合概念的数学家被另一个数学家刁难，问的问题大概是这样的：<br><code>既然集合可以表示一切，那么有没有这样一个集合A，它里面表示的所有元素都是非集合A（不属于集合A）？</code></p></blockquote><blockquote><p>这个思想很好玩，感兴趣的朋友可以在微博或者Yotube上搜一下李永乐老师的视频，包括上面的哥德巴赫猜想与金币问题均有详细视频讲述。</p></blockquote><h4 id="博客的草稿功能"><a href="#博客的草稿功能" class="headerlink" title="博客的草稿功能"></a>博客的草稿功能</h4><blockquote><p>博客写文的时候，一些文章写不完要转为草稿，这是一个会遇到的问题。<br>首先<code>hexo new draft &quot;TS&quot;</code>,会在source/_drafts目录下生成一个TS.md文件.<br>这个文件不被显示在页面上，链接也访问不到。<br>也就是说如果你想把某一篇文章移除显示，又不舍得删除，可以把它移动到_drafts目录之中。</p><p>如果你希望强行预览草稿，  </p><ul><li>更改主_config.yml配置文件： <code>render_drafts: true</code>.  </li><li>或者如下方式启动server：<code>hexo server --drafts</code>.  </li></ul><p>下面这条命令可以把草稿变成文章，或者页面：<code>hexo publish [layout] &lt;filename&gt;</code>.</p></blockquote><h4 id="本周产出"><a href="#本周产出" class="headerlink" title="本周产出"></a>本周产出</h4><blockquote><p>本周对CSS3的内容做了一个简单的回顾：<a href="https://www.liugezhou.online/2019/07/29/CSS回顾查漏补缺/" target="_blank" rel="noopener">CSS回顾查漏补缺</a></p></blockquote><h4 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h4><blockquote><p>本周有点丧，干一件事开始觉得拖拉与抵触，分析下这个原因：  </p></blockquote><blockquote><ul><li>工作没有成就感，重复劳动略显疲惫。</li><li>目标完成后，愉悦从何而来产生怀疑：是为了完成目标后的满足感？还是说是发自内心想要去做这件事？</li><li>当对社会新闻产生怀疑，自己的每日做法除了填报肚子，是不是应该还有一个不宏大但能满足自己的目标？</li></ul></blockquote><blockquote><p>然而，拖拉到现在，有更重要紧急的事要去做。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;这里记录过去一周，一些个人记录。&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;自从公众号被封以及FQ看的国外的一些新闻，突然觉得生活有点不愉快。&lt;br&gt;关注的一些东西充斥着大脑，质疑的太多，想的太多总感觉一些东西在慢慢吞噬自己，很不喜欢现在的状态。有待慢慢调解。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="每周分享" scheme="http://liugezhou.online/categories/%E6%AF%8F%E5%91%A8%E5%88%86%E4%BA%AB/"/>
    
    
      <category term="每周分享" scheme="http://liugezhou.online/tags/%E6%AF%8F%E5%91%A8%E5%88%86%E4%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title>CSS3属性全回顾</title>
    <link href="http://liugezhou.online/2019/07/29/CSS%E5%9B%9E%E9%A1%BE%E6%9F%A5%E6%BC%8F%E8%A1%A5%E7%BC%BA/"/>
    <id>http://liugezhou.online/2019/07/29/CSS回顾查漏补缺/</id>
    <published>2019-07-29T14:33:54.000Z</published>
    <updated>2019-07-31T08:40:00.000Z</updated>
    
    <content type="html"><![CDATA[<h6 id="作为一个前端开发者来说，对CSS的熟悉是基础中的基础。现如今框架眼花缭乱，炫酷的动画、美丽的UI，应接不暇，然而CSS3的本来面目是那么的简单，有很多的CSS3属性虽然特别的常见，但是灵活的运用还是需要我们对基础进行多次的夯实，本篇博客就是来对我们的CSS3的一些属性进行一个大而全的回顾。（可能大多数属性你都烂熟于心、你可以跳过它或者再次做一次温习）"><a href="#作为一个前端开发者来说，对CSS的熟悉是基础中的基础。现如今框架眼花缭乱，炫酷的动画、美丽的UI，应接不暇，然而CSS3的本来面目是那么的简单，有很多的CSS3属性虽然特别的常见，但是灵活的运用还是需要我们对基础进行多次的夯实，本篇博客就是来对我们的CSS3的一些属性进行一个大而全的回顾。（可能大多数属性你都烂熟于心、你可以跳过它或者再次做一次温习）" class="headerlink" title="作为一个前端开发者来说，对CSS的熟悉是基础中的基础。现如今框架眼花缭乱，炫酷的动画、美丽的UI，应接不暇，然而CSS3的本来面目是那么的简单，有很多的CSS3属性虽然特别的常见，但是灵活的运用还是需要我们对基础进行多次的夯实，本篇博客就是来对我们的CSS3的一些属性进行一个大而全的回顾。（可能大多数属性你都烂熟于心、你可以跳过它或者再次做一次温习）."></a>作为一个前端开发者来说，对CSS的熟悉是基础中的基础。现如今框架眼花缭乱，炫酷的动画、美丽的UI，应接不暇，然而CSS3的本来面目是那么的简单，有很多的CSS3属性虽然特别的常见，但是灵活的运用还是需要我们对基础进行多次的夯实，本篇博客就是来对我们的CSS3的一些属性进行一个大而全的回顾。（可能大多数属性你都烂熟于心、你可以跳过它或者再次做一次温习）.</h6><a id="more"></a><h4 id="CSS边框"><a href="#CSS边框" class="headerlink" title="CSS边框"></a>CSS边框</h4><blockquote><p>本节回顾两个属性<code>border-radius</code>、<code>box-shadow</code></p><table><thead><tr><th>属性</th><th>描述</th><th>扩展</th></tr></thead><tbody><tr><td>border-radius</td><td>给div元素添加圆角的边框<br>border-radius 属性是一个最多可指定四个 border -*- radius 属性的复合属性<br><br>若跟四个值其顺序是：<br>左上角、右上角、右下角、左下角</td><td><del>border-top-left-radius<br>border-top-right-radius<br>border-bottom-right-radius<br>border-bottom-left-radius<br></del>推荐写法:<br>border-radius:20px</td></tr><tr><td>box-shadow</td><td>该属性可以设置一个或多个下拉阴影的框<br>语法：<br>box-shadow:h-shadow v-shadow blur spread color inset</td><td><code>h-shadow</code>  水平阴影位置–必填值（允许负值）<br><code>v-shadow</code>  垂直阴影位置–必填值（允许负值） <br><code>blur</code>  可选值–模糊距离<br><code>spread</code>  可选值–阴影的大小<br> <code>color</code>  可选值-颜色<br><code>inset</code>  可选值 –从外内的阴影（开始时）改变阴影内侧阴影</td></tr><tr><td>border-image</td><td></td><td></td></tr></tbody></table></blockquote><h4 id="CSS3背景"><a href="#CSS3背景" class="headerlink" title="CSS3背景"></a>CSS3背景</h4><blockquote><p>本节回顾以下背景属性：<code>bacground-image</code>、 <code>background-size</code>、 <code>background-origin</code>、 <code>background-clip</code></p><table><thead><tr><th>属性</th><th>描述</th><th>扩展</th></tr></thead><tbody><tr><td>background-image</td><td>添加背景图片(允许在元素上添加多个背景图像)</td><td>background: url(flower.png) right bottom no-repeat, url(summertrack.png) left top repeat;</td></tr><tr><td>background-size</td><td>指定背景图像的大小–该大小是相对于父元素的高度和宽度的百分比</td><td>background-size:20px 60px;<br>background-size:100% 100%;<br>background-size:cover–保持图像纵横比并将图像缩放成完全覆盖背景定位的最小大小<br>background-size:contain–保持图像的纵横比并将图像缩放成将适合背景定位区域的最大大小。</td></tr><tr><td>background-origin</td><td>该属性指定了背景图像的位置区域</td><td>content-box<br>padding-box<br>border-box</td></tr><tr><td>background-clip</td><td>该裁剪属性是指从指定位置开始绘制</td><td>content-box<br>padding-box<br>border-box</td></tr></tbody></table></blockquote><h4 id="CSS3的渐变"><a href="#CSS3的渐变" class="headerlink" title="CSS3的渐变"></a>CSS3的渐变</h4><blockquote><p>对CSS3渐变的高效使用，可以提升网站一个Level。<br>我们来回顾：线性渐变（Linear Gradients）和径向渐变（Radial Gradients）  </p></blockquote><blockquote><ul><li><p>线性渐变（Linerar Gradients）：<br>从上到下（默认）：<code>background:linear-gradient(red,blue,...)</code><br>从左到右： <code>background:linear-gradient(to right,red,blue,...)</code><br>从左上角到右下角度： <code>background:linear-gradient(to right bottom,red,blue,...)</code><br>角度定义：<code>background:linear-gradient(45deg,red,blue,...)</code>  </p></li><li><p>径向渐变（Radial Gradients）:<br>颜色结点均匀分布（默认情况下）:<code>background:radial-gradient(red,green,blue)</code><br>颜色结点不均匀分布：<code>background:radial-gradient(red 10%,green 20%,blue 30%)</code><br>设置形状：<code>background: radial-gradient(circle | ellipse, red, yellow, green);</code></p></li></ul></blockquote><h4 id="CSS3文本效果"><a href="#CSS3文本效果" class="headerlink" title="CSS3文本效果"></a>CSS3文本效果</h4><blockquote><p>这里我们来回顾以下文本效果的以下几个属性：<code>text-shadow</code>、<code>text-overflow</code>、<code>word-wrap</code>、<code>word-break</code></p><table><thead><tr><th>属性</th><th>描述</th><th>扩展</th></tr></thead><tbody><tr><td>text-shadow</td><td>文本阴影<br>语法：<br>text-shadow: h-shadow v-shadow blur color;</td><td><code>h-shadow</code>  水平阴影位置–必填值（允许负值）<br><code>v-shadow</code>  垂直阴影位置–必填值（允许负值） <br><code>blur</code>  可选值–模糊距离<br><code>spread</code>  可选值–阴影的大小</td></tr><tr><td>text-overflow</td><td>文本溢出属性指定应向用户如何显示溢出内容（clip、ellipsis、string）</td><td>clip –修剪文本<br>ellipsis–显示省略号代替被修剪的文本<br>string – 使用给定的字符串来代表被修剪的文本</td></tr><tr><td>word-wrap</td><td>允许对长的不可分割的单词进行分割并换行到下一行。（normal、break-word）</td><td>normal–只在允许的断字点换行<br>break-word–在长单词或URL地址内部进行换行</td></tr><tr><td>word-break</td><td>规定非中日韩文本的换行规则</td><td>normal–使用浏览器默认的换行规则。<br>break-all–允许在单词内换行。<br>keep-all–只能在半角空格或连字符处换行。</td></tr></tbody></table></blockquote><h4 id="2D转换"><a href="#2D转换" class="headerlink" title="2D转换"></a>2D转换</h4><blockquote><p>transform:translate(x,y)、rotate(angle)、scale(x,y)、skew(x-angle,y-angle)、matrix()<br>移动、旋转、放大缩小、倾斜。<br>不展开叙述。</p></blockquote><h4 id="CSS3过渡-CSS3动画"><a href="#CSS3过渡-CSS3动画" class="headerlink" title="CSS3过渡 || CSS3动画"></a>CSS3过渡 || CSS3动画</h4><blockquote><ul><li><p>过渡属性<br><code>transition</code>:简写属性，用于在一个属性中设置四个过渡属性。<br><code>transition-property</code>:规定应用过渡的CSS属性的名称。<br><code>transition-duration</code>：定义过渡效果花费的时间。默认为0<br><code>transition-timing-function</code>:规定过渡效果的时间曲线<br><code>transition-delay</code>:规定过渡效果何时开始</p></li><li><p>动画属性</p><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td><code>@keyframse</code></td><td>规定动画</td></tr><tr><td><code>animation</code></td><td>所有动画的简写属性，除了<code>animation-play-state</code>属性</td></tr><tr><td>语法：</td><td><code>animation: name duration timing-function delay iteration-count direction fill-mode play-state;</code></td></tr><tr><td><code>animation-name</code></td><td>规定@keyframes动画的名称</td></tr><tr><td><code>animation-duration</code></td><td>规定动画完成一个周期所花费封秒或毫秒</td></tr><tr><td><code>animation-timing-function</code></td><td>规定动画的速度曲线：默认为[ease（低速-加快-变慢）]</td></tr><tr><td>其它值</td><td>linear(匀速)、ease-in(动画以低速开始)、ease-out(动画以低速结束)、ease-in-out(动画以低速开始和结束)</td></tr><tr><td><code>animation-fill-mode</code></td><td>规定当动画不播放时（当动画完成或者延迟未开始播放时），要应用到的元素的样式。</td></tr><tr><td><code>animation-delay</code></td><td>规定动画何时开始</td></tr><tr><td><code>animation-iteration-count</code></td><td>规定动画被播放的次数   [infinite]无限次</td></tr><tr><td><code>animation-direction</code></td><td>规定动画是否在下一周期逆向地播放。默认是[normal]</td></tr><tr><td>animation-direction – reverse</td><td>动画反向播放</td></tr><tr><td>animation-direction –alternate</td><td>动画在奇数次（1、3、5…）正向播放，在偶数次（2、4、6…）反向播放。</td></tr><tr><td>animation-direction–alternate-reverse</td><td>动画在奇数次（1、3、5…）反向播放，在偶数次（2、4、6…）正向播放</td></tr><tr><td><code>animation-play-state</code></td><td>规定动画是否正在运行或暂停。默认是[running]</td></tr></tbody></table></li></ul></blockquote><h4 id="CSS3多列"><a href="#CSS3多列" class="headerlink" title="CSS3多列"></a>CSS3多列</h4><blockquote><p>关于CSS3的多列属性我好像还真没用到过，看到了就记录一下吧。</p><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>column-count</td><td>指定了需要将一段文字分隔的列数</td></tr><tr><td>column-gap</td><td>该属性指定了列与列之间的缝隙</td></tr><tr><td>column-rule-width</td><td>指定了两列的边框厚度</td></tr><tr><td>column-rule-style</td><td>指定了列与列之间的边框样式（solid | dotted）</td></tr><tr><td>column-rule-color</td><td>指定了两列的边框颜色</td></tr><tr><td>column-rule</td><td>是上述三个属性的缩写</td></tr><tr><td>column-span</td><td>指定元素跨越所有列</td></tr><tr><td>column-width</td><td>指定了列的宽度</td></tr></tbody></table></blockquote><h4 id="CSS3用户界面"><a href="#CSS3用户界面" class="headerlink" title="CSS3用户界面"></a>CSS3用户界面</h4><blockquote><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>resizing</td><td>指定一个元素是否应该由用户去调整大小</td></tr><tr><td>box-sizing</td><td>当你设置一个元素为box-sizing:border-box时，此元素的内边距和边框便不再增加它的宽度了</td></tr><tr><td>outline-offset</td><td>对轮廓进行偏移，并在超出边框边缘的位置绘制轮廓</td></tr></tbody></table></blockquote><h4 id="CSS3图片"><a href="#CSS3图片" class="headerlink" title="CSS3图片"></a>CSS3图片</h4><blockquote><ul><li>响应式图片</li></ul></blockquote><pre><code>img{    max-width:100%;    height:auto;}</code></pre><blockquote><ul><li>图片文本<br>定义图片文本的时候结合position:relative和position:absolute。</li></ul></blockquote><blockquote><ul><li>响应式图片相册<br>在这里正确用好这几个属性：<code>box-sizing:border</code>、<code>@media</code>、<code>clear:both</code></li></ul></blockquote><h4 id="CSS3弹性盒子-Flex布局"><a href="#CSS3弹性盒子-Flex布局" class="headerlink" title="CSS3弹性盒子-Flex布局"></a>CSS3弹性盒子-Flex布局</h4><blockquote><p>之前总结过一篇：<a href="https:/www.liugezhou.online/2018/08/22/Flex布局/" target="_blank" rel="noopener">Flex布局</a></p></blockquote><h4 id="CSS3多媒体查询"><a href="#CSS3多媒体查询" class="headerlink" title="CSS3多媒体查询"></a>CSS3多媒体查询</h4><blockquote><p>CSS3多媒体类型</p><table><thead><tr><th>值</th><th>描述</th></tr></thead><tbody><tr><td>all</td><td>用于所有多媒体类型设备</td></tr><tr><td>print</td><td>用于打印机</td></tr><tr><td>screen</td><td>用于电脑屏幕、平板、智能手机等</td></tr><tr><td>speech</td><td>用于屏幕阅读器</td></tr></tbody></table></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h6 id=&quot;作为一个前端开发者来说，对CSS的熟悉是基础中的基础。现如今框架眼花缭乱，炫酷的动画、美丽的UI，应接不暇，然而CSS3的本来面目是那么的简单，有很多的CSS3属性虽然特别的常见，但是灵活的运用还是需要我们对基础进行多次的夯实，本篇博客就是来对我们的CSS3的一些属性进行一个大而全的回顾。（可能大多数属性你都烂熟于心、你可以跳过它或者再次做一次温习）&quot;&gt;&lt;a href=&quot;#作为一个前端开发者来说，对CSS的熟悉是基础中的基础。现如今框架眼花缭乱，炫酷的动画、美丽的UI，应接不暇，然而CSS3的本来面目是那么的简单，有很多的CSS3属性虽然特别的常见，但是灵活的运用还是需要我们对基础进行多次的夯实，本篇博客就是来对我们的CSS3的一些属性进行一个大而全的回顾。（可能大多数属性你都烂熟于心、你可以跳过它或者再次做一次温习）&quot; class=&quot;headerlink&quot; title=&quot;作为一个前端开发者来说，对CSS的熟悉是基础中的基础。现如今框架眼花缭乱，炫酷的动画、美丽的UI，应接不暇，然而CSS3的本来面目是那么的简单，有很多的CSS3属性虽然特别的常见，但是灵活的运用还是需要我们对基础进行多次的夯实，本篇博客就是来对我们的CSS3的一些属性进行一个大而全的回顾。（可能大多数属性你都烂熟于心、你可以跳过它或者再次做一次温习）.&quot;&gt;&lt;/a&gt;作为一个前端开发者来说，对CSS的熟悉是基础中的基础。现如今框架眼花缭乱，炫酷的动画、美丽的UI，应接不暇，然而CSS3的本来面目是那么的简单，有很多的CSS3属性虽然特别的常见，但是灵活的运用还是需要我们对基础进行多次的夯实，本篇博客就是来对我们的CSS3的一些属性进行一个大而全的回顾。（可能大多数属性你都烂熟于心、你可以跳过它或者再次做一次温习）.&lt;/h6&gt;
    
    </summary>
    
      <category term="web前端" scheme="http://liugezhou.online/categories/web%E5%89%8D%E7%AB%AF/"/>
    
      <category term="HTML/CSS" scheme="http://liugezhou.online/categories/web%E5%89%8D%E7%AB%AF/HTML-CSS/"/>
    
    
      <category term="HTML/CSS" scheme="http://liugezhou.online/tags/HTML-CSS/"/>
    
      <category term="CSS3" scheme="http://liugezhou.online/tags/CSS3/"/>
    
  </entry>
  
  <entry>
    <title>每周分享第六期</title>
    <link href="http://liugezhou.online/2019/07/28/%E6%AF%8F%E5%91%A8%E5%88%86%E4%BA%AB%E7%AC%AC%E5%85%AD%E6%9C%9F/"/>
    <id>http://liugezhou.online/2019/07/28/每周分享第六期/</id>
    <published>2019-07-27T16:00:00.000Z</published>
    <updated>2019-09-30T03:18:02.127Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><strong>这里记录过去一周，我的关注以及值得记录的东西。</strong></p></blockquote><blockquote><p>本周二下午我的公众号便遭遇了灭顶之灾–永久封禁。<br>不知道是什么原因，也找不到申诉入口。<br>于是本周末就花了点时间丰富了下自己的博客，此外没有别的产出了，下面做一个小的记录。</p></blockquote><a id="more"></a><h3 id="Hexo-Next"><a href="#Hexo-Next" class="headerlink" title="Hexo || Next"></a>Hexo || Next</h3><blockquote><p>本周周末的博客搭建经验分享：<br>只需要看两个官方文档就可以了：<br><a href="https://hexo.io/zh-cn/docs/index.html" target="_blank" rel="noopener">Hexo官方文档</a><br><a href="https://theme-next.iissnan.com/" target="_blank" rel="noopener">NexT官方文档</a></p><p>此博客中用到的一些第三方服务：</p><ul><li>七牛云对象存储免费图片存储空间<br>写博客时最好是图片上传，再就是自己的图片存放地址，如果引用别的地方图片，一段时间图片地址就会失效。</li><li>LeanCode<br>在此网站注册且实名认证后，你可以为你的博客文章添加评论、文字统计等功能。</li><li>百度统计<br>在你的博客中加入<code>baidu_analytics</code>,便可以清楚地知道你的网站被访问了些什么。</li><li>TIDIO<br>Tidio Chat 是一款界面极其简洁的网页免费在线聊天工具.只需要简单的配置，你就可以在你的网站上搭建一个聊天窗口。</li></ul></blockquote><h3 id="RSS"><a href="#RSS" class="headerlink" title="RSS"></a>RSS</h3><blockquote><p>RSS（简易信息聚合）是一种消息来源格式规范，用以聚合经常发布更新数据的网站，例如博客文章、新闻、音频或视频的网摘。RSS文件（或称做摘要、网络摘要、或频更新，提供到频道）包含了全文或是节录的文字，再加上发用者所订阅之网摘布数据和授权的元数据。<br>简单来说，就是能通过类似鲜果阅读，ZAKER、Feedly这类阅读器，实现目标网站的聚合阅读。</p><p>通俗易懂的介绍RSS：<a href="https://www.ruanyifeng.com/blog/2006/01/rss.html" target="_blank" rel="noopener">如何使用RSS</a></p><p>你只需要下载一个RSS阅读器，就可以了，App Store 推荐下载：【RSS Prime】。</p><p>我的网站RSS订阅地址为：<a href="https://www.liugezhou.online/atom.xml" target="_blank" rel="noopener">https://www.liugezhou.online/atom.xml</a></p></blockquote><h3 id="7款便捷实用的CSS3工具"><a href="#7款便捷实用的CSS3工具" class="headerlink" title="7款便捷实用的CSS3工具"></a><a href="https://mp.weixin.qq.com/s/Tm6Hhn181MQkyYswMxgVzw" target="_blank" rel="noopener">7款便捷实用的CSS3工具</a></h3><blockquote><p>一些css代码在线生成工具，包括聊天气泡、Loading、triangle 、Button 、box-shadow、border-image等。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;这里记录过去一周，我的关注以及值得记录的东西。&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;本周二下午我的公众号便遭遇了灭顶之灾–永久封禁。&lt;br&gt;不知道是什么原因，也找不到申诉入口。&lt;br&gt;于是本周末就花了点时间丰富了下自己的博客，此外没有别的产出了，下面做一个小的记录。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="每周分享" scheme="http://liugezhou.online/categories/%E6%AF%8F%E5%91%A8%E5%88%86%E4%BA%AB/"/>
    
    
      <category term="每周分享" scheme="http://liugezhou.online/tags/%E6%AF%8F%E5%91%A8%E5%88%86%E4%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title>电脑更换如何继续写hexo博客</title>
    <link href="http://liugezhou.online/2019/07/24/%E7%94%B5%E8%84%91%E6%9B%B4%E6%8D%A2%E5%A6%82%E4%BD%95%E7%BB%A7%E7%BB%AD%E5%86%99hexo%E5%8D%9A%E5%AE%A2/"/>
    <id>http://liugezhou.online/2019/07/24/电脑更换如何继续写hexo博客/</id>
    <published>2019-07-23T16:00:00.000Z</published>
    <updated>2019-09-30T03:18:02.131Z</updated>
    
    <content type="html"><![CDATA[<h4 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h4><blockquote><p>之前我用hexo搭建过一个博客，不过后来由于换了电脑之后，理所应当接着在搭建好的博客上继续写，可是没有成功。</p></blockquote><blockquote><p>我当时是这么操作的：直接将原电脑博客的源文件copy到新电脑并直接部署，导致了时间的全部错乱，博客时间没有同步，当时也是查了很多资料，结果还是没有成功，于是当初便又重新搭建了现在用的这个博客。</p><p>其实当时只有在每篇文章标题上加个date字段就能解决我上述所说的问题,还是因为之前对HEXO配置什么的都没看过的原因。</p><p>然后因为这个date问题看了半天，最后在【电脑更换继续写博客】这个问题上找到了一个对于我来说最佳的方案。</p></blockquote><a id="more"></a><blockquote><p>这篇文章要解决总结的问题是：使用hexo搭建完博客之后 ，如果换了电脑，怎么继续写搭建好的hexo博客。</p><p>这篇总结欠了很久，这篇总结也是在我完全明白如何操作后的总结。</p></blockquote><h4 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h4><blockquote><p>首先假设的场景是这样的：你在本地搭建好了博客（你本地文件夹为blog），且已经写了一段时间的博客，然后你准备回回家中的电脑继续写博客，于是在原有的电脑上你要这么操作：</p></blockquote><blockquote><p>第一步：在你的Github博客上新建一个分支，我们设为hexo分支，并且在你的Github上将hexo分支设为默认分支。</p></blockquote><blockquote><p>第二步：先在你原来的电脑上新建一个文件夹（newBlog）且clone这个hexo分支到你本地，把除了.git之外的文件全部删掉。</p></blockquote><blockquote><p>第三步：把你博客源文件（blog下的文件）除了.deploy_git文件外全部复制到newBlog下【注意如果你之前克隆过theme中的主题文件，那么应该把主题文件中的.git文件夹删掉】</p></blockquote><blockquote><p>第四步：执行提交文件操作：<code>git add .</code> <code>git commit –m &quot;add branch&quot;</code>  <code>git push</code></p></blockquote><blockquote><p>第五步：这个时候你将要开始在newBlog这个文件下<code>hexo d</code>|| <code>git add.</code> 、<code>git push</code>等操作，之前的blog文件可以扔到垃圾箱了。</p></blockquote><h6 id="以上本地的操作完成后，你提交完代码就回家了，这个时候你到了家中（一些基础配置就不说了）："><a href="#以上本地的操作完成后，你提交完代码就回家了，这个时候你到了家中（一些基础配置就不说了）：" class="headerlink" title="以上本地的操作完成后，你提交完代码就回家了，这个时候你到了家中（一些基础配置就不说了）："></a>以上本地的操作完成后，你提交完代码就回家了，这个时候你到了家中（一些基础配置就不说了）：</h6><blockquote><p>第一步：clone你在公司<code>git push</code>的项目到你的本地。</p></blockquote><blockquote><p>第二步：<code>cd xxx.github.io</code>、<code>npm install</code>、<code>npm install hexo-deployer-git --save</code></p></blockquote><blockquote><p>第三步：<code>hexo g</code>、<code>hexo d</code>。</p></blockquote><blockquote><p>这个时候你便可以在家继续写博客了，只不过写完的时候别忘了<code>git push</code> 一下.</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;之前我用hexo搭建过一个博客，不过后来由于换了电脑之后，理所应当接着在搭建好的博客上继续写，可是没有成功。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;我当时是这么操作的：直接将原电脑博客的源文件copy到新电脑并直接部署，导致了时间的全部错乱，博客时间没有同步，当时也是查了很多资料，结果还是没有成功，于是当初便又重新搭建了现在用的这个博客。&lt;/p&gt;
&lt;p&gt;其实当时只有在每篇文章标题上加个date字段就能解决我上述所说的问题,还是因为之前对HEXO配置什么的都没看过的原因。&lt;/p&gt;
&lt;p&gt;然后因为这个date问题看了半天，最后在【电脑更换继续写博客】这个问题上找到了一个对于我来说最佳的方案。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="博客搭建" scheme="http://liugezhou.online/categories/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    
    
      <category term="博客" scheme="http://liugezhou.online/tags/%E5%8D%9A%E5%AE%A2/"/>
    
      <category term="博客搭建" scheme="http://liugezhou.online/tags/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    
  </entry>
  
  <entry>
    <title>微信公众号被封引发的焦虑</title>
    <link href="http://liugezhou.online/2019/07/23/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7%E8%A2%AB%E5%B0%81%E5%BC%95%E5%8F%91%E7%9A%84%E7%84%A6%E8%99%91/"/>
    <id>http://liugezhou.online/2019/07/23/微信公众号被封引发的焦虑/</id>
    <published>2019-07-22T16:00:00.000Z</published>
    <updated>2019-09-30T03:18:02.119Z</updated>
    
    <content type="html"><![CDATA[<script src="https://ajax.aspnetcdn.com/ajax/jQuery/jquery-3.4.1.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="本篇博文需要输入我之前被封的公众号名称" />    <label for="pass">本篇博文需要输入我之前被封的公众号名称</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      Welcome to my blog, enter password to read.
    
    </summary>
    
      <category term="杂感" scheme="http://liugezhou.online/categories/%E6%9D%82%E6%84%9F/"/>
    
    
      <category term="杂感" scheme="http://liugezhou.online/tags/%E6%9D%82%E6%84%9F/"/>
    
      <category term="吐槽" scheme="http://liugezhou.online/tags/%E5%90%90%E6%A7%BD/"/>
    
  </entry>
  
</feed>
