<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>六个周</title>
  
  <subtitle>liugezhou</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://liugezhou.online/"/>
  <updated>2019-08-11T09:45:09.069Z</updated>
  <id>http://liugezhou.online/</id>
  
  <author>
    <name>liugezhou</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>每周分享第八期</title>
    <link href="http://liugezhou.online/2019/08/11/%E6%AF%8F%E5%91%A8%E5%88%86%E4%BA%AB%E7%AC%AC%E5%85%AB%E6%9C%9F/"/>
    <id>http://liugezhou.online/2019/08/11/每周分享第八期/</id>
    <published>2019-08-10T16:00:00.000Z</published>
    <updated>2019-08-11T09:45:09.069Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><strong>这里记录过去一周，我的关注以及值得记录的东西。</strong></p></blockquote><a id="more"></a><h4 id="在线流程图工具"><a href="#在线流程图工具" class="headerlink" title="在线流程图工具"></a><a href="https://www.zenflowchart.com/" target="_blank" rel="noopener">在线流程图工具</a></h4><blockquote><p>简单好用的在线流程图工具。</p><p>之前开发项目的时候，画过【流程图】，为此还专门下载软件进行点点熟悉画图。</p><p>这个网站简单、易用，不论你是做什么工作，在需要绘制流程图的时候不必用专有软件，可直接打开此网站，使用此网站提供的服务进行流程图的绘画。</p></blockquote><h4 id="面包多–为创造者创收"><a href="#面包多–为创造者创收" class="headerlink" title="面包多–为创造者创收"></a>面包多–为创造者创收</h4><blockquote><p>面包多致力于帮助创造者(开发者，写作者，设计师等)获得收入，创造者可以上传作品到面包多，设置价格，然后获得出售链接，这些链接可以放置于任何地方，以供用户购买这些创造成果.</p><p>我在此平台发布了一篇文章：<a href="https://mianbaoduo.com/product/show/mbd-Yp2Ukw==" target="_blank" rel="noopener">作为一名开发者应该收藏的网站</a></p></blockquote><blockquote><p>内容即为本博客的【工具收藏】。</p></blockquote><blockquote><p>未曾想到想到还收到一个付费。</p></blockquote><blockquote><p>大概了解了一下此产品，基于知识付费方面。</p></blockquote><h4 id="今日热榜-APP"><a href="#今日热榜-APP" class="headerlink" title="今日热榜  APP"></a>今日热榜  APP</h4><blockquote><p>知乎热搜、微博热搜、微信热搜、澎湃新闻、豆瓣、百度等等等热点。</p></blockquote><blockquote><p>此APP便是提供这样一个内容。可通过自己的订阅，查看当下舆论新闻的热搜、热点事件。</p></blockquote><h4 id="华为-HarmonyOS-鸿蒙系统"><a href="#华为-HarmonyOS-鸿蒙系统" class="headerlink" title="华为 HarmonyOS 鸿蒙系统"></a>华为 HarmonyOS 鸿蒙系统</h4><blockquote><p>这是本周五的一大热点事件。<br>根据余承东介绍，“鸿蒙”具备以下特点：</p><p>1、基于微内核、面向全场景的分布式操作系统。  </p><p>2、面向的是“下一代”的 IOT 场景，包括已发布的荣耀智慧屏，规划中的PC、手表手环、车机、音箱、耳机、VR 设备，未来还会延伸至工业、航空航天等领域。 </p><p>3、开源。</p><h5 id="微内核"><a href="#微内核" class="headerlink" title="微内核"></a>微内核</h5><p>“内核”指代的是操作系统中的核心架构，大体可分为“宏内核”与“微内核”，前者代表为 iOS 与安卓，后者代表是谷歌 Fuchsia 与鸿蒙。两者的区别在于：内核越小，涉及的操作系统代码越少，进程越简单。</p></blockquote><blockquote><p>由于宏内核包含的系统服务很多，比如文件系统、进程管理、内存管理、声卡显卡驱动程序等，调用起来需要强大的处理器，所以适用于手机、电脑、PC 等产品；但微内核只提供诸如 CPU 管理、进程调度等最基础的功能，其余服务均以后期叠加的形式完成，因此更适合对于运算需求没那么高的手表、智能家居等 IOT 设备。</p><h5 id="分布式"><a href="#分布式" class="headerlink" title="分布式"></a>分布式</h5><p>分布式技术是 IoT 厂商提出“万物互联”的基础。从手机、到手表、到智能家居、汽车，不同设备对于系统的运算需求（本地/云端）、内存处理都不一样，而“分布式”则是用来连接这些设备的操作系统。<br>…………</p><h6 id="更多文章内容：-鸿蒙初问世，华为敛锋芒"><a href="#更多文章内容：-鸿蒙初问世，华为敛锋芒" class="headerlink" title="更多文章内容： 鸿蒙初问世，华为敛锋芒"></a>更多文章内容： <a href="https://mp.weixin.qq.com/s/v61phlapZi5sXiOpIGJJaw" target="_blank" rel="noopener">鸿蒙初问世，华为敛锋芒</a></h6></blockquote><h4 id="Taro与uni-app"><a href="#Taro与uni-app" class="headerlink" title="Taro与uni-app"></a>Taro与uni-app</h4><blockquote><p>开发一次，到处运行，是每个程序员的梦想。<br>对Taro与uni-app两个框架做了一个小小的对比，对于框架的选型我已然有了自己的选择。下面为简单结论。</p><table><thead><tr><th>描述</th><th>Uni-app：10412</th><th>Taro：20662</th></tr></thead><tbody><tr><td>技术栈</td><td>Vue.js</td><td>React.js</td></tr><tr><td>案例</td><td>案例丰富</td><td>案例丰富</td></tr><tr><td>微信小程序</td><td>⭕</td><td>⭕</td></tr><tr><td>支付宝小程序</td><td>⭕</td><td>⭕</td></tr><tr><td>百度小程序</td><td>⭕</td><td>⭕</td></tr><tr><td>头条小程序</td><td>⭕</td><td>⭕</td></tr><tr><td>H5</td><td>⭕</td><td>⭕</td></tr><tr><td>App</td><td>⭕</td><td>⭕</td></tr></tbody></table></blockquote><blockquote><p>公说公有理婆说婆有理,下面为两个框架各自的评测与开发者评测链接：<br>Taro官方评测：<a href="https://juejin.im/post/5c90eb366fb9a070d4199cc9" target="_blank" rel="noopener">Taro评测</a>.<br>uni-app官方评测：<a href="https://ask.dcloud.net.cn/article/35867" target="_blank" rel="noopener">uni-app评测</a>.<br>开发者评测：<a href="https://juejin.im/post/5c4ec383f265da613e229a67" target="_blank" rel="noopener">Taro vs uni-app</a>. </p><h6 id="开发者评测的简单总结："><a href="#开发者评测的简单总结：" class="headerlink" title="开发者评测的简单总结："></a>开发者评测的简单总结：</h6><p><code>质量对比</code>：<br>从两个项目的实际运行来看，uni-app的跨端效果更好（其实不止对比了官方demo，我们自己也写了小demo），特别是在H5平台相比taro要完善不少。<br>taro 的 dist 目录下不区分编译平台，同一时间仅可编译到一个平台，不支持多个平台对比查看运行效果；<br>uni-app 的 dist 目录区分编译平台，故支持同时编译到多个平台，可同时对比查看不同平台运行效果，这个体验是不错的，更有跨端开发的感觉。<br>另外uni-app的条件编译比较完善，这个在处理平台差异时很有用。</p><p><code>案例对比</code>：<br>两个框架都在官网放上了众多案例，只是taro案例清一色是微信小程序，没看到其他端，难道大家使用taro，只是为了用react开发微信小程序，不需要跨端？<br>综合比较，uni-app跨端质量更好，真实跨端案例也更多.</p></blockquote><blockquote><p><code>运行性能:</code><br>taro在性能优化上做的更细致，使用uni-app需要自己注意代码优化。</p></blockquote><blockquote><p><code>开发体验</code>:<br>都挺好。taro官方未特别推荐IDE，但提供了vscode支持的d.ts； uni-app推荐的开发工具是他自家的HBuilderX，用它可以不配环境，开箱即用.  </p></blockquote><blockquote><p><code>学习交流</code>:<br>另外文档角度，uni-app的文档比taro要完善，数了数交流群的数量，也是uni-app.</p></blockquote><h4 id="微信小程序PC端内测"><a href="#微信小程序PC端内测" class="headerlink" title="微信小程序PC端内测"></a>微信小程序PC端内测</h4><blockquote><p>小程序在PC端的使用，正在内测，这是要移动端、PC端通吃的节奏啊。</p></blockquote><blockquote><p>大约是本周五该新闻被爆料，微信强调，希望通过这一探索，帮助用户在聊天场景中更连贯地使用小程序。</p></blockquote><blockquote><p>小程序的红利应该还未真正到来，一切都在酝酿之中。在我看来，一方面是因为苹果的应用商店在那卡着，另一方面就是生态的布局还在继续，很有可能像微信公众平台、微信读书一样，持续不断的给用户、给开发者一个学习使用的机会，成熟之时，便是爆发之日。</p></blockquote><blockquote><p>在此再插一句：这种垄断巨头做出来的产品是真的好，但是由于垄断天然特性，总是会损害一部分人的利益，大体上看可能会慢慢损害大多数，只是会如温水壶青蛙般不知情。慢慢被同化、无力反驳。垄断者的耐心布局给人方面却又使人感到恐惧。</p></blockquote><h4 id="守望先锋-UI-组件库"><a href="#守望先锋-UI-组件库" class="headerlink" title="守望先锋 UI 组件库"></a><a href="https://haixiang6123.github.io/overwatch-ui-doc/#/start" target="_blank" rel="noopener">守望先锋 UI 组件库</a></h4><blockquote><p>一个《守望先锋》游戏风格的组件库，基于 Vue.js。</p></blockquote><h4 id="视频学英语"><a href="#视频学英语" class="headerlink" title="视频学英语"></a>视频学英语</h4><blockquote><p>金山词霸APP里面有个【视频学英语】模块，画风与抖音相似，推荐。下面为一个小段子的摘抄：<br>[对话场景：一场最终面试，面试者对两个候选人进行面试提问]</p><p>Interviewer：<br>‘You both are excellent.’<br>‘But we only have one vacant position.’<br>‘Let me ask you three more questions.’<br>‘First of all:’<br>‘What’s your hobby?’  </p></blockquote><blockquote><p>Candidate 1:<br>‘I enjoy delicious food.’<br>‘I know all the good restaurants in the city.’</p><p>Candidate 2:<br>‘I enjoy working extra hours.’<br>‘I love my work, my work is my hobby.’</p><p>Interviewer：<br>‘What do you first thing when you get to work?’</p><p>Candidate 1:<br>‘I usually make a task list first,’<br>‘so that my whole day is organzied.’</p><p>Candidate 2:<br>‘I open the door’<br>‘I’m always the first one to work.’</p><p>Interviewer：<br>‘What the last thing you do before leaving work?’</p><p>Candidate 1:<br>‘Close the door’<br>‘I enjoy being the last person to leave work.’</p><p>Candidate 2:<br>‘I copy the next day’s tasks to my USB’<br>‘so I can bring it home and get started on the next day’s work.’</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;这里记录过去一周，我的关注以及值得记录的东西。&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="每周分享" scheme="http://liugezhou.online/categories/%E6%AF%8F%E5%91%A8%E5%88%86%E4%BA%AB/"/>
    
    
  </entry>
  
  <entry>
    <title>每周分享第七期</title>
    <link href="http://liugezhou.online/2019/08/04/%E6%AF%8F%E5%91%A8%E5%88%86%E4%BA%AB%E7%AC%AC%E4%B8%83%E6%9C%9F/"/>
    <id>http://liugezhou.online/2019/08/04/每周分享第七期/</id>
    <published>2019-08-03T16:00:00.000Z</published>
    <updated>2019-08-04T11:58:00.813Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><strong>这里记录过去一周，一些个人记录。</strong></p></blockquote><blockquote><p>自从公众号被封以及FQ看的国外的一些新闻，突然觉得生活有点不愉快。<br>关注的一些东西充斥着大脑，质疑的太多，想的太多总感觉一些东西在慢慢吞噬自己，很不喜欢现在的状态。有待慢慢调解。</p></blockquote><a id="more"></a><h4 id="哥德巴赫猜想"><a href="#哥德巴赫猜想" class="headerlink" title="哥德巴赫猜想"></a>哥德巴赫猜想</h4><blockquote><p>哥德巴赫1742年给欧拉的信中哥德巴赫提出了以下猜想：<strong>任一大于2的偶数都可写成两个质数之和</strong>。但是哥德巴赫自己无法证明它，于是就写信请教赫赫有名的大数学家欧拉帮忙证明，但是一直到死，欧拉也无法证明。</p></blockquote><blockquote><p>今日常见的猜想陈述为欧拉的版本，即<strong>任一大于2的偶数都可写成两个素数之和</strong>，亦称为“强哥德巴赫猜想”或“关于偶数的哥德巴赫猜想”。</p></blockquote><blockquote><p>上述的哥德巴赫猜想就是我们小学数学经常说的数学为什么要证明1+1=2这样的问题。  </p></blockquote><blockquote><p>1966年陈景润证明了”1+2”成立，即<code>&quot;任一充分大的偶数都可以表示成二个素数的和，或是一个素数和一个半素数的和&quot;</code>。</p></blockquote><blockquote><p>从关于偶数的哥德巴赫猜想，可推出：<code>任一大于7的奇数都可写成三个质数之和的猜想</code>。后者称为“弱哥德巴赫猜想”或“关于奇数的哥德巴赫猜想”。若关于偶数的哥德巴赫猜想是对的，则关于奇数的哥德巴赫猜想也会是对的。2013年5月，巴黎高等师范学院研究员哈洛德·贺欧夫各特发表了两篇论文，宣布彻底证明了弱哥德巴赫猜想。</p></blockquote><blockquote><p>关于偶数的哥德巴赫猜想（强哥德巴赫猜想），迄今还未被证明。</p></blockquote><h4 id="博弈论–金币分配"><a href="#博弈论–金币分配" class="headerlink" title="博弈论–金币分配"></a>博弈论–金币分配</h4><blockquote><p>本周看到一道特别有意思的题目：关于一百个金币如何分配的问题。</p></blockquote><blockquote><p>简单概述为：有一百个金币，A B C依次将分配方案进行提议，超过总人数1/2(不包含)通过，则游戏结束，若第一个人提议不通过，则第一个人要被砍掉，游戏继续。关于这个有意思的博弈论问题，在文末底部的公众号里做了问题的详细描述。</p></blockquote><h4 id="集合悖论"><a href="#集合悖论" class="headerlink" title="集合悖论"></a>集合悖论</h4><blockquote><p>关于集合悖论，有这样一个意思差不多的故事：</p></blockquote><blockquote><p>一个小镇上只有一个理发师，这个理发师理发有这样一个规则：<br><code>他只给不给自己理发的人进行理发，那么他是否可以给自己理发？</code></p></blockquote><blockquote><p>这个问题显然没有答案。</p><p>然后提一下集合悖论：李永乐老师在Youtube上引申大概这么说：<br>这个发明了集合概念的数学家被另一个数学家刁难，问的问题大概是这样的：<br><code>既然集合可以表示一切，那么有没有这样一个集合A，它里面表示的所有元素都是非集合A（不属于集合A）？</code></p></blockquote><blockquote><p>这个思想很好玩，感兴趣的朋友可以在微博或者Yotube上搜一下李永乐老师的视频，包括上面的哥德巴赫猜想与金币问题均有详细视频讲述。</p></blockquote><h4 id="博客的草稿功能"><a href="#博客的草稿功能" class="headerlink" title="博客的草稿功能"></a>博客的草稿功能</h4><blockquote><p>博客写文的时候，一些文章写不完要转为草稿，这是一个会遇到的问题。<br>首先<code>hexo new draft &quot;TS&quot;</code>,会在source/_drafts目录下生成一个TS.md文件.<br>这个文件不被显示在页面上，链接也访问不到。<br>也就是说如果你想把某一篇文章移除显示，又不舍得删除，可以把它移动到_drafts目录之中。</p><p>如果你希望强行预览草稿，  </p><ul><li>更改主_config.yml配置文件： <code>render_drafts: true</code>.  </li><li>或者如下方式启动server：<code>hexo server --drafts</code>.  </li></ul><p>下面这条命令可以把草稿变成文章，或者页面：<code>hexo publish [layout] &lt;filename&gt;</code>.</p></blockquote><h4 id="本周产出"><a href="#本周产出" class="headerlink" title="本周产出"></a>本周产出</h4><blockquote><p>本周对CSS3的内容做了一个简单的回顾：<a href="https://www.liugezhou.online/2019/07/29/CSS回顾查漏补缺/" target="_blank" rel="noopener">CSS回顾查漏补缺</a></p></blockquote><h4 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h4><blockquote><p>本周有点丧，干一件事开始觉得拖拉与抵触，分析下这个原因：  </p></blockquote><blockquote><ul><li>工作没有成就感，重复劳动略显疲惫。</li><li>目标完成后，愉悦从何而来产生怀疑：是为了完成目标后的满足感？还是说是发自内心想要去做这件事？</li><li>当对社会新闻产生怀疑，自己的每日做法除了填报肚子，是不是应该还有一个不宏大但能满足自己的目标？</li></ul></blockquote><blockquote><p>然而，拖拉到现在，有更重要紧急的事要去做。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;这里记录过去一周，一些个人记录。&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;自从公众号被封以及FQ看的国外的一些新闻，突然觉得生活有点不愉快。&lt;br&gt;关注的一些东西充斥着大脑，质疑的太多，想的太多总感觉一些东西在慢慢吞噬自己，很不喜欢现在的状态。有待慢慢调解。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="每周分享" scheme="http://liugezhou.online/categories/%E6%AF%8F%E5%91%A8%E5%88%86%E4%BA%AB/"/>
    
    
  </entry>
  
  <entry>
    <title>CSS3属性全回顾</title>
    <link href="http://liugezhou.online/2019/07/29/CSS%E5%9B%9E%E9%A1%BE%E6%9F%A5%E6%BC%8F%E8%A1%A5%E7%BC%BA/"/>
    <id>http://liugezhou.online/2019/07/29/CSS回顾查漏补缺/</id>
    <published>2019-07-29T14:33:54.000Z</published>
    <updated>2019-07-31T08:40:00.000Z</updated>
    
    <content type="html"><![CDATA[<h6 id="作为一个前端开发者来说，对CSS的熟悉是基础中的基础。现如今框架眼花缭乱，炫酷的动画、美丽的UI，应接不暇，然而CSS3的本来面目是那么的简单，有很多的CSS3属性虽然特别的常见，但是灵活的运用还是需要我们对基础进行多次的夯实，本篇博客就是来对我们的CSS3的一些属性进行一个大而全的回顾。（可能大多数属性你都烂熟于心、你可以跳过它或者再次做一次温习）"><a href="#作为一个前端开发者来说，对CSS的熟悉是基础中的基础。现如今框架眼花缭乱，炫酷的动画、美丽的UI，应接不暇，然而CSS3的本来面目是那么的简单，有很多的CSS3属性虽然特别的常见，但是灵活的运用还是需要我们对基础进行多次的夯实，本篇博客就是来对我们的CSS3的一些属性进行一个大而全的回顾。（可能大多数属性你都烂熟于心、你可以跳过它或者再次做一次温习）" class="headerlink" title="作为一个前端开发者来说，对CSS的熟悉是基础中的基础。现如今框架眼花缭乱，炫酷的动画、美丽的UI，应接不暇，然而CSS3的本来面目是那么的简单，有很多的CSS3属性虽然特别的常见，但是灵活的运用还是需要我们对基础进行多次的夯实，本篇博客就是来对我们的CSS3的一些属性进行一个大而全的回顾。（可能大多数属性你都烂熟于心、你可以跳过它或者再次做一次温习）."></a>作为一个前端开发者来说，对CSS的熟悉是基础中的基础。现如今框架眼花缭乱，炫酷的动画、美丽的UI，应接不暇，然而CSS3的本来面目是那么的简单，有很多的CSS3属性虽然特别的常见，但是灵活的运用还是需要我们对基础进行多次的夯实，本篇博客就是来对我们的CSS3的一些属性进行一个大而全的回顾。（可能大多数属性你都烂熟于心、你可以跳过它或者再次做一次温习）.</h6><a id="more"></a><table><thead><tr><th>-webkit-</th><th>-ms-</th><th>-moz-</th></tr></thead></table><h4 id="CSS边框"><a href="#CSS边框" class="headerlink" title="CSS边框"></a>CSS边框</h4><blockquote><p>本节回顾两个属性<code>border-radius</code>、<code>box-shadow</code></p><table><thead><tr><th>属性</th><th>描述</th><th>扩展</th></tr></thead><tbody><tr><td>border-radius</td><td>给div元素添加圆角的边框<br>border-radius 属性是一个最多可指定四个 border -*- radius 属性的复合属性<br><br>若跟四个值其顺序是：<br>左上角、右上角、右下角、左下角</td><td><del>border-top-left-radius<br>border-top-right-radius<br>border-bottom-right-radius<br>border-bottom-left-radius<br></del>推荐写法:<br>border-radius:20px</td></tr><tr><td>box-shadow</td><td>该属性可以设置一个或多个下拉阴影的框<br>语法：<br>box-shadow:h-shadow v-shadow blur spread color inset</td><td><code>h-shadow</code>  水平阴影位置–必填值（允许负值）<br><code>v-shadow</code>  垂直阴影位置–必填值（允许负值） <br><code>blur</code>  可选值–模糊距离<br><code>spread</code>  可选值–阴影的大小<br> <code>color</code>  可选值-颜色<br><code>inset</code>  可选值 –从外内的阴影（开始时）改变阴影内侧阴影</td></tr><tr><td>border-image</td><td></td><td></td></tr></tbody></table></blockquote><h4 id="CSS3背景"><a href="#CSS3背景" class="headerlink" title="CSS3背景"></a>CSS3背景</h4><blockquote><p>本节回顾以下背景属性：<code>bacground-image</code>、 <code>background-size</code>、 <code>background-origin</code>、 <code>background-clip</code></p><table><thead><tr><th>属性</th><th>描述</th><th>扩展</th></tr></thead><tbody><tr><td>background-image</td><td>添加背景图片(允许在元素上添加多个背景图像)</td><td>background: url(flower.png) right bottom no-repeat, url(summertrack.png) left top repeat;</td></tr><tr><td>background-size</td><td>指定背景图像的大小–该大小是相对于父元素的高度和宽度的百分比</td><td>background-size:20px 60px;<br>background-size:100% 100%;<br>background-size:cover–保持图像纵横比并将图像缩放成完全覆盖背景定位的最小大小<br>background-size:contain–保持图像的纵横比并将图像缩放成将适合背景定位区域的最大大小。</td></tr><tr><td>background-origin</td><td>该属性指定了背景图像的位置区域</td><td>content-box<br>padding-box<br>border-box</td></tr><tr><td>background-clip</td><td>该裁剪属性是指从指定位置开始绘制</td><td>content-box<br>padding-box<br>border-box</td></tr></tbody></table></blockquote><h4 id="CSS3的渐变"><a href="#CSS3的渐变" class="headerlink" title="CSS3的渐变"></a>CSS3的渐变</h4><blockquote><p>对CSS3渐变的高效使用，可以提升网站一个Level。<br>我们来回顾：线性渐变（Linear Gradients）和径向渐变（Radial Gradients）  </p></blockquote><blockquote><ul><li><p>线性渐变（Linerar Gradients）：<br>从上到下（默认）：<code>background:linear-gradient(red,blue,...)</code><br>从左到右： <code>background:linear-gradient(to right,red,blue,...)</code><br>从左上角到右下角度： <code>background:linear-gradient(to right bottom,red,blue,...)</code><br>角度定义：<code>background:linear-gradient(45deg,red,blue,...)</code>  </p></li><li><p>径向渐变（Radial Gradients）:<br>颜色结点均匀分布（默认情况下）:<code>background:radial-gradient(red,green,blue)</code><br>颜色结点不均匀分布：<code>background:radial-gradient(red 10%,green 20%,blue 30%)</code><br>设置形状：<code>background: radial-gradient(circle | ellipse, red, yellow, green);</code></p></li></ul></blockquote><h4 id="CSS3文本效果"><a href="#CSS3文本效果" class="headerlink" title="CSS3文本效果"></a>CSS3文本效果</h4><blockquote><p>这里我们来回顾以下文本效果的以下几个属性：<code>text-shadow</code>、<code>text-overflow</code>、<code>word-wrap</code>、<code>word-break</code></p><table><thead><tr><th>属性</th><th>描述</th><th>扩展</th></tr></thead><tbody><tr><td>text-shadow</td><td>文本阴影<br>语法：<br>text-shadow: h-shadow v-shadow blur color;</td><td><code>h-shadow</code>  水平阴影位置–必填值（允许负值）<br><code>v-shadow</code>  垂直阴影位置–必填值（允许负值） <br><code>blur</code>  可选值–模糊距离<br><code>spread</code>  可选值–阴影的大小</td></tr><tr><td>text-overflow</td><td>文本溢出属性指定应向用户如何显示溢出内容（clip、ellipsis、string）</td><td>clip –修剪文本<br>ellipsis–显示省略号代替被修剪的文本<br>string – 使用给定的字符串来代表被修剪的文本</td></tr><tr><td>word-wrap</td><td>允许对长的不可分割的单词进行分割并换行到下一行。（normal、break-word）</td><td>normal–只在允许的断字点换行<br>break-word–在长单词或URL地址内部进行换行</td></tr><tr><td>word-break</td><td>规定非中日韩文本的换行规则</td><td>normal–使用浏览器默认的换行规则。<br>break-all–允许在单词内换行。<br>keep-all–只能在半角空格或连字符处换行。</td></tr></tbody></table></blockquote><h4 id="2D转换"><a href="#2D转换" class="headerlink" title="2D转换"></a>2D转换</h4><blockquote><p>transform:translate(x,y)、rotate(angle)、scale(x,y)、skew(x-angle,y-angle)、matrix()<br>移动、旋转、放大缩小、倾斜。<br>不展开叙述。</p></blockquote><h4 id="CSS3过渡-CSS3动画"><a href="#CSS3过渡-CSS3动画" class="headerlink" title="CSS3过渡 || CSS3动画"></a>CSS3过渡 || CSS3动画</h4><blockquote><ul><li><p>过渡属性<br><code>transition</code>:简写属性，用于在一个属性中设置四个过渡属性。<br><code>transition-property</code>:规定应用过渡的CSS属性的名称。<br><code>transition-duration</code>：定义过渡效果花费的时间。默认为0<br><code>transition-timing-function</code>:规定过渡效果的时间曲线<br><code>transition-delay</code>:规定过渡效果何时开始</p></li><li><p>动画属性</p><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td><code>@keyframse</code></td><td>规定动画</td></tr><tr><td><code>animation</code></td><td>所有动画的简写属性，除了<code>animation-play-state</code>属性</td></tr><tr><td>语法：</td><td><code>animation: name duration timing-function delay iteration-count direction fill-mode play-state;</code></td></tr><tr><td><code>animation-name</code></td><td>规定@keyframes动画的名称</td></tr><tr><td><code>animation-duration</code></td><td>规定动画完成一个周期所花费封秒或毫秒</td></tr><tr><td><code>animation-timing-function</code></td><td>规定动画的速度曲线：默认为[ease（低速-加快-变慢）]</td></tr><tr><td>其它值</td><td>linear(匀速)、ease-in(动画以低速开始)、ease-out(动画以低速结束)、ease-in-out(动画以低速开始和结束)</td></tr><tr><td><code>animation-fill-mode</code></td><td>规定当动画不播放时（当动画完成或者延迟未开始播放时），要应用到的元素的样式。</td></tr><tr><td><code>animation-delay</code></td><td>规定动画何时开始</td></tr><tr><td><code>animation-iteration-count</code></td><td>规定动画被播放的次数   [infinite]无限次</td></tr><tr><td><code>animation-direction</code></td><td>规定动画是否在下一周期逆向地播放。默认是[normal]</td></tr><tr><td>animation-direction – reverse</td><td>动画反向播放</td></tr><tr><td>animation-direction –alternate</td><td>动画在奇数次（1、3、5…）正向播放，在偶数次（2、4、6…）反向播放。</td></tr><tr><td>animation-direction–alternate-reverse</td><td>动画在奇数次（1、3、5…）反向播放，在偶数次（2、4、6…）正向播放</td></tr><tr><td><code>animation-play-state</code></td><td>规定动画是否正在运行或暂停。默认是[running]</td></tr></tbody></table></li></ul></blockquote><h4 id="CSS3多列"><a href="#CSS3多列" class="headerlink" title="CSS3多列"></a>CSS3多列</h4><blockquote><p>关于CSS3的多列属性我好像还真没用到过，看到了就记录一下吧。</p><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>column-count</td><td>指定了需要将一段文字分隔的列数</td></tr><tr><td>column-gap</td><td>该属性指定了列与列之间的缝隙</td></tr><tr><td>column-rule-width</td><td>指定了两列的边框厚度</td></tr><tr><td>column-rule-style</td><td>指定了列与列之间的边框样式（solid | dotted）</td></tr><tr><td>column-rule-color</td><td>指定了两列的边框颜色</td></tr><tr><td>column-rule</td><td>是上述三个属性的缩写</td></tr><tr><td>column-span</td><td>指定元素跨越所有列</td></tr><tr><td>column-width</td><td>指定了列的宽度</td></tr></tbody></table></blockquote><h4 id="CSS3用户界面"><a href="#CSS3用户界面" class="headerlink" title="CSS3用户界面"></a>CSS3用户界面</h4><blockquote><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>resizing</td><td>指定一个元素是否应该由用户去调整大小</td></tr><tr><td>box-sizing</td><td>当你设置一个元素为box-sizing:border-box时，此元素的内边距和边框便不再增加它的宽度了</td></tr><tr><td>outline-offset</td><td>对轮廓进行偏移，并在超出边框边缘的位置绘制轮廓</td></tr></tbody></table></blockquote><h4 id="CSS3图片"><a href="#CSS3图片" class="headerlink" title="CSS3图片"></a>CSS3图片</h4><blockquote><ul><li>响应式图片</li></ul></blockquote><pre><code>img{    max-width:100%;    height:auto;}</code></pre><blockquote><ul><li>图片文本<br>定义图片文本的时候结合position:relative和position:absolute。</li></ul></blockquote><blockquote><ul><li>响应式图片相册<br>在这里正确用好这几个属性：<code>box-sizing:border</code>、<code>@media</code>、<code>clear:both</code></li></ul></blockquote><h4 id="CSS3弹性盒子-Flex布局"><a href="#CSS3弹性盒子-Flex布局" class="headerlink" title="CSS3弹性盒子-Flex布局"></a>CSS3弹性盒子-Flex布局</h4><blockquote><p>之前总结过一篇：<a href="https:/www.liugezhou.online/2018/08/22/Flex布局/" target="_blank" rel="noopener">Flex布局</a></p></blockquote><h4 id="CSS3多媒体查询"><a href="#CSS3多媒体查询" class="headerlink" title="CSS3多媒体查询"></a>CSS3多媒体查询</h4><blockquote><p>CSS3多媒体类型</p><table><thead><tr><th>值</th><th>描述</th></tr></thead><tbody><tr><td>all</td><td>用于所有多媒体类型设备</td></tr><tr><td>print</td><td>用于打印机</td></tr><tr><td>screen</td><td>用于电脑屏幕、平板、智能手机等</td></tr><tr><td>speech</td><td>用于屏幕阅读器</td></tr></tbody></table></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h6 id=&quot;作为一个前端开发者来说，对CSS的熟悉是基础中的基础。现如今框架眼花缭乱，炫酷的动画、美丽的UI，应接不暇，然而CSS3的本来面目是那么的简单，有很多的CSS3属性虽然特别的常见，但是灵活的运用还是需要我们对基础进行多次的夯实，本篇博客就是来对我们的CSS3的一些属性进行一个大而全的回顾。（可能大多数属性你都烂熟于心、你可以跳过它或者再次做一次温习）&quot;&gt;&lt;a href=&quot;#作为一个前端开发者来说，对CSS的熟悉是基础中的基础。现如今框架眼花缭乱，炫酷的动画、美丽的UI，应接不暇，然而CSS3的本来面目是那么的简单，有很多的CSS3属性虽然特别的常见，但是灵活的运用还是需要我们对基础进行多次的夯实，本篇博客就是来对我们的CSS3的一些属性进行一个大而全的回顾。（可能大多数属性你都烂熟于心、你可以跳过它或者再次做一次温习）&quot; class=&quot;headerlink&quot; title=&quot;作为一个前端开发者来说，对CSS的熟悉是基础中的基础。现如今框架眼花缭乱，炫酷的动画、美丽的UI，应接不暇，然而CSS3的本来面目是那么的简单，有很多的CSS3属性虽然特别的常见，但是灵活的运用还是需要我们对基础进行多次的夯实，本篇博客就是来对我们的CSS3的一些属性进行一个大而全的回顾。（可能大多数属性你都烂熟于心、你可以跳过它或者再次做一次温习）.&quot;&gt;&lt;/a&gt;作为一个前端开发者来说，对CSS的熟悉是基础中的基础。现如今框架眼花缭乱，炫酷的动画、美丽的UI，应接不暇，然而CSS3的本来面目是那么的简单，有很多的CSS3属性虽然特别的常见，但是灵活的运用还是需要我们对基础进行多次的夯实，本篇博客就是来对我们的CSS3的一些属性进行一个大而全的回顾。（可能大多数属性你都烂熟于心、你可以跳过它或者再次做一次温习）.&lt;/h6&gt;
    
    </summary>
    
      <category term="web前端" scheme="http://liugezhou.online/categories/web%E5%89%8D%E7%AB%AF/"/>
    
      <category term="HTML/CSS" scheme="http://liugezhou.online/categories/web%E5%89%8D%E7%AB%AF/HTML-CSS/"/>
    
    
      <category term="CSS3" scheme="http://liugezhou.online/tags/CSS3/"/>
    
  </entry>
  
  <entry>
    <title>每周分享第六期</title>
    <link href="http://liugezhou.online/2019/07/28/%E6%AF%8F%E5%91%A8%E5%88%86%E4%BA%AB%E7%AC%AC%E5%85%AD%E6%9C%9F/"/>
    <id>http://liugezhou.online/2019/07/28/每周分享第六期/</id>
    <published>2019-07-27T16:00:00.000Z</published>
    <updated>2019-07-28T13:30:40.029Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><strong>这里记录过去一周，我的关注以及值得记录的东西。</strong></p></blockquote><blockquote><p>本周二下午我的公众号便遭遇了灭顶之灾–永久封禁。<br>不知道是什么原因，也找不到申诉入口。<br>于是本周末就花了点时间丰富了下自己的博客，此外没有别的产出了，下面做一个小的记录。</p></blockquote><a id="more"></a><h3 id="Hexo-Next"><a href="#Hexo-Next" class="headerlink" title="Hexo || Next"></a>Hexo || Next</h3><blockquote><p>本周周末的博客搭建经验分享：<br>只需要看两个官方文档就可以了：<br><a href="https://hexo.io/zh-cn/docs/index.html" target="_blank" rel="noopener">Hexo官方文档</a><br><a href="https://theme-next.iissnan.com/" target="_blank" rel="noopener">NexT官方文档</a></p><p>此博客中用到的一些第三方服务：</p><ul><li>七牛云对象存储免费图片存储空间<br>写博客时最好是图片上传，再就是自己的图片存放地址，如果引用别的地方图片，一段时间图片地址就会失效。</li><li>LeanCode<br>在此网站注册且实名认证后，你可以为你的博客文章添加评论、文字统计等功能。</li><li>百度统计<br>在你的博客中加入<code>baidu_analytics</code>,便可以清楚地知道你的网站被访问了些什么。</li><li>TIDIO<br>Tidio Chat 是一款界面极其简洁的网页免费在线聊天工具.只需要简单的配置，你就可以在你的网站上搭建一个聊天窗口。</li></ul></blockquote><h3 id="RSS"><a href="#RSS" class="headerlink" title="RSS"></a>RSS</h3><blockquote><p>RSS（简易信息聚合）是一种消息来源格式规范，用以聚合经常发布更新数据的网站，例如博客文章、新闻、音频或视频的网摘。RSS文件（或称做摘要、网络摘要、或频更新，提供到频道）包含了全文或是节录的文字，再加上发用者所订阅之网摘布数据和授权的元数据。<br>简单来说，就是能通过类似鲜果阅读，ZAKER、Feedly这类阅读器，实现目标网站的聚合阅读。</p><p>通俗易懂的介绍RSS：<a href="https://www.ruanyifeng.com/blog/2006/01/rss.html" target="_blank" rel="noopener">如何使用RSS</a></p><p>你只需要下载一个RSS阅读器，就可以了，App Store 推荐下载：【RSS Prime】。</p><p>我的网站RSS订阅地址为：<a href="https://www.liugezhou.online/atom.xml" target="_blank" rel="noopener">https://www.liugezhou.online/atom.xml</a></p></blockquote><h3 id="7款便捷实用的CSS3工具"><a href="#7款便捷实用的CSS3工具" class="headerlink" title="7款便捷实用的CSS3工具"></a><a href="https://mp.weixin.qq.com/s/Tm6Hhn181MQkyYswMxgVzw" target="_blank" rel="noopener">7款便捷实用的CSS3工具</a></h3><blockquote><p>一些css代码在线生成工具，包括聊天气泡、Loading、triangle 、Button 、box-shadow、border-image等。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;这里记录过去一周，我的关注以及值得记录的东西。&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;本周二下午我的公众号便遭遇了灭顶之灾–永久封禁。&lt;br&gt;不知道是什么原因，也找不到申诉入口。&lt;br&gt;于是本周末就花了点时间丰富了下自己的博客，此外没有别的产出了，下面做一个小的记录。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="每周分享" scheme="http://liugezhou.online/categories/%E6%AF%8F%E5%91%A8%E5%88%86%E4%BA%AB/"/>
    
    
  </entry>
  
  <entry>
    <title>电脑更换如何继续写hexo博客</title>
    <link href="http://liugezhou.online/2019/07/24/%E7%94%B5%E8%84%91%E6%9B%B4%E6%8D%A2%E5%A6%82%E4%BD%95%E7%BB%A7%E7%BB%AD%E5%86%99hexo%E5%8D%9A%E5%AE%A2/"/>
    <id>http://liugezhou.online/2019/07/24/电脑更换如何继续写hexo博客/</id>
    <published>2019-07-23T16:00:00.000Z</published>
    <updated>2019-07-25T10:12:48.170Z</updated>
    
    <content type="html"><![CDATA[<h4 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h4><blockquote><p>之前我用hexo搭建过一个博客，不过后来由于换了电脑之后，理所应当接着在搭建好的博客上继续写，可是没有成功。</p></blockquote><blockquote><p>我当时是这么操作的：直接将原电脑博客的源文件copy到新电脑并直接部署，导致了时间的全部错乱，博客时间没有同步，当时也是查了很多资料，结果还是没有成功，于是当初便又重新搭建了现在用的这个博客。</p><p>其实当时只有在每篇文章标题上加个date字段就能解决我上述所说的问题,还是因为之前对HEXO配置什么的都没看过的原因。</p><p>然后因为这个date问题看了半天，最后在【电脑更换继续写博客】这个问题上找到了一个对于我来说最佳的方案。</p><a id="more"></a><p>这篇文章要解决总结的问题是：使用hexo搭建完博客之后 ，如果换了电脑，怎么继续写搭建好的hexo博客。</p><p>这篇总结欠了很久，这篇总结也是在我完全明白如何操作后的总结。</p></blockquote><h4 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h4><blockquote><p>首先假设的场景是这样的：你在本地搭建好了博客（你本地文件夹为blog），且已经写了一段时间的博客，然后你准备回回家中的电脑继续写博客，于是在原有的电脑上你要这么操作：</p></blockquote><blockquote><p>第一步：在你的Github博客上新建一个分支，我们设为hexo分支，并且在你的Github上将hexo分支设为默认分支。</p></blockquote><blockquote><p>第二步：先在你原来的电脑上新建一个文件夹（newBlog）且clone这个hexo分支到你本地，把除了.git之外的文件全部删掉。</p></blockquote><blockquote><p>第三步：把你博客源文件（blog下的文件）除了.deploy_git文件外全部复制到newBlog下【注意如果你之前克隆过theme中的主题文件，那么应该把主题文件中的.git文件夹删掉】</p></blockquote><blockquote><p>第四步：执行提交文件操作：<code>git add .</code> <code>git commit –m &quot;add branch&quot;</code>  <code>git push</code></p></blockquote><blockquote><p>第五步：这个时候你将要开始在newBlog这个文件下<code>hexo d</code>|| <code>git add.</code> 、<code>git push</code>等操作，之前的blog文件可以扔到垃圾箱了。</p></blockquote><h6 id="以上本地的操作完成后，你提交完代码就回家了，这个时候你到了家中（一些基础配置就不说了）："><a href="#以上本地的操作完成后，你提交完代码就回家了，这个时候你到了家中（一些基础配置就不说了）：" class="headerlink" title="以上本地的操作完成后，你提交完代码就回家了，这个时候你到了家中（一些基础配置就不说了）："></a>以上本地的操作完成后，你提交完代码就回家了，这个时候你到了家中（一些基础配置就不说了）：</h6><blockquote><p>第一步：clone你在公司<code>git push</code>的项目到你的本地。</p></blockquote><blockquote><p>第二步：<code>cd xxx.github.io</code>、<code>npm install</code>、<code>npm install hexo-deployer-git --save</code></p></blockquote><blockquote><p>第三步：<code>hexo g</code>、<code>hexo d</code>。</p></blockquote><blockquote><p>这个时候你便可以在家继续写博客了，只不过写完的时候别忘了<code>git push</code> 一下.</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;之前我用hexo搭建过一个博客，不过后来由于换了电脑之后，理所应当接着在搭建好的博客上继续写，可是没有成功。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;我当时是这么操作的：直接将原电脑博客的源文件copy到新电脑并直接部署，导致了时间的全部错乱，博客时间没有同步，当时也是查了很多资料，结果还是没有成功，于是当初便又重新搭建了现在用的这个博客。&lt;/p&gt;
&lt;p&gt;其实当时只有在每篇文章标题上加个date字段就能解决我上述所说的问题,还是因为之前对HEXO配置什么的都没看过的原因。&lt;/p&gt;
&lt;p&gt;然后因为这个date问题看了半天，最后在【电脑更换继续写博客】这个问题上找到了一个对于我来说最佳的方案。&lt;/p&gt;
    
    </summary>
    
      <category term="博客搭建" scheme="http://liugezhou.online/categories/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    
    
      <category term="Hexo" scheme="http://liugezhou.online/tags/Hexo/"/>
    
      <category term="更换电脑写博客" scheme="http://liugezhou.online/tags/%E6%9B%B4%E6%8D%A2%E7%94%B5%E8%84%91%E5%86%99%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title>微信公众号被封引发的焦虑</title>
    <link href="http://liugezhou.online/2019/07/23/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7%E8%A2%AB%E5%B0%81%E5%BC%95%E5%8F%91%E7%9A%84%E7%84%A6%E8%99%91/"/>
    <id>http://liugezhou.online/2019/07/23/微信公众号被封引发的焦虑/</id>
    <published>2019-07-22T16:00:00.000Z</published>
    <updated>2019-07-27T05:44:16.694Z</updated>
    
    <content type="html"><![CDATA[<script src="https://ajax.aspnetcdn.com/ajax/jQuery/jquery-3.4.1.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="本篇博文需要输入我之前被封的公众号名称" />    <label for="pass">本篇博文需要输入我之前被封的公众号名称</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      Welcome to my blog, enter password to read.
    
    </summary>
    
      <category term="杂感" scheme="http://liugezhou.online/categories/%E6%9D%82%E6%84%9F/"/>
    
    
      <category term="吐槽" scheme="http://liugezhou.online/tags/%E5%90%90%E6%A7%BD/"/>
    
  </entry>
  
  <entry>
    <title>每周分享第五期</title>
    <link href="http://liugezhou.online/2019/07/21/%E6%AF%8F%E5%91%A8%E5%88%86%E4%BA%AB%E7%AC%AC%E4%BA%94%E6%9C%9F/"/>
    <id>http://liugezhou.online/2019/07/21/每周分享第五期/</id>
    <published>2019-07-20T16:00:00.000Z</published>
    <updated>2019-07-25T05:36:48.081Z</updated>
    
    <content type="html"><![CDATA[<h5 id="这里记录过去一周，我的关注以及值得记录的资讯。"><a href="#这里记录过去一周，我的关注以及值得记录的资讯。" class="headerlink" title="这里记录过去一周，我的关注以及值得记录的资讯。"></a>这里记录过去一周，我的关注以及值得记录的资讯。</h5><blockquote><p><img src="http://img.liugezhou.online/20190720diwuqi.png" alt="第五期"><br>本周是周总结的第五周，记录的过程中，有时候会产生自我怀疑：记录的这些，其中的意义到底是什么？想了一通之后：<br>我觉得除了填满周末美好时光外，对时下热点关注的积累可能会在今后的某个时间点上将这些信息进行穿插使用。<br>与我个人而言，可能我正处在不知道什么是好、什么是对，什么是道理，什么是真理的这种探索时期。<br>本着【<code>不去纠正别人的三观为我当下的三观</code>】这种态度，文章基调多为记录而非评论.<br>告诫自己不要被动输入，要思考、要感受，希望自己可以慢慢成为社会生活的一名参与者。<br> <a id="more"></a></p></blockquote><h2 id="资讯"><a href="#资讯" class="headerlink" title="资讯"></a>资讯</h2><hr><h3 id="新闻栏"><a href="#新闻栏" class="headerlink" title="新闻栏"></a>新闻栏</h3><h4 id="网上抢红包要缴税，企业要收个人可免"><a href="#网上抢红包要缴税，企业要收个人可免" class="headerlink" title="网上抢红包要缴税，企业要收个人可免"></a>网上抢红包要缴税，企业要收个人可免</h4><blockquote><p>财政部、国家税务总局日前联合印发公告，对网络红包等收入是否需要缴纳个税进行了明确。根据公告，网络红包纳入礼品范围，按照“偶然所得”项目计算缴纳20%个人所得税。</p><p>此次调整仅限于企业向个人发放的带有中奖性质的网络红包，并不包括亲戚朋友之间互相赠送的网络红包。（人民日报海外版）</p></blockquote><h4 id="每日英语听力"><a href="#每日英语听力" class="headerlink" title="每日英语听力"></a>每日英语听力</h4><blockquote><p>周二,上海网信办日前就“每日英语听力”APP<code>违规转载境外时政新闻</code>、“环球老虎财经”翻炒旧闻进行所谓舆论监督，约谈两家公司并罚款。</p></blockquote><h4 id="先救人、再报警"><a href="#先救人、再报警" class="headerlink" title="先救人、再报警"></a>先救人、再报警</h4><blockquote><p>2019年7月16日3时30分，在朝阳区南四环外环主路,一小客车前部与一轮式自行机械车尾部发生碰撞，后小客车起火燃烧，造成小客车内两人死亡，两车损坏，因涉嫌过失致人死亡罪已被公安机关依法刑事拘留，案件正在进一步调查。这段视频也引发了大众对于先救人还是先报警的讨论。</p></blockquote><h4 id="张扣扣案"><a href="#张扣扣案" class="headerlink" title="张扣扣案"></a>张扣扣案</h4><blockquote><p>有不少人对张扣扣表示同情，甚至对判决结果进行质疑。部分网民认为张扣扣是为母杀人的“孝子”，而其辩护律师的辩护思路也认为张扣扣是“为母报仇”，恳请法院可以给其留一条生路。</p></blockquote><blockquote><p>7月17日上午，陕西省汉中市中级人民法院遵照最高人民法院院长签发的死刑执行命令，对在2018年除夕杀害三人的张扣扣执行了死刑。</p><p>文章来源 <a href="https://mp.weixin.qq.com/s/0fm076EZqL8SLf1INiB4kg" target="_blank" rel="noopener">张扣扣案，一堂深刻的公共普法课</a></p></blockquote><h4 id="新规栏"><a href="#新规栏" class="headerlink" title="新规栏"></a>新规栏</h4><h4 id="公职人员注意！出差餐费交通费新规来了"><a href="#公职人员注意！出差餐费交通费新规来了" class="headerlink" title="公职人员注意！出差餐费交通费新规来了"></a>公职人员注意！出差餐费交通费新规来了</h4><blockquote><p>近日，财政部办公厅、国家机关事务管理局办公室、中共中央直属机关事务管理局办公室联合印发《关于规范差旅伙食费和市内交通费收交管理有关事项的通知》（以下简称《通知》）。</p><p>分类细化差旅伙食费和市内交通费交纳标准及管理要求，规范接待单位开具凭证及收取费用管理，明确中央和地方相关部门的职责分工。《通知》自2019年8月1日起施行。</p></blockquote><blockquote><p>文章来源：<a href="https://mp.weixin.qq.com/s/0sKen1FAZuCQMOCLQmA83g" target="_blank" rel="noopener">公职人员注意​！出差餐费交通费新规来了，别踩红线​！</a>​</p></blockquote><h4 id="快递新规"><a href="#快递新规" class="headerlink" title="快递新规"></a>快递新规</h4><blockquote><p>【邮政局新规：使用智能快递箱投递应征得收件人同意】  </p></blockquote><blockquote><p>日前，国家邮政局通过了《智能快件箱寄递服务管理办法》，该办法将于2019年10月1日起施行。</p></blockquote><blockquote><p>其中明确要求，使用智能快件箱投递快件应征得收件人同意。快件出现外包装明显破损、重量与寄递详情单记载明显不符等情况，不得使用智能快件箱投递。此外还要求快递箱运营企业合理设置快件保管期限，保管期限内不得向收件人收费。</p></blockquote><blockquote><p>文章来源 <a href="https://weibo.com/1784473157/HEbhF8TTV?type=comment" target="_blank" rel="noopener">中国新闻网</a></p></blockquote><h4 id="下一个风口–养老业"><a href="#下一个风口–养老业" class="headerlink" title="下一个风口–养老业"></a>下一个风口–养老业</h4><blockquote><p>我国18年全国60岁以上人口2.49亿，占总人口的18%，到2050年我国将超过35%的人口超过60岁，大概4亿人，占亚洲老年人2/5.（世界卫生组织预测）。</p></blockquote><blockquote><p>美国养老模式：CCRC老年社区–最著名老年社区品牌【太阳城】。</p><p>日本养老模式：科技养老–截至17年，65岁以上人口占全国28%，由于“人力资源”短缺，2013年开始不再建养老院，重点放在科技养老。</p><p>德国养老模式：医养结合–全球化老龄化排名第三。德国注重为老人提供良好的医疗服务，比较良好的体系为·双元制职业教育培养体系·。</p><p>中国养老模式：正在探索–根据“60+养老产业服务平台”数据显示：截至09年上半年，我国上市公司已有超80家企业涉足养老业。产业布局主要为三块：养老地产（45.7%）、医疗健康（18.5%）、智慧养老（17.4%）—-这么看来养老还是得有资本啊 。</p><p>文章来源：<a href="https://mp.weixin.qq.com/s/i5-JHI90CFxUufhegKrUiA" target="_blank" rel="noopener">谁做中国2.49亿老人的生意</a></p></blockquote><h3 id="科技栏"><a href="#科技栏" class="headerlink" title="科技栏"></a>科技栏</h3><h4 id="大脑芯片植入"><a href="#大脑芯片植入" class="headerlink" title="大脑芯片植入"></a>大脑芯片植入</h4><blockquote><p>号称要“拯救世界”，创造特斯拉颠覆汽车业、把飞船送上太空的马斯克，又向世界宣布了一项重大成果——大脑芯片植入！</p><p>这项黑科技是通过一台神经手术机器人，安全无痛地在脑袋上穿孔，向大脑内快速植入芯片，然后通过无线装置把意念发射给外部设备，从而实现“意念控物”。</p><p>马斯克的这项黑科技，学名叫做“脑机接口”，是当前科技界最前沿的研发技术。这项技术希望能够“翻译”人脑的意识，实现人类与人类之间、人类与机器之间无障碍交流。</p></blockquote><blockquote><p>文章来源  <a href="https://mp.weixin.qq.com/s/ARGhO5YWw32xi7eAd8l3uw" target="_blank" rel="noopener">太突然！又一黑科技诞生！超级人类要来了？</a></p></blockquote><h4 id="全球最大电子烟品牌「JUUL」将进军中国"><a href="#全球最大电子烟品牌「JUUL」将进军中国" class="headerlink" title="全球最大电子烟品牌「JUUL」将进军中国"></a>全球最大电子烟品牌「JUUL」将进军中国</h4><blockquote><p>最早于 2016 年就已经开始对中国市场进行研究。</p></blockquote><blockquote><p>美国电子烟品牌「JUUL」将正式进军中国市场，已与京东达成战略合作，最晚今年 10 月，JUUL 电子烟产品会上架京东电商平台。此外，JUUL 计划在 15 个月内，在市场投放至少 1 亿美元进行品牌建设及营销工作。</p></blockquote><blockquote><p>文章来源 <a href="https://mp.weixin.qq.com/s/RQS3n430pgHUADhWFCDoEQ" target="_blank" rel="noopener">投放 1 亿美元、和京东战略合作，全球最大电子烟品牌「JUUL」将进军中国</a></p></blockquote><h4 id="微博流量流失"><a href="#微博流量流失" class="headerlink" title="微博流量流失"></a>微博流量流失</h4><blockquote><p>微博正在失去对年轻人的吸引力。</p></blockquote><blockquote><p>注意力稀缺时代，随着抖音、快手、小红书逐渐成为主流娱乐社交工具，用户有限的闲暇时间被不断割裂成多块。微博成为被切割的那一块。</p></blockquote><h4 id="Google已经取消中国搜索引擎项目"><a href="#Google已经取消中国搜索引擎项目" class="headerlink" title="Google已经取消中国搜索引擎项目"></a>Google已经取消中国搜索引擎项目</h4><blockquote><p>Google 公共政策副总裁 Karan Bhatia 称该公司已经取消了审查版搜索引擎项目 Project Dragonfly。</p></blockquote><blockquote><p>Project Dragonfly 是在去年 8 月被 The Intercept 曝光的，之后就遭到广泛的批评，Google 雇员也联合施压要求公司终止该项目。</p><p>Google 早在 2010 年就退出了中国搜索市场，但通过 Project Dragonfly Google 想要重返中国市场重新推出搜索产品，并将会根据要求审查内容。Google CEO Sundar Pichai 去年底在国会听证会上作证称，该公司目前没有计划在中国发布搜索产品。</p></blockquote><h4 id="微信iOS-7-0-5版本更新"><a href="#微信iOS-7-0-5版本更新" class="headerlink" title="微信iOS~7.0.5版本更新"></a>微信iOS~7.0.5版本更新</h4><blockquote><p>7月16日iOS版微信版本更新：可以把收藏的笔记、文章、小程序等设为浮窗，最高可设置5个。</p></blockquote><blockquote><p>安卓版截至目前，还未更新。</p></blockquote><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><h4 id="左翼右翼"><a href="#左翼右翼" class="headerlink" title="左翼右翼"></a>左翼右翼</h4><blockquote><p>传统来说，左派通常主张积极改革，主张把旧的意识形态和制度革除，从而建立新的意识形态和制度，反对派一般自认为左派；右派一般较为保守，主张稳妥、秩序、渐进、缓慢的改革方式，强调维护旧有传统，保皇党一般自认为右派。—-[知乎]</p></blockquote><h4 id="GFW"><a href="#GFW" class="headerlink" title="GFW"></a>GFW</h4><blockquote><p>防火长城（英文名称Great Firewall of China，简写为Great Firewall，缩写GFW），也称中国防火墙或中国国家防火墙，指中华人民共和国政府在其管辖因特网内部建立的多套网络审查系统的总称，包括相关行政审查系统。 首要设计者为北京邮电大学原校长方滨兴，被称为“国家防火墙之父”.</p></blockquote><blockquote><p>争议颇多。</p></blockquote><h4 id="书籍"><a href="#书籍" class="headerlink" title="书籍"></a>书籍</h4><blockquote><p><code>激荡四十年</code>—-从吴晓波老师角度学习中国近代经济企业史。</p><p>内容面设计较广，对于我国企业、经济的发展了解有一个更好的启蒙效果。自崔永元事件之后我个人比较关注以及厌恶微博现在这种娱乐至上的发展。下面摘录部分为书中提到关于微博方面的：</p><p>“尽管微博的兴起与娱乐明星的参与密不可分，然而，它的大众化则有赖于各阶层的集体卷入。越来越多的年轻人开通了自己的微博，在这里表达他们对生活中的公共事务的看法，企业在微博上重建自己的品牌阵地。甚至，官办媒体和各级政府部门都把微博当成新的传播和政务公开的窗口。全民性的参与，使得微博成为中国最热烈的舆论广场。”</p><p>“《南方人物周刊》认为，微博的现实，就是中国社会的写实，“在一个个喊冤求助的帖子背后，是渴求解决问题的心；在一条条带着强烈情绪发泄的微博后面，是无数压抑已久的灵魂；在名人的打情骂俏里面，透露的是名利场的百态。这分明就是一个微缩的社会图景”。”</p></blockquote><blockquote><p>“这本杂志还以编年体的方式记述了本年度内值得记忆的一系列微博事件，与经济有关的公共事件包括山西疫苗案、王家岭矿难、南京化工厂爆炸和宜黄血拆事件等。”</p><p>“其中，宜黄血拆是10年新浪微博上最广为人知的公众事件：9月10日，在江西抚州市宜黄县凤岗镇，31岁的女儿钟如琴、59岁的母亲罗志凤、79岁高龄的大伯叶忠诚为保卫自己的家园不被强拆，以自焚抗争。此后，钟家女儿钟如九多番寻求媒体帮助，当地政府却百般阻挠。网友在微博上开展了救援与爱心接力活动。先是借助微博的多方传播，使当地政府有所收敛，再是通过微博令钟家得到了国内一流的烧伤科大夫的救助。”<br>￼<br>“新浪微博创造了一个互联网上的“公共广场”，它在过去一年多里所搅动的舆论潮流，极大地激发了民众参与公共事务的热情，同时带有狂暴和近乎失控的原生态特征。划重点，<code>2010年的微博世界竟是最后的一次广场草根狂欢</code>。”</p></blockquote><h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h2><hr><h4 id="双峰实验"><a href="#双峰实验" class="headerlink" title="双峰实验"></a>双峰实验</h4><blockquote><p>据说「双缝实验」，曾引起物理学界大地震，爱因斯坦穷尽一辈子也无法弄明白。<br>这篇文章让我对双峰实验的过程有了一个稍微清晰的认识：</p></blockquote><blockquote><p><a href="https://mp.weixin.qq.com/s/jyTX921Uy6Zp7JzzpnhCsg" target="_blank" rel="noopener">可怕的曼德拉效应，以及双缝实验</a></p></blockquote><h4 id="baidu-netdisk-downloaderx"><a href="#baidu-netdisk-downloaderx" class="headerlink" title="baidu-netdisk-downloaderx"></a>baidu-netdisk-downloaderx</h4><blockquote><p> 一款图形界面的百度网盘不限速下载器，支持 Windows、Linux 和 Mac。  —-<a href="https://github.com/b3log/baidu-netdisk-downloaderx" target="_blank" rel="noopener">BND</a><br>百度网盘不限速客户端, golang + qt5, 跨平台图形界面—-<a href="https://github.com/peterq/pan-light" target="_blank" rel="noopener">pan-light</a></p></blockquote><h4 id="不安分的-Go-强势入侵前端"><a href="#不安分的-Go-强势入侵前端" class="headerlink" title="不安分的 Go 强势入侵前端"></a>不安分的 Go 强势入侵前端</h4><blockquote><p> Go 语言写前端 Web 应用借助的是 WebAssembly 。</p><p>那什么是 WebAssembly 呢？它也叫 wasm ，是由 Google、Microsoft、Mozilla、Apple 等几家大公司合作发起的 WebAssembly 是一种新的字节码格式，主流浏览器都已经支持 WebAssembly。和 JS 需要解释执行不同，WebAssembly 字节码和底层机器码很相似可快速装载运行，因此性能相对于 JS 解释执行大大提升。也就是说 WebAssembly 并不是一门编程语言，而是一份字节码标准，需要用高级编程语言编译出字节码放到 WebAssembly 虚拟机中才能运行 。所以，理论上讲只要能编译成 WebAssembly 字节码的高级语言都可以写 Web 应用程序。</p></blockquote><blockquote><p>而 Go 的前端框架叫：Vugo 。它是一个 Go 语言开发库，可以很容易地使用 Go 语言编写 Web 用户界面.</p></blockquote><blockquote><p>文章来源 :<a href="https://mp.weixin.qq.com/s/Z9fbVFMTVDA-VPMG2ND5cg" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/Z9fbVFMTVDA-VPMG2ND5cg</a></p></blockquote><h4 id="登月源码登顶Github-Top1"><a href="#登月源码登顶Github-Top1" class="headerlink" title="登月源码登顶Github Top1"></a>登月源码登顶Github Top1</h4><blockquote><p>就像前几天一个外国程序员小哥吐槽和抱怨Github上发现页，排行榜中文项目太多一样。美国人登月代码开源，也惨遭中文灌水。评论内容清一色的类娱乐网站评论、还有打广告者。</p></blockquote><h4 id="iconfont在小程序中的使用"><a href="#iconfont在小程序中的使用" class="headerlink" title="iconfont在小程序中的使用"></a>iconfont在小程序中的使用</h4><blockquote><p>本周博文输出：简单总结了一下—-<a href="https://www.liugezhou.online/2019/07/17/icofont/" target="_blank" rel="noopener">iconfont在小程序中的使用</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;这里记录过去一周，我的关注以及值得记录的资讯。&quot;&gt;&lt;a href=&quot;#这里记录过去一周，我的关注以及值得记录的资讯。&quot; class=&quot;headerlink&quot; title=&quot;这里记录过去一周，我的关注以及值得记录的资讯。&quot;&gt;&lt;/a&gt;这里记录过去一周，我的关注以及值得记录的资讯。&lt;/h5&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;img src=&quot;http://img.liugezhou.online/20190720diwuqi.png&quot; alt=&quot;第五期&quot;&gt;&lt;br&gt;本周是周总结的第五周，记录的过程中，有时候会产生自我怀疑：记录的这些，其中的意义到底是什么？想了一通之后：&lt;br&gt;我觉得除了填满周末美好时光外，对时下热点关注的积累可能会在今后的某个时间点上将这些信息进行穿插使用。&lt;br&gt;与我个人而言，可能我正处在不知道什么是好、什么是对，什么是道理，什么是真理的这种探索时期。&lt;br&gt;本着【&lt;code&gt;不去纠正别人的三观为我当下的三观&lt;/code&gt;】这种态度，文章基调多为记录而非评论.&lt;br&gt;告诫自己不要被动输入，要思考、要感受，希望自己可以慢慢成为社会生活的一名参与者。&lt;br&gt;
    
    </summary>
    
      <category term="每周分享" scheme="http://liugezhou.online/categories/%E6%AF%8F%E5%91%A8%E5%88%86%E4%BA%AB/"/>
    
    
  </entry>
  
  <entry>
    <title>iconfont在小程序端的使用</title>
    <link href="http://liugezhou.online/2019/07/17/iconfont%E5%9C%A8%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%AB%AF%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://liugezhou.online/2019/07/17/iconfont在小程序端的使用/</id>
    <published>2019-07-16T16:00:00.000Z</published>
    <updated>2019-07-27T05:23:07.274Z</updated>
    
    <content type="html"><![CDATA[<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><blockquote><p>最近自己在写一个小程序，在使用iconfont的时候，出了一点小问题，解决的过程是简单、高效的。<br>想到之前就使用过iconfont，不过当时只是一笔带过。而今考虑到在项目中小icon的使用广泛，有必要简单总结一下使用iconfont方面的。<br>这篇博文不属于技术范畴，只能说是一个小小的技能吧–在个人开发中可以起到一个很好的技能拓展。</p><a id="more"></a></blockquote><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><blockquote><p>我们在开发过程中会用到很多的小图标，作为一个不会PS的前端，或者没有美工经验的前端，<code>iconfont-阿里巴巴矢量图标库</code>里面有很多的小图标可供我们选择使用。</p></blockquote><h3 id="范围"><a href="#范围" class="headerlink" title="范围"></a>范围</h3><blockquote><p><code>iconfont-阿里巴巴矢量图标库</code>地址：<a href="https://www.iconfont.cn/" target="_blank" rel="noopener">https://www.iconfont.cn/</a><br>可供web端、Android、iOS端使用。<br>官方文档的使用说明很明确：<a href="https://www.iconfont.cn/help/detail?spm=a313x.7781069.1998910419.d8d11a391&amp;helptype=code" target="_blank" rel="noopener">https://www.iconfont.cn/help/detail?spm=a313x.7781069.1998910419.d8d11a391&amp;helptype=code</a><br>本文章只讨论小程序端关于Unicode的使用</p></blockquote><h3 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h3><blockquote><p>这里记录两种使用方法，可直接看最后的在线链接使用，两步搞定。</p></blockquote><h3 id="本地使用"><a href="#本地使用" class="headerlink" title="本地使用"></a>本地使用</h3><h5 id="步骤一"><a href="#步骤一" class="headerlink" title="步骤一"></a>步骤一</h5><blockquote><ul><li>将选好的小图标进行代码下载（此下载文件为1️⃣）</li><li>打开这个平台<a href="transfonter.org">transfonter.org/</a></li><li>点击Add fonts按钮,加载ttf格式的那个文件</li><li>将下边的base64 encode改为on</li><li>点击Convert按钮 进行转换</li><li>转换后点击download下载，（此文件为2️⃣）</li></ul></blockquote><h5 id="步骤二"><a href="#步骤二" class="headerlink" title="步骤二"></a>步骤二</h5><blockquote><ul><li>在小程序本地新建 icon.wxss文件，并在app.wxss引入</li><li>下载下来的文件（文件2️⃣）中有个 stylesheet.css文件，将其中代码copy至icon.wxss（注意这一步也可以直接在你新建的项目中找到在线连接、直接复制copy到stylesheet中也可以）</li><li>将下载的文件1️⃣中除了@font-face中的其它部分，copy至icon.wxss便可使用</li><li>在wxml中：<code>&lt;text class=&quot;iconfont icon-time&quot; style=&quot;font-size:30rpx;color:black&quot;&gt;&lt;/text&gt;</code></li></ul></blockquote><h3 id="在线链接使用"><a href="#在线链接使用" class="headerlink" title="在线链接使用"></a>在线链接使用</h3><blockquote><ul><li>将选好的小图标进行代码下载</li><li>下载好的文件中<code>iconfont.css</code>种所有代码copy至iconfont.wxss</li><li>在网站你的项目中找到在线链接，copy该<code>@font-face</code>替换<code>iconfont.css</code>中的<code>@font-face</code></li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;最近自己在写一个小程序，在使用iconfont的时候，出了一点小问题，解决的过程是简单、高效的。&lt;br&gt;想到之前就使用过iconfont，不过当时只是一笔带过。而今考虑到在项目中小icon的使用广泛，有必要简单总结一下使用iconfont方面的。&lt;br&gt;这篇博文不属于技术范畴，只能说是一个小小的技能吧–在个人开发中可以起到一个很好的技能拓展。&lt;/p&gt;
    
    </summary>
    
      <category term="web前端" scheme="http://liugezhou.online/categories/web%E5%89%8D%E7%AB%AF/"/>
    
      <category term="小程序" scheme="http://liugezhou.online/categories/web%E5%89%8D%E7%AB%AF/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
    
      <category term="iconfont" scheme="http://liugezhou.online/tags/iconfont/"/>
    
  </entry>
  
  <entry>
    <title>每周分享第四期</title>
    <link href="http://liugezhou.online/2019/07/14/%E6%AF%8F%E5%91%A8%E5%88%86%E4%BA%AB%E7%AC%AC%E5%9B%9B%E6%9C%9F/"/>
    <id>http://liugezhou.online/2019/07/14/每周分享第四期/</id>
    <published>2019-07-13T16:00:00.000Z</published>
    <updated>2019-07-25T05:37:12.435Z</updated>
    
    <content type="html"><![CDATA[<h5 id="这里记录过去一周，我的关注以及值得记录的资讯。"><a href="#这里记录过去一周，我的关注以及值得记录的资讯。" class="headerlink" title="这里记录过去一周，我的关注以及值得记录的资讯。"></a>这里记录过去一周，我的关注以及值得记录的资讯。</h5><p> <img src="http://img.liugezhou.online/qiuguanzhu.jpg" alt="求关注"></p><h2 id="资讯"><a href="#资讯" class="headerlink" title="资讯"></a>资讯</h2><h5 id="ETC指标"><a href="#ETC指标" class="headerlink" title="ETC指标"></a>ETC指标</h5><blockquote><p>国家出面推广ETC，近日发现朋友圈有关ETC的推广很多。</p><p>据说今年关于ECT指标已经下达，2019年新增ETC开户量，要达到一亿户（新增），截至今年3月份，我国ETC用户的总量才8072万。<br>过去6年，全国所有银行才开了7656万户ETC，今年一年就要开一亿户，银行指标亚历山大啊。</p><a id="more"></a></blockquote><blockquote><p>文章来源：<a href="https://mp.weixin.qq.com/s/__Cdn17lSOIqO30rciYuOg" target="_blank" rel="noopener">帮帮银行吧，ETC滞销了</a></p><p><img src="http://img.liugezhou.online/ETC190713.jpg" alt="ETC190713"></p></blockquote><h5 id="垃圾桶卖“疯”！有人一天接单2000万"><a href="#垃圾桶卖“疯”！有人一天接单2000万" class="headerlink" title="垃圾桶卖“疯”！有人一天接单2000万"></a><a href="https://mp.weixin.qq.com/s/nDXSsBx4p4LDCf721gu3pQ" target="_blank" rel="noopener">垃圾桶卖“疯”！有人一天接单2000万</a></h5><blockquote><p>垃圾分类搞得红红火火，垃圾桶卖到脱销。相信很快就有一些有关垃圾的衍生品开始受到市场青睐。</p><p>当然，无可否认，对于很多人来说，这是一个巨大的商机。新产品前面几个月的利润高，但很快会被模仿，价格就跌了。</p><p>根据住建部要求，接下来一年多时间内，还有46个重点城市也要步入垃圾分类“最严时代”，预计未来五年内，全国的市场都会释放巨大的需求。<br><img src="http://img.liugezhou.online/garbage190713.png" alt="garbage190713"></p></blockquote><h5 id="研究称多达1325个安卓应用未经许可收集用户数据"><a href="#研究称多达1325个安卓应用未经许可收集用户数据" class="headerlink" title="研究称多达1325个安卓应用未经许可收集用户数据"></a>研究称多达1325个安卓应用未经许可收集用户数据</h5><blockquote><p>国际计算机科学研究所（ICSI）的研究人员发现，即使是在用户明确拒绝授权之后，仍有多达1325个安卓应用能绕过限制，从用户设备上收集精确的地理位置数据和手机序列号等信息。  </p><p>ICSI可用安全和隐私研究主任塞尔日·埃格尔曼表示，研究人员已在去年9月就这些问题向谷歌和美国联邦贸易委员会发出了通知。谷歌回应称，该公司将设法解决Android Q中的问题，这个操作系统预计将于今年发布。</p></blockquote><blockquote><p><a href="https://mp.weixin.qq.com/s/AZ92Q8JVu-hRomIjIav94Q" target="_blank" rel="noopener">文章来源</a></p></blockquote><h5 id="鸿蒙系统未确认把鸿蒙发展为手机系统"><a href="#鸿蒙系统未确认把鸿蒙发展为手机系统" class="headerlink" title="鸿蒙系统未确认把鸿蒙发展为手机系统"></a>鸿蒙系统未确认把鸿蒙发展为手机系统</h5><blockquote><p>7月12日，据报道，华为在《2018年可持续发展报告》的发布会上指出，鸿蒙系统是为物联网开发的，用于自动驾驶、远程医疗等低时延场景。华为手机还是把开放的安卓系统和生态作为首选，如果美国不允许华为使用安卓，华为还没有确定是否会把鸿蒙发展为手机系统。</p><p><img src="http://img.liugezhou.online/HWHongmeng.jpg" alt="HWHongmeng0713"></p></blockquote><h5 id="啤酒肚与喝啤酒并没有直接的关系"><a href="#啤酒肚与喝啤酒并没有直接的关系" class="headerlink" title="啤酒肚与喝啤酒并没有直接的关系"></a>啤酒肚与喝啤酒并没有直接的关系</h5><blockquote><p>由于啤酒的种类不同，含热量多少存在差异，一瓶600ml的啤酒热量为160大卡左右，相当于一碗米饭的热量.</p><p>啤酒的热量并不高，而且啤酒中不含有使人体发胖的高脂肪，所以喝啤酒本身是不会使人发胖的。</p><p>目前国际上普遍认为“啤酒肚”的成因是现代人深睡眠阶段减少，导致荷尔蒙的分泌减少，荷尔蒙的缺乏使体内脂肪增加并聚集于腹部。此外，长时间坐着办公、缺乏运动，容易造成腹部脂肪的囤积。</p></blockquote><h2 id="扩散"><a href="#扩散" class="headerlink" title="扩散"></a>扩散</h2><hr><h5 id="团圆系统"><a href="#团圆系统" class="headerlink" title="团圆系统"></a>团圆系统</h5><blockquote><p>公安部儿童失踪信息紧急发布平台（“团圆”系统）是为建立儿童失踪信息发布的权威渠道，发动群众搜集拐卖犯罪线索，公安部刑事侦查局打拐办在阿里巴巴集团的技术支持下开发，用于全国各地一线打拐民警即时上报各地儿童失踪信息。该平台于2016年5月15日正式上线.(来自百科)</p><p>这篇文章是关于团圆系统的介绍、扩展：<a href="https://mp.weixin.qq.com/s/kvUY27-0fdkGTFN1j4FSIw" target="_blank" rel="noopener">失踪儿童找回率98%的公安部神器:每人手机都有,却很少有人知道它存在</a></p><p>网友普及：给刚出生的孩子办一个身份证，现在身份证都需要录指纹。只要办过身份证的孩子走失后，采集指纹可以秒找到孩子的信息。我同学在某派出所当户籍警，让我替她宣传一下。小朋友随时都可以去办身份证哟，没有年龄限制的。</p><p><img src="http://img.liugezhou.online/tuanyuan090713.jpg" alt="团圆系统0713"></p></blockquote><h2 id="鸡汤"><a href="#鸡汤" class="headerlink" title="鸡汤"></a>鸡汤</h2><hr><blockquote><p>如果你觉得自己已经很努力，可还是很辛苦，那么让自己放松一点，放过自己，不是你的态度出了问题，而是你的战略。</p></blockquote><blockquote><p>有两种人需要你主动去接触，一个是比你优秀的人，一个是正能量的人.</p></blockquote><blockquote><p>世界上本就没有标准答案，如果有，那就是以你想要的方式度过一生.</p></blockquote><blockquote><p>两个人如果想长远的相互陪伴着走下去，只依靠喜欢是不够的，爱的真谛其实是学会温柔的包容和相互的体谅。</p></blockquote><blockquote><p>知道很多大道理，却做不到。不是因为你知道得太多，而是因为你知道的不够多.</p></blockquote><blockquote><p>活在未来，而不是当下.<br>1.你对未来有个预测；<br>2.那个预测需要时间才能得到结果；<br>3你笃信你的预测是正确的；<br>4.于是你提前按照那个预测的结果行动，选择，思考；<br>5.你终将走到那个结果出现的时刻；<br>6.最终你的预测是正确的；<br>7.那么，由于你提前按未来正确的结果行动、选择、思考，于是，在相当长一段时间里，你的生活中的一部分，就是“活在未来”的。（来自新东方某老师）</p></blockquote><h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h2><hr><h5 id="AMP-工具"><a href="#AMP-工具" class="headerlink" title="AMP 工具"></a>AMP 工具</h5><blockquote><p>AMP是加速移动页面（Accelerated Mobile Pages）的简称，Google对其的描述为：</p></blockquote><blockquote><p>AMP是一个Web组件框架，你可以利用它轻松创建用户至上的网站、故事、电子邮件和广告。<br>前不久，谷歌因强制开发者使用自有开发工具而遭到了众多开发者的抨击，<a href="https://mp.weixin.qq.com/s/zn88mFg8P1wiPFPoPQTsBA" target="_blank" rel="noopener">文章来源</a></p></blockquote><h5 id="robots-txt文件"><a href="#robots-txt文件" class="headerlink" title="robots.txt文件"></a>robots.txt文件</h5><blockquote><p>robots.txt文件应该放在网站根目录下，有些网站，有一些页面是站长不想被任何搜索引擎收录的，所以才有了这个robots文件。<br>搜索引擎通过一种程序“蜘蛛”（又称spider），自动访问互联网上的网页并获取网页信息。您可以在您的网站中创建一个纯文本文件robots.txt，在这个文件中声明该网站中不想被蜘蛛访问的部分，这样，该网站的部分或全部内容就可以不被搜索引擎访问和收录了，或者可以通过robots.txt指定使搜索引擎只收录指定的内容。搜索引擎爬行网站第一个访问的文件就是robots.txt。</p></blockquote><h5 id="Vue-js-第三方常用插件"><a href="#Vue-js-第三方常用插件" class="headerlink" title="Vue.js 第三方常用插件"></a>Vue.js 第三方常用插件</h5><blockquote><p>这篇文章介绍几个Vue.js常用的插件和用法，简单且实用，可以直接拿来直接用！ </p><p><a href="https://mp.weixin.qq.com/s/47F9VnexISswo2Ne9cc_5g" target="_blank" rel="noopener">Vue.js 第三方常用插件盘点</a></p></blockquote><h5 id="前端必会！四步带你吃透浏览器渲染基本原理"><a href="#前端必会！四步带你吃透浏览器渲染基本原理" class="headerlink" title="前端必会！四步带你吃透浏览器渲染基本原理"></a><a href="https://mp.weixin.qq.com/s/PNJ7xCTh15vtdFHWlDk5gw" target="_blank" rel="noopener">前端必会！四步带你吃透浏览器渲染基本原理</a></h5><blockquote><p>浏览器渲染基本原理是作为一个前端开发者必须要了解的知识点。</p></blockquote><h5 id="五个-JavaScript-小技巧"><a href="#五个-JavaScript-小技巧" class="headerlink" title="五个 JavaScript 小技巧"></a><a href="https://www.johnstewart.dev/five-programming-patterns-i-like/" target="_blank" rel="noopener">五个 JavaScript 小技巧</a></h5><blockquote><p>作者总结了五个 JavaScript 代码写法的技巧。</p></blockquote><h5 id="开源许可证"><a href="#开源许可证" class="headerlink" title="开源许可证"></a>开源许可证</h5><blockquote><p> Github上新建项目的时候，会让添加开源许可证，一搬情况下我们自己建项目的时候：<code>Add a licence:None</code>,即：不添加许可证。<br>刚开始的时候我们都不会在意这个许可证到底是什么，但是随着项目专业、职业化，我们一定要对开源许可证有个清楚的了解。</p><p>我小小的总结了一篇博文，简单了解了一下。<a href="https://www.liugezhou.online/2019/07/11/Open%20Source%20License/" target="_blank" rel="noopener">开源许可证介绍</a></p><p><img src="http://img.liugezhou.online/licence.jpg" alt="开源许可证"></p></blockquote><h5 id="最近搭建博客遇到的问题"><a href="#最近搭建博客遇到的问题" class="headerlink" title="最近搭建博客遇到的问题"></a>最近搭建博客遇到的问题</h5><blockquote><p>在家重新搭建博客时候又遇到了一些问题，写了篇文章简单记录了一下：<br><a href="https://www.liugezhou.online/2019/07/11/%E6%88%91%E7%9A%84%E5%8D%9A%E5%AE%A2%E5%9B%BE%E7%89%87%E6%9D%A5%E8%87%AA%E4%B8%83%E7%89%9B%E4%BA%91%E5%AD%98%E5%82%A8/" target="_blank" rel="noopener">最近搭建博客遇到的一系列问题</a></p></blockquote><h2 id="收藏"><a href="#收藏" class="headerlink" title="收藏"></a>收藏</h2><h5 id="Table-Convert-Online"><a href="#Table-Convert-Online" class="headerlink" title="Table Convert Online"></a>Table Convert Online</h5><blockquote><p>一个网页工具，可以在线表格转成 Markdown、JSON、HTML、XML、YAML 等数据格式，并支持格式之间互相转化。(@Fechin 投稿)</p><p>网站地址：<a href="https://tableconvert.com/" target="_blank" rel="noopener">https://tableconvert.com/</a></p></blockquote><h5 id="APIJSON"><a href="#APIJSON" class="headerlink" title="APIJSON"></a>APIJSON</h5><blockquote><p>自动化接口管理工具，后端自动生成接口文档，前端可以定制任何数据、任何结构.<br>Github项目地址：<a href="https://github.com/APIJSON/APIJSON" target="_blank" rel="noopener">https://github.com/APIJSON/APIJSON</a></p></blockquote><h5 id="算法可视化"><a href="#算法可视化" class="headerlink" title="算法可视化"></a>算法可视化</h5><blockquote><p>该网站收集了50多种算法，每种算法都有可视化动画和示例代码。<br>网站地址：<a href="https://algorithm-visualizer.org/branch-and-bound/binary-search" target="_blank" rel="noopener">https://algorithm-visualizer.org/branch-and-bound/binary-search</a></p></blockquote><h5 id="世界有多大，取决于你认识和见过多少人和事。"><a href="#世界有多大，取决于你认识和见过多少人和事。" class="headerlink" title="世界有多大，取决于你认识和见过多少人和事。"></a>世界有多大，取决于你认识和见过多少人和事。</h5><p><img src="http://img.liugezhou.online/weChatPublicSearch.png" alt="六个周"></p>]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;这里记录过去一周，我的关注以及值得记录的资讯。&quot;&gt;&lt;a href=&quot;#这里记录过去一周，我的关注以及值得记录的资讯。&quot; class=&quot;headerlink&quot; title=&quot;这里记录过去一周，我的关注以及值得记录的资讯。&quot;&gt;&lt;/a&gt;这里记录过去一周，我的关注以及值得记录的资讯。&lt;/h5&gt;&lt;p&gt; &lt;img src=&quot;http://img.liugezhou.online/qiuguanzhu.jpg&quot; alt=&quot;求关注&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;资讯&quot;&gt;&lt;a href=&quot;#资讯&quot; class=&quot;headerlink&quot; title=&quot;资讯&quot;&gt;&lt;/a&gt;资讯&lt;/h2&gt;&lt;h5 id=&quot;ETC指标&quot;&gt;&lt;a href=&quot;#ETC指标&quot; class=&quot;headerlink&quot; title=&quot;ETC指标&quot;&gt;&lt;/a&gt;ETC指标&lt;/h5&gt;&lt;blockquote&gt;
&lt;p&gt;国家出面推广ETC，近日发现朋友圈有关ETC的推广很多。&lt;/p&gt;
&lt;p&gt;据说今年关于ECT指标已经下达，2019年新增ETC开户量，要达到一亿户（新增），截至今年3月份，我国ETC用户的总量才8072万。&lt;br&gt;过去6年，全国所有银行才开了7656万户ETC，今年一年就要开一亿户，银行指标亚历山大啊。&lt;/p&gt;
    
    </summary>
    
      <category term="每周分享" scheme="http://liugezhou.online/categories/%E6%AF%8F%E5%91%A8%E5%88%86%E4%BA%AB/"/>
    
    
  </entry>
  
  <entry>
    <title>最近搭建博客遇到的一系列问题</title>
    <link href="http://liugezhou.online/2019/07/11/%E6%9C%80%E8%BF%91%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E9%81%87%E5%88%B0%E7%9A%84%E4%B8%80%E7%B3%BB%E5%88%97%E9%97%AE%E9%A2%98/"/>
    <id>http://liugezhou.online/2019/07/11/最近搭建博客遇到的一系列问题/</id>
    <published>2019-07-10T16:00:00.000Z</published>
    <updated>2019-07-25T05:35:12.504Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>最近在重新搭博客的时候，发生了一系列问题，今天抓紧记录下。</p></blockquote><h6 id="环境介绍"><a href="#环境介绍" class="headerlink" title="环境介绍"></a>环境介绍</h6><blockquote><p>首先介绍一下我的博客部署：</p><p>我的博客是通过hexo搭建、上传至Github上，之前的博客访问便都是：<a href="https://liugezhou.github.io" target="_blank" rel="noopener">https://liugezhou.github.io</a></p><p>但是最新搭建的这个博客，我想给自己已有的域名进行绑定：liugezhou.online.</p><a id="more"></a><p>于是，查找了一些资料，知道需要将我的域名进行解析， 需要添加 CNAME 记录。</p><p>在域名解析的时候，发现其实没服务器什么事，直接在解析设置上添加两条记录（并暂停其它的一些配置）：</p></blockquote><table><thead><tr><th align="left">记录类型</th><th align="left">主机记录</th><th align="left">解析线路</th><th align="left">记录值</th></tr></thead><tbody><tr><td align="left">A</td><td align="left">@</td><td align="left">默认</td><td align="left">192.30.252.153</td></tr><tr><td align="left">CNAME</td><td align="left">www</td><td align="left">默认</td><td align="left">liugezhou.github.io</td></tr></tbody></table><blockquote><p>我也记不清为什么是这么配置了，总之这个时候我的个人域名便可以直接访问我的博客内容了。</p></blockquote><h6 id="问题出现"><a href="#问题出现" class="headerlink" title="问题出现"></a>问题出现</h6><blockquote><p>在写博客的时候，避免不了要使用图片，于是我专门在Github上建了个仓库放图片，这样我每次需要插入图片的时候，直接使用Markdown语法引入图片便好了。<br>用这样的方法，<code>在github网站上访问项目博客文件</code>的时候，看md文件的确是可以访问到图片的。</p><p>但是用HEXO搭建的博客网站，其中图片便死活不出来，就这样写了两篇文章后，感觉是真难受。</p><p>一篇文章怎么可以没有图片呢？<br>怎么可以没有自己上传的图片呢？<br>怎么可以总是引用别人的图片地址呢？</p></blockquote><h6 id="解决图片存储问题"><a href="#解决图片存储问题" class="headerlink" title="解决图片存储问题"></a>解决图片存储问题</h6><blockquote><p>七牛云有个免费存储图片的功能–使我可以便于链接访问。</p></blockquote><blockquote><p>这里记录的我使用到它所做的简单步骤。</p></blockquote><blockquote><p>1️⃣  不管你用什么方法首先登录七牛云网站，不管你用什么方法首先有个自己的域名。</p></blockquote><blockquote><p>2️⃣  进入首页–查找产品–对象存储–立即使用–新建存储空间</p></blockquote><blockquote><p>3️⃣  绑定域名[融合 CDN 加速域名] （重点⭐⭐⭐）<br>这里又需要在域名控制台配置一下CNAME，但是我之前已经将Github与liugehzou.online的域名使用了一次CANME,于是犯了嘀咕。。  </p><p>继续，查阅<a href="https://developer.qiniu.com/fusion/kb/1322/how-to-configure-cname-domain-name" target="_blank" rel="noopener">官方资料</a>、等资料，经过多次尝试：</p></blockquote><blockquote><p>绑定域名选择【普通域名】、加速域名设置为：【img.liugezhou.online】,然后到这里在七牛云上的配置便结束！</p></blockquote><blockquote><p>接着进入域名管理平台，进行域名解析：<br>同上，只需要添加一条记录即可：</p></blockquote><table><thead><tr><th align="left">记录类型</th><th align="left">主机记录</th><th align="left">解析线路</th><th align="left">记录值</th></tr></thead><tbody><tr><td align="left">CNAME</td><td align="left">img</td><td align="left">默认</td><td align="left">img.liugezhou.online.qiniudns.com</td></tr></tbody></table><blockquote><p>这时候回到七牛云平台，点击内容管理，直接上传照片，然后查看地址便可以访问了。<br>这期间还有一个加水印的功能，我试了一下没加上，这个应该是后台上传图片的时候才有效，也罢，到此最起码解决了图片的上传问题。</p></blockquote><h6 id="博客遗留问题"><a href="#博客遗留问题" class="headerlink" title="博客遗留问题"></a>博客遗留问题</h6><blockquote><p>之前我的博客在另一台电脑上进行的部署，后来我换电脑后，出了一些状况。<br>就是：换了台电脑我不能很好的部署上传了，原因为文章的发布时间都错乱了，这也是导致我重新部署博客的原因。</p></blockquote><blockquote><p>但是，如果我再换电脑是不是意味着我还有继续重新部署，博客文章归为0呢？<br>当然不是，查阅了一些资料后，我知道情况是这样的：</p></blockquote><blockquote><p>首先HEXO博客搭建上传至Github使用的命令是hexo clean &amp;&amp; hexo g &amp;&amp; hexo d,这时候上传到Github上的只是由HEXO生成的静态文件，而本地的关于hexo的文件其实还是在本地的，这个时候就需要在liugezhou.github.io的项目上，再建一个分支，将本地的HEXO项目上传至另一个分支，每次提交代码的时候hexo d部署到主分支，本地的文件提交到新建的分支，这样在其它电脑上再写博客的时候，只需要将新建的那个分支上的代码下载到本地即可。（这里说的比较混乱，因为这里我现在还没有新建分支提代码，这里只是记录一下思路，待有兴趣或者迫不得已的时候再去实践） </p></blockquote><blockquote><p>行吧，大概就是这个样子。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;最近在重新搭博客的时候，发生了一系列问题，今天抓紧记录下。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h6 id=&quot;环境介绍&quot;&gt;&lt;a href=&quot;#环境介绍&quot; class=&quot;headerlink&quot; title=&quot;环境介绍&quot;&gt;&lt;/a&gt;环境介绍&lt;/h6&gt;&lt;blockquote&gt;
&lt;p&gt;首先介绍一下我的博客部署：&lt;/p&gt;
&lt;p&gt;我的博客是通过hexo搭建、上传至Github上，之前的博客访问便都是：&lt;a href=&quot;https://liugezhou.github.io&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://liugezhou.github.io&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;但是最新搭建的这个博客，我想给自己已有的域名进行绑定：liugezhou.online.&lt;/p&gt;
    
    </summary>
    
      <category term="博客搭建" scheme="http://liugezhou.online/categories/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    
    
      <category term="博客问题总结" scheme="http://liugezhou.online/tags/%E5%8D%9A%E5%AE%A2%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>开源许可证介绍</title>
    <link href="http://liugezhou.online/2019/07/11/%E5%BC%80%E6%BA%90%E8%AE%B8%E5%8F%AF%E8%AF%81%E4%BB%8B%E7%BB%8D/"/>
    <id>http://liugezhou.online/2019/07/11/开源许可证介绍/</id>
    <published>2019-07-10T16:00:00.000Z</published>
    <updated>2019-07-25T07:21:22.615Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Github上新建项目的时候，会让添加开源许可证，一搬情况下我们自己建项目的时候：<code>Add a licence:None</code>,即：不添加许可证。<br>刚开始的时候我们都不会在意这个许可证到底是什么，但是随着项目专业、职业化，我们一定要d对开源许可证有个清楚的了解。<br>那么，现在就动脑、动手记录一下关于开源许可证的小介绍。</p><a id="more"></a></blockquote><h5 id="分析图"><a href="#分析图" class="headerlink" title="分析图"></a>分析图</h5><blockquote><p>乌克兰程序员Paul Bagwell，画了一张分析图，说明应该怎么选择。只用两分钟，你就能搞清楚这六种许可证之间的最大区别。<br>下面的图片是来自阮一峰博客制作的中文版，请点击看大图。</p></blockquote><blockquote><p><img src="http://img.liugezhou.online/licence.jpg" alt="Licence"></p><p>这里介绍的是最流行的五种开源许可证：  MIT BSD  Apache GPL  LGPL </p></blockquote><h5 id="MIT"><a href="#MIT" class="headerlink" title="MIT"></a>MIT</h5><blockquote><p>非常宽松的许可证，就是说你什么都可以干，但是开发方不负责质量，相当于免责声明。<br>MIT内容与三条款BSD许可证（3-clause BSD license）内容颇为近似，但是赋予软件被授权人更大的权利与更少的限制。<br>应用该许可证的项目：jQuery Rails Express Lua等</p></blockquote><h5 id="BSD"><a href="#BSD" class="headerlink" title="BSD"></a>BSD</h5><blockquote><p>也是宽松的协议，但比起MIT，BSD不允许软件的衍生版用原作者名字促销，BSD依然是一个免责声明，与MIT相比差异很少。<br>Javascript常用BSD许可协议。因为javascript库很多，替代品也多。作者要做的仅仅是免责而已。</p></blockquote><h5 id="Apache"><a href="#Apache" class="headerlink" title="Apache"></a>Apache</h5><blockquote><p>Apache的许可很长，比BSD和MIT要严格不少,需要保留全部的原始版权，如果修改，则需要加上主要的修改通知。</p></blockquote><h5 id="GPL"><a href="#GPL" class="headerlink" title="GPL"></a>GPL</h5><blockquote><p>GPL是常用许可协议中最严格的。<br>GPL最最重要的一条就是GPL的衍生品也必须是GPL协议，也就是说GPL协议发布的软件，其后继版本将都是GPL.<br>Linux就是GPL。</p></blockquote><h5 id="LGPL"><a href="#LGPL" class="headerlink" title="LGPL"></a>LGPL</h5><blockquote><p>GPL过于严格于是GUN发布了LGPL这个限制较少的许可证。<br>LGPL和GPL最大的不同是LGPL允许在私有软件上使用它，而GPL只允许在自由软件上使用。<br>如果你使用一个LGPL下的库，你需要遵循LGOL，如果仅仅是连接这个库，则不需要遵循LGPL。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Github上新建项目的时候，会让添加开源许可证，一搬情况下我们自己建项目的时候：&lt;code&gt;Add a licence:None&lt;/code&gt;,即：不添加许可证。&lt;br&gt;刚开始的时候我们都不会在意这个许可证到底是什么，但是随着项目专业、职业化，我们一定要d对开源许可证有个清楚的了解。&lt;br&gt;那么，现在就动脑、动手记录一下关于开源许可证的小介绍。&lt;/p&gt;
    
    </summary>
    
      <category term="编程概念类" scheme="http://liugezhou.online/categories/%E7%BC%96%E7%A8%8B%E6%A6%82%E5%BF%B5%E7%B1%BB/"/>
    
    
      <category term="Licence" scheme="http://liugezhou.online/tags/Licence/"/>
    
  </entry>
  
  <entry>
    <title>每周分享第三期</title>
    <link href="http://liugezhou.online/2019/07/07/%E6%AF%8F%E5%91%A8%E5%88%86%E4%BA%AB%E7%AC%AC%E4%B8%89%E6%9C%9F/"/>
    <id>http://liugezhou.online/2019/07/07/每周分享第三期/</id>
    <published>2019-07-06T16:00:00.000Z</published>
    <updated>2019-07-25T05:32:43.517Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>这里记录过去一周，我的关注以及值得记录的资讯。</p><a id="more"></a></blockquote><h2 id="News"><a href="#News" class="headerlink" title="News"></a>News</h2><h4 id="电竞"><a href="#电竞" class="headerlink" title="电竞"></a>电竞</h4><blockquote><p>人社部报告，未来5年中国电竞需求接近200万人，目前从业人员超过50万，大部分处于16-22岁，86%从业者薪资是当地平均工资的1-3倍。中传、南广、川传等数十家高校和高职、中职院校，已经设立了电竞专业.</p></blockquote><h4 id="垃圾分类"><a href="#垃圾分类" class="headerlink" title="垃圾分类"></a>垃圾分类</h4><blockquote><p>手机淘宝的“扫一扫”新增垃圾分类功能，用户通过点击屏幕识别，便可通过AI智能识图功能，识别干垃圾、湿垃圾、可回收垃圾或有害垃圾等。对于AI难以识别的垃圾，用户可以手动输入垃圾信息，通过手淘搜索“你是什么垃圾”也可进入智能识别系统。</p></blockquote><h4 id="婴配乳粉追溯"><a href="#婴配乳粉追溯" class="headerlink" title="婴配乳粉追溯"></a>婴配乳粉追溯</h4><blockquote><p>首个奶粉溯源微信小程序【婴配乳粉追溯】上线，目前已累计7.1亿条产品信息加入“信息库”，通过“婴配乳粉追溯”小程序的扫码追溯功能，可追溯产品、消费、企业等关键信息，消费者通过这款小程序扫描商品标签上的二维码，就能辨识真假，查询到生产日期、批次、厂家和检测结果等信息。</p></blockquote><h4 id="自动驾驶测试牌照"><a href="#自动驾驶测试牌照" class="headerlink" title="自动驾驶测试牌照"></a>自动驾驶测试牌照</h4><blockquote><p>7月1日，北京市自动驾驶测试管理联席小组发布首批T4级别自动驾驶测试牌照，总计5张，全部由百度获得，成为中国第一家、也是唯一获得此级别牌照的企业。</p></blockquote><blockquote><p>另：北京警方通报，男子程某某向李彦宏洒水滋事，扰乱百度公司活动，被处行政拘留5日。</p></blockquote><h4 id="第五套人民币"><a href="#第五套人民币" class="headerlink" title="第五套人民币"></a><a href="https://mp.weixin.qq.com/s/mq0fPVwPQXVWXcTjXzxfOQ" target="_blank" rel="noopener">第五套人民币</a></h4><blockquote><p>中国人民银行将于8月30日发行2019年版第五套人民币。新版人民币包含50元、20元、10元、1元纸币和1元、5角、1角硬币。</p></blockquote><h4 id="iOS开发者起诉苹果：每年收99美元还抽成30"><a href="#iOS开发者起诉苹果：每年收99美元还抽成30" class="headerlink" title="iOS开发者起诉苹果：每年收99美元还抽成30%"></a>iOS开发者起诉苹果：每年收99美元还抽成30%</h4><blockquote><p>美国当地时间上周周五，iOS开发者向苹果发起集体诉讼，开发者认为苹果滥用垄断权，强制设定最低价，要求App开发者每年支付99美元费用，必须将30%的销售收入交给苹果。开发者向北加州地区法院提交诉状，他们认为苹果利用反竞争手段在iOS App市场形成垄断，苹果禁止第三方分销数字内容，在定价时向开发者提出强制性要求，还向开发者“征税”。</p></blockquote><h4 id="APP下架"><a href="#APP下架" class="headerlink" title="APP下架"></a>APP下架</h4><blockquote><p>6月28日，网信办发布信息称，首批对<code>吱呀</code>、<code>Soul</code>、<code>语玩</code>、<code>一说FM</code>等26款传播历史虚无主义、淫秽色情内容的违法违规音频平台，分别采取了约谈、下架、关停服务等阶梯处罚，对音频行业进行全面集中整治。<br><code>网易云音乐</code>、<code>喜马拉雅</code>、<code>荔枝FM</code>、<code>企鹅FM</code>四家音乐APP现已下架。</p></blockquote><h4 id="ETC服务小程序"><a href="#ETC服务小程序" class="headerlink" title="ETC服务小程序"></a>ETC服务小程序</h4><blockquote><p>支付宝可免费办理ETC:设备包邮，全国通用（网友：看成免费领BTC）【快科技】。<br>与支付宝开抢：微信小程序亦可免费申办ETC服务。 </p></blockquote><h4 id="360小程序"><a href="#360小程序" class="headerlink" title="360小程序"></a><a href="https://mp.weixin.qq.com/s/uDzWwPD2hefZKF367zvO2Q" target="_blank" rel="noopener">360小程序</a></h4><blockquote><p>2017 年 1 月 9 日，微信小程序横空出世。随后，支付宝小程序、百度智能小程序、今日头条小程序、淘宝小程序、QQ小程序、12 大厂商联盟的快应用等纷纷入局小程序。自此，我们从移动互联网时代进入到小程序时代，形成“超级App+小程序”的生态格局。</p></blockquote><blockquote><p>360 正进行这创新的尝试：在大家的注意力放在移动互联网、小程序生态之际，360 小程序另辟蹊径，从 PC 端杀入小程序。<br>360 小程序预计今年 9 月份将对外发布，而360小程序基础服务和组件已在开发。</p></blockquote><h4 id="知识产权-著作权"><a href="#知识产权-著作权" class="headerlink" title="知识产权-著作权"></a><a href="https://tech.qq.com/a/20190704/002561.htm" target="_blank" rel="noopener">知识产权-著作权</a></h4><blockquote><p>知乎文字回答被改编成短视频，法院判侵权拍摄方赔偿6万。</p></blockquote><h4 id="Hong港"><a href="#Hong港" class="headerlink" title="Hong港"></a>Hong港</h4><blockquote><p>Hong港回归22周年。</p></blockquote><h2 id="产品"><a href="#产品" class="headerlink" title="产品"></a>产品</h2><blockquote><p><code>知识星球</code> : 原名小密圈，是一个知识社群的APP平台，是内容创作者连接铁杆粉丝，做出品质社群，实现知识变现的工具。有人戏称为“智商税”。<br>我体验了一下，并建了个我自己的知识星球 ：[六个周]。</p></blockquote><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><h4 id="军营开放日"><a href="#军营开放日" class="headerlink" title="军营开放日"></a>军营开放日</h4><blockquote><p>军营开放日是各国军方为了向民众展示军事装备和提高民众的国家认同感而设立的军事参观活动。中国/驻/港/澳/军/队每年都会举行军营开放日活动。<br>设立军营开放日的目的，是为了向公众展示人民军队的精神风貌、对国防教育现身说法，强调的是“传播和沟通”；军营开放日的设立，还有助于督促军队作风建设，一旦有了法定的军营开放日，担负有对公众开放使命的军营必然会精心组织精心训练，以期把强大威武的形象展现给公众。</p></blockquote><h4 id="马太效应"><a href="#马太效应" class="headerlink" title="马太效应"></a>马太效应</h4><blockquote><p>马太效应（Matthew Effect），指强者愈强、弱者愈弱的现象，广泛应用于社会心理学、教育、金融以及科学领域。马太效应，是社会学家和经济学家们常用的术语，反映的社会现象是两极分化，富的更富，穷的更穷 。<br>马太效应，名字来自圣经《新约·马太福音》一则寓言： “凡有的，还要加倍给他叫他多余；没有的，连他所有的也要夺过来”。表面看起来“马太效应”与“平衡之道”相悖，与“二八定则”类似，但是实则它只不过是“平衡之道”的一极。</p></blockquote><blockquote></blockquote><h3 id="推荐"><a href="#推荐" class="headerlink" title="推荐"></a>推荐</h3><blockquote><p><a href="http://mindhacks.cn/2009/02/15/why-you-should-start-blogging-now/" target="_blank" rel="noopener">为什么你应该（从现在开始就）写博客</a></p></blockquote><blockquote><p><a href="https://mp.weixin.qq.com/s/ZrzR6on3rv8uzZQe6I5vcQ" target="_blank" rel="noopener">为什么说苹果是唯一在乎你隐私的科技公司？</a></p></blockquote><blockquote><p><a href="https://mp.weixin.qq.com/s/6KIzZVn4eCrENzuMApixhA" target="_blank" rel="noopener">前端开发 30 年变迁史</a></p></blockquote><blockquote><p>公众号 <a href="https://mp.weixin.qq.com/mp/profile_ext?action=home&__biz=MjM5ODk1MjgwMQ==&sessionid=1562381979&sharer_username=gh_2df3b33e3297&subscene=0&clicktime=1562382001#wechat_redirect" target="_blank" rel="noopener">极客随想</a></p></blockquote><blockquote><p><a href="https://www.huweihuang.com/" target="_blank" rel="noopener">胡伟煌博客</a></p></blockquote><h3 id="文字"><a href="#文字" class="headerlink" title="文字"></a>文字</h3><blockquote><p>“人要永远做小孩子虽办不到，但想要保持沉默是能办到的。”    – 沉默的大多数(王小波)</p></blockquote><blockquote><p>人活在世界上，需要这样的经历：做成了一件事，又做成一件事，逐渐地对自己要做的事有了把握。 –出自《皇帝做习题》</p></blockquote><blockquote><p>人人都渴望爱情，但只有有人关心的人才能够体会到什么叫做爱情。 –《王小波全集》第10卷</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;这里记录过去一周，我的关注以及值得记录的资讯。&lt;/p&gt;
    
    </summary>
    
      <category term="每周分享" scheme="http://liugezhou.online/categories/%E6%AF%8F%E5%91%A8%E5%88%86%E4%BA%AB/"/>
    
    
  </entry>
  
  <entry>
    <title>每周分享第二期</title>
    <link href="http://liugezhou.online/2019/06/28/%E6%AF%8F%E5%91%A8%E5%88%86%E4%BA%AB%E7%AC%AC%E4%BA%8C%E6%9C%9F/"/>
    <id>http://liugezhou.online/2019/06/28/每周分享第二期/</id>
    <published>2019-06-27T16:00:00.000Z</published>
    <updated>2019-07-25T05:37:39.021Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>这里记录过去一周，我的收藏以及值得记录的资讯。</p></blockquote><h2 id="新闻"><a href="#新闻" class="headerlink" title="新闻"></a>新闻</h2><h4 id="街舞进入奥运会比赛项目"><a href="#街舞进入奥运会比赛项目" class="headerlink" title="街舞进入奥运会比赛项目"></a>街舞进入奥运会比赛项目</h4><blockquote><p>当地时间25日，瑞士洛桑第134届国际奥委会全会发布消息，攀岩、<code>街舞</code>、滑板和冲浪将成为2024年巴黎奥运会的正式比赛项目。</p><a id="more"></a></blockquote><h4 id="阻止谷歌推中国定制版搜索引擎的股东决议未通过"><a href="#阻止谷歌推中国定制版搜索引擎的股东决议未通过" class="headerlink" title="阻止谷歌推中国定制版搜索引擎的股东决议未通过"></a>阻止谷歌推中国定制版搜索引擎的股东决议未通过</h4><blockquote><p>一项旨在阻止谷歌推出中国定制版搜索引擎的股东决议已经以失败告终。</p></blockquote><blockquote><p>谷歌的一些股东提出了一个决议，要求该公司停止在中国推出争议性搜索引擎的努力。这个项目在谷歌内部代号为 “Dragonfly”，据说是一个易于审查的搜索引擎，能够根据政府的要求隐藏某些搜索结果。<a href="https://techcrunch.cn/2019/06/20/google-shareholder-dragonfly-china/" target="_blank" rel="noopener">来源</a></p></blockquote><h4 id="男子当街暴打女孩事出大连"><a href="#男子当街暴打女孩事出大连" class="headerlink" title="男子当街暴打女孩事出大连"></a>男子当街暴打女孩事出大连</h4><blockquote><p>事件回顾：6月24日，一段女子在街头遭男子凶残踢打的视频流传。监控显示：事发6月22日凌晨，从0点44分7秒开始，男子连续拳打女孩面部，脚踢头部，撕扯短裙。</p></blockquote><blockquote><p><a href="https://weibo.com/u/1010712057" target="_blank" rel="noopener">@绵阳网警巡查执法</a>爆出,人民日报等大V转载，全国发酵。</p></blockquote><blockquote><p><a href="https://weibo.com/dlpolice" target="_blank" rel="noopener">@大连公安</a>与6月25日 23:39发布微博公布事件，并与6月27日 01:01公布整个事件。</p></blockquote><blockquote><p>而对于我们大多数百姓来说，维权却依然很难，在国家健全法律制度的同时，我们要提高自己的法律意识，少刷微博、少刷抖音，多学习多研究，切实关注社会问题。</p></blockquote><h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h2><h4 id="PMP"><a href="#PMP" class="headerlink" title="PMP"></a>PMP</h4><blockquote><p>PMP(Project Management Profession)指的是项目管理专业人士资格认证它是由美国项目管理协会（Project Management Institute(PMI)发起的，严格评估项目管理人员知识技能是否具有高品质的资格认证考试。其目的是为了给项目管理人员提供统一的行业标准。<br>它包含五大过程组、十大知识领域、四十九个项目管理过程、一百三十二个工具与技术等。<br>PMP考试时间:一般为每年3月、6月、9月、12月,考试时间为4个小时 上午9：00-下午13：00。<br>PMP考试费：全国统一价，初考需要人民币3900元，重考需要人民币2500元。</p></blockquote><h4 id="小程序演变史–文章"><a href="#小程序演变史–文章" class="headerlink" title="小程序演变史–文章"></a><a href="https://mp.weixin.qq.com/s/Q3Dfrcf5FTmWUrsIkPWncA" target="_blank" rel="noopener">小程序演变史–文章</a></h4><blockquote><p>从这篇文章中，我们能够鲜活地看到小程序的技术演进历程，以及对于所有开发者来说，终将去往何处。<br><a href="https://mp.weixin.qq.com/s/Q3Dfrcf5FTmWUrsIkPWncA" target="_blank" rel="noopener">小程序演变史</a><br><img src="https://github.com/liugezhou/liugezhouImage/blob/master/Diary/2019/06/miniprogram0626.png" alt="miniprogram"></p></blockquote><h4 id="“吐个槽”反馈平台"><a href="#“吐个槽”反馈平台" class="headerlink" title="“吐个槽”反馈平台"></a><a href="https://support.qq.com/products/64844?" target="_blank" rel="noopener">“吐个槽”反馈平台</a></h4><blockquote><p><a href="https://baike.baidu.com/item/Tencent%20CDC" target="_blank" rel="noopener">腾讯CDC</a>推出的工具，几行代码就可以为页面加入一个互动社区，可以接入应用程序、小程序、WEB、H5、微信公众号等各端。该小产品内容包括：【我们的故事】、【常见问题】、【吐槽内容】等。<br>体验我的公众号吐槽：进入[六个周]公众号，点击菜单【页面展示】、点击吐个槽。</p></blockquote><h4 id="图片压缩–网站"><a href="#图片压缩–网站" class="headerlink" title="图片压缩–网站"></a><a href="https://www.iloveimg.com/zh-cn/compress-image/compress-jpg" target="_blank" rel="noopener">图片压缩–网站</a></h4><blockquote><p>有的时候你需要快速对一张图片进行压缩，可以收藏此网站，方便下回使用，降低搜索成本。<br>网址：<a href="https://www.iloveimg.com/zh-cn/compress-image/compress-jpg" target="_blank" rel="noopener">https://www.iloveimg.com/zh-cn/compress-image/compress-jpg</a></p></blockquote><h4 id="小程序云开发"><a href="#小程序云开发" class="headerlink" title="小程序云开发"></a><a href="https://developers.weixin.qq.com/miniprogram/dev/wxcloud/basis/getting-started.html" target="_blank" rel="noopener">小程序云开发</a></h4><blockquote><p>开发者可以使用云开发开发微信小程序、小游戏，无需搭建服务器，即可使用云端能力。</p></blockquote><blockquote><p>云开发为开发者提供完整的原生云端支持和微信服务支持，弱化后端和运维概念，无需搭建服务器，使用平台提供的 API 进行核心业务开发，即可实现快速上线和迭代，同时这一能力，同开发者已经使用的云服务相互兼容，并不互斥。</p></blockquote><h2 id="读书"><a href="#读书" class="headerlink" title="读书"></a>读书</h2><h4 id="《光荣日》"><a href="#《光荣日》" class="headerlink" title="《光荣日》"></a>《光荣日》</h4><blockquote><p>韩寒的一本小说，高中的时候读过，在自习课上读到肚子疼，但是现在读来依然觉得搞笑、讽刺。</p></blockquote><blockquote><p>如果你没读过，相信我,读过之后你一定会开怀大笑、浮想联翩。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;这里记录过去一周，我的收藏以及值得记录的资讯。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;新闻&quot;&gt;&lt;a href=&quot;#新闻&quot; class=&quot;headerlink&quot; title=&quot;新闻&quot;&gt;&lt;/a&gt;新闻&lt;/h2&gt;&lt;h4 id=&quot;街舞进入奥运会比赛项目&quot;&gt;&lt;a href=&quot;#街舞进入奥运会比赛项目&quot; class=&quot;headerlink&quot; title=&quot;街舞进入奥运会比赛项目&quot;&gt;&lt;/a&gt;街舞进入奥运会比赛项目&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;当地时间25日，瑞士洛桑第134届国际奥委会全会发布消息，攀岩、&lt;code&gt;街舞&lt;/code&gt;、滑板和冲浪将成为2024年巴黎奥运会的正式比赛项目。&lt;/p&gt;
    
    </summary>
    
      <category term="每周分享" scheme="http://liugezhou.online/categories/%E6%AF%8F%E5%91%A8%E5%88%86%E4%BA%AB/"/>
    
    
  </entry>
  
  <entry>
    <title>每周分享第一期</title>
    <link href="http://liugezhou.online/2019/06/23/%E6%AF%8F%E5%91%A8%E5%88%86%E4%BA%AB%E7%AC%AC%E4%B8%80%E6%9C%9F/"/>
    <id>http://liugezhou.online/2019/06/23/每周分享第一期/</id>
    <published>2019-06-22T16:00:00.000Z</published>
    <updated>2019-07-25T05:33:04.651Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>受阮老师的公号、博客影响，也同样受很多优秀的人儿们在Github上的技术文章周刊、读书分享等，我也觉得应该有自己的一个节奏，把自己的所学、所看、所得进行记录，虽然现在“望尘莫及”，但愿可以“望其项背”。<br> <a id="more"></a><br>这里记录过去一周，我认为值得传播和学习的内容。</p></blockquote><h4 id="DogeDoge"><a href="#DogeDoge" class="headerlink" title="DogeDoge"></a>DogeDoge</h4><blockquote><p>多吉搜索是一个新的国产搜索引擎，据传说目标是要成为百度的替代方案之一。网址：<a href="www.dogedoge.com">www.dogedoge.com</a>.<br>亲测好用，不会搜出来一堆的广告，目前应该还处于一个起步开发阶段吧，暂时不支持[图片]、[视频]、[新闻]的搜索。<br>推荐大家使用doge搜索。</p></blockquote><h4 id="无版权插图的网站"><a href="#无版权插图的网站" class="headerlink" title="无版权插图的网站"></a>无版权插图的网站</h4><blockquote><p>一个收集无版权插图的网站，提供 SVG / PNG 格式下载，并且允许更改颜色，亲测好用。<a href="https://gallery.manypixels.co/category" target="_blank" rel="noopener">网站戳这里</a></p></blockquote><h4 id="Weekly"><a href="#Weekly" class="headerlink" title="Weekly"></a>Weekly</h4><blockquote><p>公众号<a href="https://mp.weixin.qq.com/mp/profile_ext?action=home&__biz=MzI4NjAxNjY4Nw==#wechat_redirect" target="_blank" rel="noopener">阮一峰的网络日志</a>.<br>这里记录作者每周值得分享的科技内容，每周五发布。文章涵盖【资讯】、【新闻】、【文章】、【工具】、【资源】、【文摘】、【图片】、【言论】等干货。</p></blockquote><blockquote><p>Github项目–<a href="https://github.com/zenany/weekly/tree/master/software" target="_blank" rel="noopener">weekly</a>,Web前端技术周刊，周刊从 09 年开始整理，期间中断过约半年。以前以 email 的形式分享给公司的 FE 同事，于 14 年开始存档于 github。</p></blockquote><h4 id="Nocode"><a href="#Nocode" class="headerlink" title="Nocode"></a>Nocode</h4><blockquote><p>一个一行代码也没有的项目，斩获近三万Star，用来搞笑的项目–<a href="https://github.com/kelseyhightower/nocode" target="_blank" rel="noopener">nocode</a>.</p></blockquote><h4 id="Gitter"><a href="#Gitter" class="headerlink" title="Gitter"></a>Gitter</h4><blockquote><p>微信小程序版Github，代码开源，该项目采用 Taro 框架 + Taro UI 进行开发。<br><a href="https://github.com/huangjianke/Gitter" target="_blank" rel="noopener">可能是目前颜值最高的GitHub微信小程序客户端–Gitter</a></p></blockquote><h4 id="Taro"><a href="#Taro" class="headerlink" title="Taro"></a>Taro</h4><blockquote><p>Taro 是一套遵循 React 语法规范的 多端开发 解决方案。现如今市面上端的形态多种多样，Web、React-Native、微信小程序等各种端大行其道，当业务要求同时在不同的端都要求有所表现的时候，针对不同的端去编写多套代码的成本显然非常高，这时候只编写一套代码就能够适配到多端的能力就显得极为需要。</p></blockquote><blockquote><p>使用 Taro，我们可以只书写一套代码，再通过 Taro 的编译工具，将源代码分别编译出可以在不同端（微信/百度/支付宝/字节跳动小程序、H5、React-Native 等）运行的代码。</p></blockquote><h4 id="freeCodeCamp"><a href="#freeCodeCamp" class="headerlink" title="freeCodeCamp"></a>freeCodeCamp</h4><blockquote><p>Github最多Star的项目。<br>官方网站：<a href="https://www.freecodecamp.org/" target="_blank" rel="noopener">freecodecamp</a>。<br><a href="https://learn.freecodecamp.one/" target="_blank" rel="noopener">中文网站</a>。<br><a href="https://www.freecodecamp.cn/challenges/build-a-tribute-page" target="_blank" rel="noopener">中文社区</a>.<br>freeCodeCamp.org is a tiny non-profit that’s helping millions of people learn to code for free.<br>[如果你是编程新手，我们推荐你 从头开始。]<br>[如果你是编程老手，我们推荐你 自由跳跃。]</p></blockquote><h4 id="lantern"><a href="#lantern" class="headerlink" title="lantern"></a>lantern</h4><blockquote><p>下载地址：<a href="https://github.com/getlantern/lantern" target="_blank" rel="noopener">戳这里</a></p></blockquote><h4 id="文章"><a href="#文章" class="headerlink" title="文章"></a>文章</h4><blockquote><p><a href="http://www.360doc.com/content/13/0512/16/3125585_284829243.shtml" target="_blank" rel="noopener">迄今为止看过最好的职业规划</a></p></blockquote><blockquote><p><a href="https://www.mtyyw.com/7013/" target="_blank" rel="noopener">寒门再难出贵子</a></p></blockquote><blockquote><p><a href="http://www.ruanyifeng.com/survivor/" target="_blank" rel="noopener">未来世界的幸存者-阮一峰著</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;受阮老师的公号、博客影响，也同样受很多优秀的人儿们在Github上的技术文章周刊、读书分享等，我也觉得应该有自己的一个节奏，把自己的所学、所看、所得进行记录，虽然现在“望尘莫及”，但愿可以“望其项背”。&lt;br&gt;
    
    </summary>
    
      <category term="每周分享" scheme="http://liugezhou.online/categories/%E6%AF%8F%E5%91%A8%E5%88%86%E4%BA%AB/"/>
    
    
  </entry>
  
  <entry>
    <title>小程序Request的封装</title>
    <link href="http://liugezhou.online/2019/05/28/%E5%B0%8F%E7%A8%8B%E5%BA%8FRequest%E7%9A%84%E5%B0%81%E8%A3%85/"/>
    <id>http://liugezhou.online/2019/05/28/小程序Request的封装/</id>
    <published>2019-05-27T16:00:00.000Z</published>
    <updated>2019-07-27T05:23:48.069Z</updated>
    
    <content type="html"><![CDATA[<h6 id="最近做了两个小程序，业务相对比较简单，关于公益方面的，收获颇多，其中感觉在开发中明显提升开发效率以及减少代码量的就是request的封装，下面稍稍做个总结。"><a href="#最近做了两个小程序，业务相对比较简单，关于公益方面的，收获颇多，其中感觉在开发中明显提升开发效率以及减少代码量的就是request的封装，下面稍稍做个总结。" class="headerlink" title="最近做了两个小程序，业务相对比较简单，关于公益方面的，收获颇多，其中感觉在开发中明显提升开发效率以及减少代码量的就是request的封装，下面稍稍做个总结。"></a>最近做了两个小程序，业务相对比较简单，关于公益方面的，收获颇多，其中感觉在开发中明显提升开发效率以及减少代码量的就是request的封装，下面稍稍做个总结。</h6><hr><h4 id="通用封装"><a href="#通用封装" class="headerlink" title="通用封装"></a>通用封装</h4><blockquote><p>在utils文件夹下新建两个文件，config.js以及request.js,代码分别如下。</p><a id="more"></a><pre><code>//`config.js`---一些全局变量module.exports = {appid: &quot;wxcXXXXXXXXXXXXXX349f&quot;,API_BASE_URL: &apos;https://liugezhou.github.io/&apos;,//暂时测试环境地址、上线需要修改}</code></pre></blockquote><pre><code>`request`---request封装const CONFIG = require(&quot;./config.js&quot;)const request = (url,method,data) =&gt; {  let _url = CONFIG.API_BASE_URL+url  return new Promise((resolve ,reject)=&gt;{    wx.request({      url: _url,       method:method,      data:data,      header: {        &apos;content-type&apos;: &apos;application/json&apos; // 默认值      },      success(request) {        resolve(request.data)      },      fail(error) {        reject(error)      },      complete(aaa) {        // 加载完成      }    })  })}/** * 小程序的promise没有finally方法，自己扩展下 */Promise.prototype.finally = function (callback) {  var Promise = this.constructor;  return this.then(    function (value) {      Promise.resolve(callback()).then(        function () {          return value;        }      );    },    function (reason) {     Promise.resolve(callback()).then(        function () {          throw reason;        }      );    }  );}  //所有接口定义在这里module.exports = {  request,  //app.js登录  login:(data) =&gt; {    return request(&apos;WeChat/Login.aspx&apos;,&apos;POST&apos;,data)  },  //获取验证码  getMessageCode: (mobile) =&gt; {    return request(&apos;Donor/DonorPhoneCode.aspx?&apos;+mobile,&apos;POST&apos;)  },  ……}</code></pre><blockquote><p>通过上面两个小文件我们就将request封装完毕，在业务层调用代码的时候只需要：</p></blockquote><pre><code>const REQUEST = require(&apos;../../utils/request.js&apos;);…………………………………………var that =this    REQUEST.login({      tokenkey: res.code    }).then(function(res){         that.globalData.openId = res.data.tokenkey         that.globalData.isBind = res.code    }).catch(res =&gt; {//catch  fail在这里        console.log(&apos;fail:&apos;,res);       }).finally(()=&gt;{//finally在这里       console.log(&apos;finally:&apos;, &quot;结束&quot;);       })………………………………………</code></pre><h4 id="队列封装（不常用）"><a href="#队列封装（不常用）" class="headerlink" title="队列封装（不常用）"></a>队列封装（不常用）</h4><blockquote><p>一般情况下，上面的封装我们按着自己的需求稍微修改就应该可以方便使用。<br>接下来介绍的一种是接口队列化封装。因为在我们的开发需求中，每一次接口的请求需要上一个接口返回的两个数据，因此稍作整理如下：</p></blockquote><pre><code>//request.jsconst CONFIG = require(&quot;./config.js&quot;)let requestlist = [];let doing = false;const request = (link, data, back) =&gt; {  var link = CONFIG.API_BASE_URL + link  requestlist.push({ link: link, data: data, back: back })  if (!doing) dorequest();}const dorequest = () =&gt; {  doing = true  let task = requestlist.shift();  if (task) {    wx.request({      url: task.link,      data: Object.assign({         seq : wx.getStorageSync(&quot;seq&quot;) || &apos;&apos;,         token : wx.getStorageSync(&quot;token&quot;) || &apos;&apos;,         openid : wx.getStorageSync(&quot;openId&quot;) || &apos;&apos;}, task.data),      method: &apos;POST&apos;,      header: {        &apos;content-type&apos;: &apos;application/json&apos; // 默认值      },      success: res =&gt; {        wx.setStorageSync(&quot;seq&quot;, res.data.seq)        wx.setStorageSync(&quot;token&quot;, res.data.token)        task.back(res.data);        dorequest();      },      fail:function(){        wx.showToast({          title: &apos;服务器出现故障&apos;,          image: &apos;../../assets/icon/wrong.png&apos;,          duration: 3000        })      },      complete:function(){      }    });  }    else {    doing = false;  }};module.exports = {  request,  //获取用户openid  getOpenid: (data,res) =&gt; {    return request(&apos;get-wx-openid&apos;,data,res)  },  //获取验证码  getLoginCode: (data,res) =&gt; {    return request(&apos;send-phone-code&apos;, data, res)  }}</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h6 id=&quot;最近做了两个小程序，业务相对比较简单，关于公益方面的，收获颇多，其中感觉在开发中明显提升开发效率以及减少代码量的就是request的封装，下面稍稍做个总结。&quot;&gt;&lt;a href=&quot;#最近做了两个小程序，业务相对比较简单，关于公益方面的，收获颇多，其中感觉在开发中明显提升开发效率以及减少代码量的就是request的封装，下面稍稍做个总结。&quot; class=&quot;headerlink&quot; title=&quot;最近做了两个小程序，业务相对比较简单，关于公益方面的，收获颇多，其中感觉在开发中明显提升开发效率以及减少代码量的就是request的封装，下面稍稍做个总结。&quot;&gt;&lt;/a&gt;最近做了两个小程序，业务相对比较简单，关于公益方面的，收获颇多，其中感觉在开发中明显提升开发效率以及减少代码量的就是request的封装，下面稍稍做个总结。&lt;/h6&gt;&lt;hr&gt;
&lt;h4 id=&quot;通用封装&quot;&gt;&lt;a href=&quot;#通用封装&quot; class=&quot;headerlink&quot; title=&quot;通用封装&quot;&gt;&lt;/a&gt;通用封装&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;在utils文件夹下新建两个文件，config.js以及request.js,代码分别如下。&lt;/p&gt;
    
    </summary>
    
      <category term="web前端" scheme="http://liugezhou.online/categories/web%E5%89%8D%E7%AB%AF/"/>
    
      <category term="小程序" scheme="http://liugezhou.online/categories/web%E5%89%8D%E7%AB%AF/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
    
      <category term="request" scheme="http://liugezhou.online/tags/request/"/>
    
  </entry>
  
  <entry>
    <title>微信小程序开发需要注意的一些规范</title>
    <link href="http://liugezhou.online/2019/04/30/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91%E9%9C%80%E8%A6%81%E6%B3%A8%E6%84%8F%E7%9A%84%E4%B8%80%E4%BA%9B%E8%A7%84%E8%8C%83/"/>
    <id>http://liugezhou.online/2019/04/30/微信小程序开发需要注意的一些规范/</id>
    <published>2019-04-29T16:00:00.000Z</published>
    <updated>2019-07-27T05:23:55.609Z</updated>
    
    <content type="html"><![CDATA[<h6 id="今天的工作已经做完，在马上就进入五一假期的下班焦躁时刻，来个简单的微信小程序开发规范总结。"><a href="#今天的工作已经做完，在马上就进入五一假期的下班焦躁时刻，来个简单的微信小程序开发规范总结。" class="headerlink" title="今天的工作已经做完，在马上就进入五一假期的下班焦躁时刻，来个简单的微信小程序开发规范总结。"></a>今天的工作已经做完，在马上就进入五一假期的下班焦躁时刻，来个简单的微信小程序开发规范总结。</h6><hr><h4 id="1-小程序应避免出现任何-JavaScript-异常"><a href="#1-小程序应避免出现任何-JavaScript-异常" class="headerlink" title="1.小程序应避免出现任何 JavaScript 异常"></a>1.小程序应避免出现任何 JavaScript 异常</h4><blockquote><p>出现 JavaScript 异常可能导致小程序的交互无法进行下去，我们应当追求零异常，保证小程序的高鲁棒性和高可用性，相信这一点一般情况下都不会出现，需要注意的是代码测试中多场景的试错。</p><a id="more"></a></blockquote><h4 id="2-合理控制图片的大小"><a href="#2-合理控制图片的大小" class="headerlink" title="2.合理控制图片的大小"></a>2.合理控制图片的大小</h4><blockquote><p>图片太大会增加下载时间和内存的消耗，应根据显示区域大小合理控制图片大小。<br>一般情况下图片较大的，我们应该都会选择直接放在服务器上，直接拿到地址，但是官方说这样读取的图片：<code>存在网络图片资源未开启 HTTP 缓存控制</code>,这是个什么意思，我也未完全弄懂。</p></blockquote><h4 id="3-小程序所有请求应响应正常"><a href="#3-小程序所有请求应响应正常" class="headerlink" title="3.小程序所有请求应响应正常"></a>3.小程序所有请求应响应正常</h4><blockquote><p>请求失败可能导致小程序的交互无法进行下去，应当保证所有请求都能成功。然而，请求成功只是第一步，还可能存在的问题就是请求的耗时太长、存在短时间内发起太多的请求这样的情况。</p></blockquote><h4 id="4-避免setData的数据过大且避免setData的调用过于频繁。"><a href="#4-避免setData的数据过大且避免setData的调用过于频繁。" class="headerlink" title="4.避免setData的数据过大且避免setData的调用过于频繁。"></a>4.避免setData的数据过大且避免setData的调用过于频繁。</h4><blockquote><p>由于小程序运行逻辑线程与渲染线程之上，setData的调用会把数据从逻辑层传到渲染层，数据太大会增加通信时间.<br>setData接口的调用涉及逻辑层与渲染层间的线程通过，通信过于频繁可能导致处理队列阻塞，界面渲染不及时而导致卡顿，应避免无用的频繁调用.</p></blockquote><h4 id="5-避免将未绑定在-WXML-的变量传入-setData"><a href="#5-避免将未绑定在-WXML-的变量传入-setData" class="headerlink" title="5.避免将未绑定在 WXML 的变量传入 setData"></a>5.避免将未绑定在 WXML 的变量传入 setData</h4><blockquote><p>setData操作会引起框架处理一些渲染界面相关的工作，一个未绑定的变量意味着与界面渲染无关，传入setData会造成不必要的性能消耗。<br>这一条我想是很多开发人员在初次接触小程序开发的时候都会犯的一个错误吧。因为刚开始的时候由于这种setData的语法，让我们忘了还有全局变量的使用，于是会经常出现使用Page中定义的data做中间过渡。</p></blockquote><h4 id="6-wxss-覆盖率较高，较少或没有引入未被使用的样式"><a href="#6-wxss-覆盖率较高，较少或没有引入未被使用的样式" class="headerlink" title="6.wxss 覆盖率较高，较少或没有引入未被使用的样式"></a>6.wxss 覆盖率较高，较少或没有引入未被使用的样式</h4><blockquote><p>我们应该按需引入 wxss 资源，如果小程序中存在大量未使用的样式，会增加小程序包体积大小，从而在一定程度上影响加载速度。<br>这个也是比较常见的一种不规范，写了很多CSS样式，很多不用的就留来了代码里面，越来越多，所以在编写代码过程中，尽量去对每一行代码（特别是自己写的）了如指掌。</p></blockquote><h4 id="7-避免首屏时间太长的情况"><a href="#7-避免首屏时间太长的情况" class="headerlink" title="7.避免首屏时间太长的情况"></a>7.避免首屏时间太长的情况</h4><blockquote><p>首屏时间是指用户开始看到第一屏的内容的时间，首屏时间太长会导致用户长时间看到的都是白屏，会一直等待有意义的内容展示出来。出现这一情况，应仔细检查这个过程都有哪个操作，一般来说，可能是请求数据的时间太长，或者是一次渲染的数据太大导致渲染时间太长。</p></blockquote><blockquote><p>这些东西是我感觉比较常见且容易修改的，其它还存在一些规范，不妨打开微信开发者工具，点击<code>Audits</code>,对你写的代码进行一个测试，测试结果会让你很好的处理自己的代码。That’s really cool!</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h6 id=&quot;今天的工作已经做完，在马上就进入五一假期的下班焦躁时刻，来个简单的微信小程序开发规范总结。&quot;&gt;&lt;a href=&quot;#今天的工作已经做完，在马上就进入五一假期的下班焦躁时刻，来个简单的微信小程序开发规范总结。&quot; class=&quot;headerlink&quot; title=&quot;今天的工作已经做完，在马上就进入五一假期的下班焦躁时刻，来个简单的微信小程序开发规范总结。&quot;&gt;&lt;/a&gt;今天的工作已经做完，在马上就进入五一假期的下班焦躁时刻，来个简单的微信小程序开发规范总结。&lt;/h6&gt;&lt;hr&gt;
&lt;h4 id=&quot;1-小程序应避免出现任何-JavaScript-异常&quot;&gt;&lt;a href=&quot;#1-小程序应避免出现任何-JavaScript-异常&quot; class=&quot;headerlink&quot; title=&quot;1.小程序应避免出现任何 JavaScript 异常&quot;&gt;&lt;/a&gt;1.小程序应避免出现任何 JavaScript 异常&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;出现 JavaScript 异常可能导致小程序的交互无法进行下去，我们应当追求零异常，保证小程序的高鲁棒性和高可用性，相信这一点一般情况下都不会出现，需要注意的是代码测试中多场景的试错。&lt;/p&gt;
    
    </summary>
    
      <category term="web前端" scheme="http://liugezhou.online/categories/web%E5%89%8D%E7%AB%AF/"/>
    
      <category term="小程序" scheme="http://liugezhou.online/categories/web%E5%89%8D%E7%AB%AF/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
    
      <category term="小程序规范" scheme="http://liugezhou.online/tags/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E8%A7%84%E8%8C%83/"/>
    
  </entry>
  
  <entry>
    <title>编译型语言与解释型语言的区别</title>
    <link href="http://liugezhou.online/2018/12/31/%E7%BC%96%E8%AF%91%E5%9E%8B%E8%AF%AD%E8%A8%80%E4%B8%8E%E8%A7%A3%E9%87%8A%E5%9E%8B%E8%AF%AD%E8%A8%80%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>http://liugezhou.online/2018/12/31/编译型语言与解释型语言的区别/</id>
    <published>2018-12-30T16:00:00.000Z</published>
    <updated>2019-07-25T08:01:35.900Z</updated>
    
    <content type="html"><![CDATA[<h3 id="文章背景"><a href="#文章背景" class="headerlink" title="文章背景"></a>文章背景</h3><p>看了一些Python的基础，说Python是解释型语言，于是昨天晚上躺到床上跟aliya语音，便说起了编译型语言跟解释型语言的区别，特地去查找了一些相关资料，结结实实的探讨了好一会，才发现自己作为一个靠程序吃饭的人，真是对不起程序员这个职业，不是计算机出身，对很多的计算机原理、名词几乎都没有理解，没有研究，甚至都不知道它的存在，真是硬伤。</p><p>但幸好还有一个想去了解的心情，于是作为一个记录，整理本篇文章，督促自己以后遇到不管大小的问题都要敞开心扉去多一点思考，多一些学习。</p><a id="more"></a><hr><h3 id="简单经历"><a href="#简单经历" class="headerlink" title="简单经历"></a>简单经历</h3><p>在详述前，先记录一下自己的经历：之前写过一段时间Java代码，现在主要写前端，在这个过程中有一个场景让我印象深刻，但原理还有待深究：之前写Java代码的时候记得修改一些内容的时候必须要重启Tomcat服务器，才能看到修改代码过后的运行结果，但是有些又不用重启。而在写前端语言的时候，抛去缓存，代码修改后可以马上运行显示，当时根本就没去想这个问题，我能简单的想起编译型语言与解释型语言的区别也就是这个了。</p><hr><h3 id="文章正文"><a href="#文章正文" class="headerlink" title="文章正文"></a>文章正文</h3><blockquote><p>那么到底什么是<code>编译型语言</code>，什么是<code>解释型语言</code>呢？他们之间有什么共同点和区别呢？</p></blockquote><h5 id="1️⃣、概念"><a href="#1️⃣、概念" class="headerlink" title="1️⃣、概念"></a>1️⃣、概念</h5><hr><blockquote><ul><li>编译型语言代表有：<code>C</code>语言，<code>C++</code>、<code>Object-C</code>以及最近很火的苹果新语言<code>swift</code><br>通常都会对源代码进行编译，生成可以执行的二进制代码，执行的是编译后的结果</li><li>解释型语言代表有：<code>JavaScript</code>、<code>Python</code>、<br><code>Erlang</code>、<code>PHP</code>、<code>Perl</code>、<code>Ruby</code><br>通常不用对源代码进行编译，一般是通过解释器载入脚本后运行。由于每个语句都是执行的时候才进行解释翻译，这样解释性语言每次执行就要翻译一次，效率相对要低。</li><li><code>Java</code>具有编译与解释两种特性：既可以将其源代码当作脚本执行，也可以进行编译成.class代码（字节码）载入运行</li></ul></blockquote><h5 id="2️⃣、对比"><a href="#2️⃣、对比" class="headerlink" title="2️⃣、对比"></a>2️⃣、对比</h5><hr><h6 id="编译型语言："><a href="#编译型语言：" class="headerlink" title="编译型语言："></a>编译型语言：</h6><blockquote><ul><li>优点：编译器一般会有预编译的过程对代码进行优化。因为编译只做一次，运行时不需要编译，所以编译型语言的程序执行效率高。可以脱离语言环境独立运行。</li><li>缺点：编译之后如果需要修改就需要整个模块重新编译。编译的时候根据对应的运行环境生成机器码，不同的操作系统之间移植就会有问题，需要根据运行的操作系统环境编译不同的可执行文件。</li></ul></blockquote><h6 id="解释型语言"><a href="#解释型语言" class="headerlink" title="解释型语言"></a>解释型语言</h6><blockquote><ul><li>优点：有良好的平台兼容性，在任何环境中都可以运行，前提是安装了解释器（虚拟机）。灵活，修改代码的时候直接修改就可以，可以快速部署，不用停机维护。</li><li>缺点：每次运行的时候都要解释一遍，性能上不如编译型语言。</li></ul></blockquote><hr><h5 id="3️⃣、区别（本段落参考文章地址-戳这里）"><a href="#3️⃣、区别（本段落参考文章地址-戳这里）" class="headerlink" title="3️⃣、区别（本段落参考文章地址 戳这里）"></a>3️⃣、区别（本段落参考文章地址 戳<a href="https://www.jianshu.com/p/f726e4766ac7" target="_blank" rel="noopener">这里</a>）</h5><h6 id="区别1：从效果上来比"><a href="#区别1：从效果上来比" class="headerlink" title="区别1：从效果上来比"></a>区别1：从效果上来比</h6><blockquote><p>编译型语言要全部写完之后，然后通过某个编译器，去生成一个类似*.exe的二进制文件，然后手工双击这个文件才看的到效果；解释型语言则没生成你看的到的那种.exe文件，而是直接发出效果。那么区别之一就是：是否显性的生成二进制文件供你去双击。</p></blockquote><h6 id="区别2：运行的时候是否需要编译器"><a href="#区别2：运行的时候是否需要编译器" class="headerlink" title="区别2：运行的时候是否需要编译器"></a>区别2：运行的时候是否需要编译器</h6><blockquote><p>编译型语言运行的是最终的二进制代码了，所以不在需要编译器在身边守护。但解释型语言则不然，它是边解释、边运行，所以运行的时候很可能还有部分代码没有解释好，所以需要编译器守护（解释型语言把该工具叫：解释器）。那么编译器在哪里？就在<code>浏览器</code>里，所以你要看html效果，必须是用浏览器这种工具，或者有编译工具在内的其他工具，如：模拟浏览器的工具。</p></blockquote><h6 id="区别3：执行速度对比"><a href="#区别3：执行速度对比" class="headerlink" title="区别3：执行速度对比"></a>区别3：执行速度对比</h6><blockquote><p>编译型语言由于运行的已经是完全的二进制内容了，所以运行起来很干净利落，自然速度快。但解释型语言，运行的不一定是完全的二进制内容，因为它是边解释（成二进制），边运行。所以当它执行看出效果的时候，程序后半部分还不一定解释成二进制呢。所以它是“三心二意”的做事，速度没有前者快，但是<code>CPU的运行速度如果很快</code>(注：这就是【Python】作为一门解释型语言，弊端有所减轻的原因)，你可能看不出来，偶尔会看到“有点卡”的效果。原因就是：它边解释、边运行，你看到效果了，可能还有一少半的代码没解释成二进制呢，所以你看到的效果会是残缺的，这就是为什么查看网页的时候，很容易就看到这样的情况：先是出现一堆没有布局的文字，然后才出现那种布局好的效果。</p></blockquote><h6 id="区别4：可移植性对比"><a href="#区别4：可移植性对比" class="headerlink" title="区别4：可移植性对比"></a>区别4：可移植性对比</h6><blockquote><p>编译型语言是运行二进制内容，所以：一旦CPU指令系统改变，之前的二进制文件可能运行不了。比如：如果到其他硬件平台上运行，就可能出现错误，就需要根据该平台重新编译出新的二进制文件。所以：可移植性差；而解释型语言则不然。它并没有实现弄成什么二进制内容，而是在需要的时候才开始编译、运行。所以：它自然具有可移植性，即：在任何平台都可以马上运行起来。注意：它的解释工具如：<code>浏览器</code>，本身就是编译型语言解释出来的二进制代码，所以浏览器本身不具有移植性，是需要针对不同的平台弄出对应的浏览器最终二进制文件的。这里千万不要混淆了。</p></blockquote><h6 id="区别5：升级上对比"><a href="#区别5：升级上对比" class="headerlink" title="区别5：升级上对比"></a>区别5：升级上对比</h6><blockquote><p>编译型语言弄出来的二进制文件如果要升级，自然要重新下载一个新的二进制文件了。所以重新下载，安装，覆盖是最大的特点。比如QQ的升级，就是要重新下载，重新安装，重新覆盖，等个半天，而且很耗费CPU资源，体验性就不大好；而解释型的语言，只要重新写好源代码即可。用户提要到最新效果，只要刷新一下即可。所以体验性好。比如：某网站平台升级了，用户只要重新刷新一下……</p></blockquote><h6 id="区别6：应用领域"><a href="#区别6：应用领域" class="headerlink" title="区别6：应用领域"></a>区别6：应用领域</h6><blockquote><p>编译型语言应用领域通常是那些安装软件，如：桌面上的那种安装软件；解释型的语言的应用领域通常是：互联网，网站等，那种刷新了一下就可以看到最新效果的领域。</p></blockquote><h5 id="4️⃣、实现原理"><a href="#4️⃣、实现原理" class="headerlink" title="4️⃣、实现原理"></a>4️⃣、实现原理</h5><blockquote><p>实现原理，简单来说就是：是不是做成了“实时采集”；<br>编译型语言没有做“实时采集”。它选择了一次性解决问题，表现为：先弄出完整的二进制代码之后，再让用户去执行该二进制代码，这样省事、省力、省心。但造成可移植性差、升级麻烦的后果。</p></blockquote><blockquote><p>解释型语言，采用了“实时采集”的措施，做成“边解释、边运行”。但这样带来的直接弊端就是：边走边看，因此速度自然要慢一些。不过<code>现在的CPU、内存等硬件能力都很强大，这个方面的影响可以忽略</code>。而它带来的非常便捷的升级，让它更显示出独特的魅力。所以它在移动互联网的领域，在只要刷新一下就可以看到最新效果的领域，是独一无二的霸主。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;文章背景&quot;&gt;&lt;a href=&quot;#文章背景&quot; class=&quot;headerlink&quot; title=&quot;文章背景&quot;&gt;&lt;/a&gt;文章背景&lt;/h3&gt;&lt;p&gt;看了一些Python的基础，说Python是解释型语言，于是昨天晚上躺到床上跟aliya语音，便说起了编译型语言跟解释型语言的区别，特地去查找了一些相关资料，结结实实的探讨了好一会，才发现自己作为一个靠程序吃饭的人，真是对不起程序员这个职业，不是计算机出身，对很多的计算机原理、名词几乎都没有理解，没有研究，甚至都不知道它的存在，真是硬伤。&lt;/p&gt;
&lt;p&gt;但幸好还有一个想去了解的心情，于是作为一个记录，整理本篇文章，督促自己以后遇到不管大小的问题都要敞开心扉去多一点思考，多一些学习。&lt;/p&gt;
    
    </summary>
    
      <category term="编程概念类" scheme="http://liugezhou.online/categories/%E7%BC%96%E7%A8%8B%E6%A6%82%E5%BF%B5%E7%B1%BB/"/>
    
    
      <category term="编译型语言" scheme="http://liugezhou.online/tags/%E7%BC%96%E8%AF%91%E5%9E%8B%E8%AF%AD%E8%A8%80/"/>
    
      <category term="解释型语言" scheme="http://liugezhou.online/tags/%E8%A7%A3%E9%87%8A%E5%9E%8B%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>前端跨域问题</title>
    <link href="http://liugezhou.online/2018/12/16/%E5%89%8D%E7%AB%AF%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98/"/>
    <id>http://liugezhou.online/2018/12/16/前端跨域问题/</id>
    <published>2018-12-15T16:00:00.000Z</published>
    <updated>2019-07-25T08:02:16.974Z</updated>
    
    <content type="html"><![CDATA[<p>作者：Qyouu<br>链接：<a href="https://www.imooc.com/article/70123" target="_blank" rel="noopener">https://www.imooc.com/article/70123</a><br>来源：慕课网</p><h6 id="本文对原文章进行了样式整理，内容如下："><a href="#本文对原文章进行了样式整理，内容如下：" class="headerlink" title="本文对原文章进行了样式整理，内容如下："></a>本文对原文章进行了样式整理，内容如下：</h6><blockquote><p>相信每一个前端er对于跨域这两个字都不会陌生，在实际项目中应用也是比较多的。但跨域方法的多种多样实在让人目不暇接。老规矩，碰到这种情况，就只能自己总结一篇博客，作为记录。</p></blockquote><a id="more"></a><h3 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h3><h5 id="1-什么是跨域？"><a href="#1-什么是跨域？" class="headerlink" title="1. 什么是跨域？"></a>1. 什么是跨域？</h5><blockquote><p>跨域一词从字面意思看，就是跨域名嘛，但实际上跨域的范围绝对不止那么狭隘。具体概念如下：只要协议、域名、端口有任何一个不同，都被当作是不同的域。之所以会产生跨域这个问题呢，其实也很容易想明白，要是随便引用外部文件，不同标签下的页面引用类似的彼此的文件，浏览器很容易懵逼的，安全也得不到保障了就。什么事，都是安全第一嘛。但在安全限制的同时也给注入iframe或是ajax应用上带来了不少麻烦。所以我们要通过一些方法使本域的js能够操作其他域的页面对象或者使其他域的js能操作本域的页面对象（iframe之间）。下面是具体的跨域情况详解：</p></blockquote><table><thead><tr><th>URL</th><th align="center">说明</th><th align="center">是否允许通信</th></tr></thead><tbody><tr><td><a href="http://www.a.com/a.jshttp://www.a.com/b.js" target="_blank" rel="noopener">http://www.a.com/a.jshttp://www.a.com/b.js</a></td><td align="center">同一域名下</td><td align="center">允许</td></tr><tr><td><a href="http://www.a.com/lab/a.jshttp://www.a.com/script/b.js" target="_blank" rel="noopener">http://www.a.com/lab/a.jshttp://www.a.com/script/b.js</a></td><td align="center">同一域名下不同文件夹</td><td align="center">允许</td></tr><tr><td><a href="http://www.a.com:8000/a.jshttp://www.a.com/b.js" target="_blank" rel="noopener">http://www.a.com:8000/a.jshttp://www.a.com/b.js</a></td><td align="center">同一域名，不同端口</td><td align="center">不允许</td></tr><tr><td><a href="http://www.a.com/a.jshttps://www.a.com/b.js" target="_blank" rel="noopener">http://www.a.com/a.jshttps://www.a.com/b.js</a></td><td align="center">同一域名，不同协议</td><td align="center">不允许</td></tr><tr><td><a href="http://www.a.com/a.jshttp://70.32.92.74/b.js" target="_blank" rel="noopener">http://www.a.com/a.jshttp://70.32.92.74/b.js</a></td><td align="center">域名和域名对应ip</td><td align="center">不允许</td></tr><tr><td><a href="http://www.a.com/a.jshttp://script.a.com/b.js" target="_blank" rel="noopener">http://www.a.com/a.jshttp://script.a.com/b.js</a></td><td align="center">主域相同，子域不同</td><td align="center">不允许</td></tr><tr><td>（cookie这种情况下也不允许访问）<a href="http://www.a.com/a.jshttp://a.com/b.js" target="_blank" rel="noopener">http://www.a.com/a.jshttp://a.com/b.js</a></td><td align="center">同一域名，不同二级域名（同上）</td><td align="center">不允许（cookie这种情况下也不允许访问）</td></tr><tr><td><a href="http://www.cnblogs.com/a.jshttp://www.a.com/b.js" target="_blank" rel="noopener">http://www.cnblogs.com/a.jshttp://www.a.com/b.js</a></td><td align="center">不同域名</td><td align="center">不允许</td></tr><tr><td><strong>这里我们需要注意两点:</strong></td><td align="center"></td><td align="center"></td></tr></tbody></table><ol><li><p>如果是协议和端口造成的跨域问题“前台”是无能为力的；</p></li><li><p>在跨域问题上，域仅仅是通过“URL的首部”来识别而不会去尝试判断相同的ip地址对应着两个域或两个域是否在同一个ip上。<br>(“URL的首部”指window.location.protocol +window.location.host，也可以理解为“Domains, protocols and ports must match”。)</p></li></ol><h5 id="2-通过document-domain跨域"><a href="#2-通过document-domain跨域" class="headerlink" title="2. 通过document.domain跨域"></a>2. 通过document.domain跨域</h5><blockquote><p>前面说过了，浏览器有一个同源策略，其限制之一是不能通过ajax的方法去请求不同源中的文档。第二个限制是浏览器中不同域的框架之间是不能进行js的交互操作的。不同的框架之间是可以获取window对象的，但却无法获取相应的属性和方法。比如，有一个页面，它的地址是<a href="https://link.jianshu.com/?t=http://www.damonare.cn/a.html" target="_blank" rel="noopener">http://www.damonare.cn/a.html</a> ， 在这个页面里面有一个iframe，它的src是<a href="https://link.jianshu.com/?t=http://damonare.cn/b.html" target="_blank" rel="noopener">http://damonare.cn/b.html</a>, 很显然，这个页面与它里面的iframe框架是不同域的，所以我们是无法通过在页面中书写js代码来获取iframe中的东西的：</p></blockquote><pre><code>&lt;script type=&quot;text/javascript&quot;&gt;function test(){       var iframe = document.getElementById(&apos;ifame&apos;);        var win = document.contentWindow;//可以获取到iframe里的window对象，但该window对象的属性和方法几乎是不可用的  var doc = win.document;//这里获取不到iframe里的document对象  var name = win.name;//这里同样获取不到window对象的name属性}&lt;/script&gt;&lt;iframe id = &quot;iframe&quot; src=&quot;http://damonare.cn/b.html&quot;  = &quot;test()&quot;&gt;&lt;/iframe&gt;</code></pre><blockquote><p>这个时候，document.domain就可以派上用场了，我们只要把<a href="https://link.jianshu.com/?t=http://www.damonare.cn/a.html" target="_blank" rel="noopener">http://www.damonare.cn/a.html</a> 和 <a href="https://link.jianshu.com/?t=http://damonare.cn/b.html" target="_blank" rel="noopener">http://damonare.cn/b.html</a> 这两个页面的document.domain都设成相同的域名就可以了。但要注意的是，document.domain的设置是有限制的，我们只能把document.domain设置成自身或更高一级的父域，且主域必须相同。</p></blockquote><p>在页面<a href="https://link.jianshu.com/?t=http://www.damonare.cn/a.html" target="_blank" rel="noopener">http://www.damonare.cn/a.html</a> 中设置document.domain:</p><pre><code>&lt;iframe id = &quot;iframe&quot; src=&quot;http://damonare.cn/b.html&quot;  = &quot;test()&quot;&gt;&lt;/iframe&gt;&lt;script type=&quot;text/javascript&quot;&gt;document.domain = &apos;damonare.cn&apos;;//设置成主域function test(){//contentWindow 可取得子窗口的 window 对象    alert(document.getElementById(&apos;iframe&apos;).contentWindow);}&lt;/script&gt;</code></pre><p>在页面<a href="https://link.jianshu.com/?t=http://damonare.cn/b.html" target="_blank" rel="noopener">http://damonare.cn/b.html</a> 中也设置document.domain:</p><pre><code>&lt;script type=&quot;text/javascript&quot;&gt;//在iframe载入这个页面也设置document.domain，使之与主页面的document.domain相同document.domain = &apos;damonare.cn&apos;;&lt;/script&gt;</code></pre><p>修改document.domain的方法只适用于不同子域的框架间的交互。</p><h5 id="3-通过location-hash跨域"><a href="#3-通过location-hash跨域" class="headerlink" title="3. 通过location.hash跨域"></a>3. 通过location.hash跨域</h5><blockquote><p>因为父窗口可以对iframe进行URL读写，iframe也可以读写父窗口的URL，URL有一部分被称为hash，就是#号及其后面的字符，它一般用于浏览器锚点定位，Server端并不关心这部分，应该说HTTP请求过程中不会携带hash，所以这部分的修改不会产生HTTP请求，但是会产生浏览器历史记录。此方法的原理就是改变URL的hash部分来进行双向通信。每个window通过改变其他 window的location来发送消息（由于两个页面不在同一个域下IE、Chrome不允许修改parent.location.hash的值，所以要借助于父窗口域名下的一个代理iframe），并通过监听自己的URL的变化来接收消息。这个方式的通信会造成一些不必要的浏览器历史记录，而且有些浏览器不支持onhashchange事件，需要轮询来获知URL的改变，最后，这样做也存在缺点，诸如数据直接暴露在了url中，数据容量和类型都有限等。下面举例说明：</p></blockquote><blockquote><p>假如父页面是baidu.com/a.html,iframe嵌入的页面为google.com/b.html（此处省略了域名等url属性），要实现此两个页面间的通信可以通过以下方法。</p><ul><li>a.html传送数据到b.html</li><li>a.html下修改iframe的src为google.com/b.html#paco</li><li>b.html监听到url发生变化，触发相应操作</li><li>b.html传送数据到a.html，由于两个页面不在同一个域下IE、Chrome不允许修改parent.location.hash的值，所以要借助于父窗口域名下的一个代理iframe</li><li>b.html下创建一个隐藏的iframe，此iframe的src是<a href="https://link.jianshu.com/?t=http://baidu.com" target="_blank" rel="noopener">baidu.com</a>域下的，并挂上要传送的hash数据，如src=”<a href="https://link.jianshu.com/?t=http://www.baidu.com/proxy.html#data" target="_blank" rel="noopener">http://www.baidu.com/proxy.html#data</a>“</li><li>proxy.html监听到url发生变化，修改a.html的url（因为a.html和proxy.html同域，所以proxy.html可修改a.html的url hash）</li><li>a.html监听到url发生变化，触发相应操作</li></ul></blockquote><p>.b.html页面的关键代码如下:</p><pre><code>try {  parent.location.hash = &apos;data&apos;;  } catch (e) {  // ie、chrome的安全机制无法修改parent.location.hash，  var ifrproxy = document.createElement(&apos;iframe&apos;);  ifrproxy.style.display = &apos;none&apos;;  ifrproxy.src = &quot;http://www.baidu.com/proxy.html#data&quot;;  document.body.appendChild(ifrproxy);  </code></pre><p>}<br>proxy.html页面的关键代码如下 :</p><pre><code>//因为parent.parent（即baidu.com/a.html）和baidu.com/proxy.html属于同一个域，所以可以改变其location.hash的值  parent.parent.location.hash = self.location.hash.substring(1);</code></pre><h5 id="4-通过HTML5的postMessage方法跨域"><a href="#4-通过HTML5的postMessage方法跨域" class="headerlink" title="4. 通过HTML5的postMessage方法跨域"></a>4. 通过HTML5的postMessage方法跨域</h5><blockquote><p>高级浏览器Internet Explorer 8+, chrome，Firefox , Opera  和 Safari 都将支持这个功能。这个功能主要包括接受信息的”message”事件和发送消息的”postMessage”方法。比如damonare.cn域的A页面通过iframe嵌入了一个google.com域的B页面，可以通过以下方法实现A和B的通信</p></blockquote><p>A页面通过postMessage方法发送消息：</p><pre><code>window. = function() {  var ifr = document.getElementById(&apos;ifr&apos;);  var targetOrigin = &quot;http://www.google.com&quot;;  ifr.contentWindow.postMessage(&apos;hello world!&apos;, targetOrigin);  };</code></pre><blockquote><p>postMessage的使用方法：</p><ul><li>otherWindow.postMessage(message, targetOrigin);</li><li>otherWindow:指目标窗口，也就是给哪个window发消息，是 window.frames 属性的成员或者由 window.open 方法创建的窗口</li><li>message:   是要发送的消息，类型为 String、Object (IE8、9 不支持)</li><li>targetOrigin:   是限定消息接收范围，不限制请使用 ‘*<br>B页面通过message事件监听并接受消息:</li></ul></blockquote><pre><code>var onmessage = function (event) {  var data = event.data;//消息  var origin = event.origin;//消息来源地址  var source = event.source;//源Window对象  if(origin==&quot;http://www.baidu.com&quot;){  console.log(data);//hello world!  }  };  if (typeof window.addEventListener != &apos;undefined&apos;) {  window.addEventListener(&apos;message&apos;, onmessage, false);  } else if (typeof window.attachEvent != &apos;undefined&apos;) {  //for ie  window.attachEvent(&apos;onmessage&apos;, onmessage);  }</code></pre><p>同理，也可以B页面发送消息，然后A页面监听并接受消息。</p><h5 id="5-通过jsonp跨域"><a href="#5-通过jsonp跨域" class="headerlink" title="5.通过jsonp跨域"></a>5.通过jsonp跨域</h5><blockquote><p>刚才说的这几种都是双向通信的，即两个iframe，页面与iframe或是页面与页面之间的，下面说几种单项跨域的（一般用来获取数据），因为通过script标签引入的js是不受同源策略的限制的。所以我们可以通过script标签引入一个js或者是一个其他后缀形式（如php，jsp等）的文件，此文件返回一个js函数的调用。</p></blockquote><blockquote><p>比如，有个a.html页面，它里面的代码需要利用ajax获取一个不同域上的json数据，假设这个json数据地址是<a href="https://link.jianshu.com/?t=http://damonare.cn/data.php" target="_blank" rel="noopener">http://damonare.cn/data.php</a>, 那么a.html中的代码就可以这样：</p></blockquote><pre><code>&lt;script type=&quot;text/javascript&quot;&gt;//处理获得的json数据    function dosomething(jsondata){            }&lt;/script&gt;&lt;script src=&quot;http://example.com/data.php?callback=dosomething&quot;&gt;&lt;/script&gt;</code></pre><blockquote><p>我们看到获取数据的地址后面还有一个callback参数，按惯例是用这个参数名，但是你用其他的也一样。当然如果获取数据的jsonp地址页面不是你自己能控制的，就得按照提供数据的那一方的规定格式来操作了。</p></blockquote><blockquote><p>因为是当做一个js文件来引入的，所以<a href="https://link.jianshu.com/?t=http://damonare.cn/data.php" target="_blank" rel="noopener">http://damonare.cn/data.php</a> 返回的必须是一个能执行的js文件，所以这个页面的php代码可能是这样的(一定要和后端约定好哦):</p></blockquote><pre><code>&lt;?php$callback = $_GET[&apos;callback&apos;];//得到回调函数名      $data = array(&apos;a&apos;,&apos;b&apos;,&apos;c&apos;);//要返回的数据    echo $callback.&apos;(&apos;.json_encode($data).&apos;)&apos;;//输出?&gt;</code></pre><blockquote><p>最终，输出结果为：dosomething([‘a’,’b’,’c’]);</p></blockquote><blockquote><p>如果你的页面使用jquery，那么通过它封装的方法就能很方便的来进行jsonp操作了。</p></blockquote><pre><code>&lt;script type=&quot;text/javascript&quot;&gt;/处理获得的json数据$.getJSON(&apos;http://example.com/data.php?callback=?,function(jsondata)&apos;){        /});&lt;/script&gt;</code></pre><blockquote><p>jquery会自动生成一个全局函数来替换callback=?中的问号，之后获取到数据后又会自动销毁，实际上就是起一个临时代理函数的作用。$.getJSON方法会自动判断是否跨域，不跨域的话，就调用普通的ajax方法；跨域的话，则会以异步加载js文件的形式来调用jsonp的回调函数。</p><ul><li>JSONP的优缺点</li><li>JSONP的优点是：它不像XMLHttpRequest对象实现的Ajax请求那样受到同源策略的限制；它的兼容性更好，在更加古老的浏览器中都可以运行，不需要XMLHttpRequest或ActiveX的支持；并且在请求完毕后可以通过调用callback的方式回传结果。</li><li>JSONP的缺点则是：它只支持GET请求而不支持POST等其它类型的HTTP请求；它只支持跨域HTTP请求这种情况，不能解决不同域的两个页面之间如何进行JavaScript调用的问题。</li></ul></blockquote><h5 id="6-通过CORS跨域"><a href="#6-通过CORS跨域" class="headerlink" title="6. 通过CORS跨域"></a>6. 通过CORS跨域</h5><blockquote><p>CORS（Cross-Origin Resource Sharing）跨域资源共享，定义了必须在访问跨域资源时，浏览器与服务器应该如何沟通。CORS背后的基本思想就是使用自定义的HTTP头部让浏览器与服务器进行沟通，从而决定请求或响应是应该成功还是失败。目前，所有浏览器都支持该功能，IE浏览器不能低于IE10。整个CORS通信过程，都是浏览器自动完成，不需要用户参与。对于开发者来说，CORS通信与同源的AJAX通信没有差别，代码完全一样。浏览器一旦发现AJAX请求跨源，就会自动添加一些附加的头信息，有时还会多出一次附加的请求，但用户不会有感觉。</p></blockquote><p><strong>因此，实现CORS通信的关键是服务器。只要服务器实现了CORS接口，就可以跨源通信。</strong></p><p>平时的ajax请求可能是这样的:</p><pre><code>&lt;script type=&quot;text/javascript&quot;&gt;var xhr = new XMLHttpRequest();xhr.open(&quot;POST&quot;, &quot;/damonare&quot;,true);xhr.send();&lt;/script&gt;</code></pre><p>以上damonare部分是相对路径，如果我们要使用CORS，相关Ajax代码可能如下所示：</p><pre><code>&lt;script type=&quot;text/javascript&quot;&gt;var xhr = new XMLHttpRequest();xhr.open(&quot;GET&quot;, &quot;http://segmentfault.com/u/trigkit4/&quot;,true);xhr.send();&lt;/script&gt;</code></pre><blockquote><p>代码与之前的区别就在于相对路径换成了其他域的绝对路径，也就是你要跨域访问的接口地址。</p></blockquote><blockquote><p>服务器端对于CORS的支持，主要就是通过设置Access-Control-Allow-Origin来进行的。如果浏览器检测到相应的设置，就可以允许Ajax进行跨域的访问。关于CORS更多了解可以看下阮一峰老师的这一篇文章：<a href="https://link.jianshu.com/?t=http://www.ruanyifeng.com/blog/2016/04/cors.html" target="_blank" rel="noopener">跨域资源共享 CORS 详解</a></p><ul><li>CORS和JSONP对比</li><li>JSONP只能实现GET请求，而CORS支持所有类型的HTTP请求。</li><li>使用CORS，开发者可以使用普通的XMLHttpRequest发起请求和获得数据，比起JSONP有更好的错误处理。</li><li>JSONP主要被老的浏览器支持，它们往往不支持CORS，而绝大多数现代浏览器都已经支持了CORS）。</li></ul></blockquote><p>CORS与JSONP相比，无疑更为先进、方便和可靠。</p><h5 id="7-通过window-name跨域"><a href="#7-通过window-name跨域" class="headerlink" title="7. 通过window.name跨域"></a>7. 通过window.name跨域</h5><blockquote><p>window对象有个name属性，该属性有个特征：即在一个窗口(window)的生命周期内,窗口载入的所有的页面都是共享一个window.name的，每个页面对window.name都有读写的权限，window.name是持久存在一个窗口载入过的所有页面中的，并不会因新页面的载入而进行重置。</p></blockquote><p>比如：我们在任意一个页面输入</p><pre><code>window.name = &quot;My window&apos;s name&quot;;setTimeout(function(){    window.location.href = &quot;http://damonare.cn/&quot;;},1000)</code></pre><p>进入damonare.cn页面后我们再检测再检测 window.name :</p><pre><code>window.name; // My window&apos;s name</code></pre><blockquote><p>可以看到，如果在一个标签里面跳转网页的话，我们的 window.name 是不会改变的。<br>基于这个思想，我们可以在某个页面设置好 window.name 的值，然后跳转到另外一个页面。在这个页面中就可以获取到我们刚刚设置的 window.name 了。</p></blockquote><blockquote><p>由于安全原因，浏览器始终会保持 window.name 是string 类型。</p></blockquote><blockquote><p>同样这个方法也可以应用到和iframe的交互来：<br>比如：我的页面(<a href="https://link.jianshu.com/?t=http://damonare.cn/index.html" target="_blank" rel="noopener">http://damonare.cn/index.html</a>)中内嵌了一个iframe：</p></blockquote><pre><code>&lt;iframe id=&quot;iframe&quot; src=&quot;http://www.google.com/iframe.html&quot;&gt;&lt;/iframe&gt;</code></pre><blockquote><p>在 iframe.html 中设置好了 window.name 为我们要传递的字符串。<br>我们在 index.html 中写了下面的代码：</p></blockquote><pre><code>var iframe = document.getElementById(&apos;iframe&apos;);var data = &apos;&apos;;iframe. = function() {data = iframe.contentWindow.name;};</code></pre><p>Boom!报错！肯定的，因为两个页面不同源嘛，想要解决这个问题可以这样干：</p><pre><code>var iframe = document.getElementById(&apos;iframe&apos;);var data = &apos;&apos;;iframe. = function() {iframe. = function(){    data = iframe.contentWindow.name;}iframe.src = &apos;about:blank&apos;;};</code></pre><p><strong>或者将里面的 about:blank 替换成某个同源页面（about:blank，javascript: 和 data: 中的内容，继承了载入他们的页面的源。）</strong></p><p>这种方法与 document.domain 方法相比，放宽了域名后缀要相同的限制，可以从任意页面获取 string 类型的数据。</p><h3 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h3><blockquote><p>其它诸如中间件跨域，服务器代理跨域，Flash URLLoader跨域，动态创建script标签（简化版本的jsonp）不作讨论。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;作者：Qyouu&lt;br&gt;链接：&lt;a href=&quot;https://www.imooc.com/article/70123&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.imooc.com/article/70123&lt;/a&gt;&lt;br&gt;来源：慕课网&lt;/p&gt;
&lt;h6 id=&quot;本文对原文章进行了样式整理，内容如下：&quot;&gt;&lt;a href=&quot;#本文对原文章进行了样式整理，内容如下：&quot; class=&quot;headerlink&quot; title=&quot;本文对原文章进行了样式整理，内容如下：&quot;&gt;&lt;/a&gt;本文对原文章进行了样式整理，内容如下：&lt;/h6&gt;&lt;blockquote&gt;
&lt;p&gt;相信每一个前端er对于跨域这两个字都不会陌生，在实际项目中应用也是比较多的。但跨域方法的多种多样实在让人目不暇接。老规矩，碰到这种情况，就只能自己总结一篇博客，作为记录。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="编程概念类" scheme="http://liugezhou.online/categories/%E7%BC%96%E7%A8%8B%E6%A6%82%E5%BF%B5%E7%B1%BB/"/>
    
    
      <category term="前端跨域" scheme="http://liugezhou.online/tags/%E5%89%8D%E7%AB%AF%E8%B7%A8%E5%9F%9F/"/>
    
  </entry>
  
  <entry>
    <title>服务端渲染</title>
    <link href="http://liugezhou.online/2018/10/15/%E6%9C%8D%E5%8A%A1%E7%AB%AF%E6%B8%B2%E6%9F%93/"/>
    <id>http://liugezhou.online/2018/10/15/服务端渲染/</id>
    <published>2018-10-14T16:00:00.000Z</published>
    <updated>2019-07-25T08:29:33.467Z</updated>
    
    <content type="html"><![CDATA[<h3 id="导读"><a href="#导读" class="headerlink" title="导读"></a>导读</h3><h5 id="本文主要是从三个方面学习服务端渲染，内容整理自多个博客。"><a href="#本文主要是从三个方面学习服务端渲染，内容整理自多个博客。" class="headerlink" title="本文主要是从三个方面学习服务端渲染，内容整理自多个博客。"></a>本文主要是从三个方面学习服务端渲染，内容整理自多个博客。</h5><blockquote><ul><li>服务端渲染是什么？什么是服务端渲染？（服务端渲染的运行机制）</li><li>为什么使用服务端渲染？服务端渲染解决了什么问题？</li><li>什么情况下使用服务端渲染？（服务端渲染的应用实例与使用场景）</li></ul></blockquote><hr><a id="more"></a><h3 id="一、概念"><a href="#一、概念" class="headerlink" title="一、概念"></a>一、概念</h3><p>首先，说到服务端渲染我们要先对渲染这个概念有一个大概的了解</p><blockquote><p>渲染：就是将数据和模版组装成html</p></blockquote><hr><h4 id="客户端渲染（CSR）VS服务端渲染-SSR"><a href="#客户端渲染（CSR）VS服务端渲染-SSR" class="headerlink" title="客户端渲染（CSR）VS服务端渲染(SSR)"></a>客户端渲染（CSR）VS服务端渲染(SSR)</h4><p>那么，为了更好的理解服务端渲染，我们也很有必要去了解一下客户端渲染。将客户端渲染与服务端渲染同时进行学习理解。</p><hr><h5 id="1-客户端渲染"><a href="#1-客户端渲染" class="headerlink" title="1.客户端渲染"></a>1.客户端渲染</h5><h6 id="1-1概念"><a href="#1-1概念" class="headerlink" title="1.1概念"></a>1.1概念</h6><blockquote><p>解释一：客户端渲染模式下，服务端把渲染的静态文件给到客户端，客户端拿到服务端发送过来的文件自己跑一遍js，根据JS运行结果，生成相应DOM，然后渲染给用户。</p></blockquote><blockquote><p>解释二：html 仅仅作为静态文件，客户端在请求时，服务端不做任何处理，直接以原文件的形式返回给客户端客户端，然后根据 html 上的 JavaScript，生成 DOM 插入 html。</p></blockquote><blockquote><p><code>延伸</code>：前端渲染的方式起源于JavaScript的兴起，ajax的大热更是让前端渲染更加成熟，前端渲染真正意义上的实现了前后端分离，前端只专注于UI的开发，后端只专注于逻辑的开发，前后端交互只通过约定好的API来交互，后端提供json数据，前端循环json生成DOM插入到页面中去。</p></blockquote><h6 id="1-2-利弊"><a href="#1-2-利弊" class="headerlink" title="1.2.利弊"></a>1.2.利弊</h6><blockquote><p><code>好处</code>： 网络传输数据量小、减少了服务器压力、前后端分离、局部刷新，无需每次请求完整页面、交互好可实现各种效果</p></blockquote><blockquote><p><code>坏处</code>：不利于SEO、爬虫看不到完整的程序源码、首屏渲染慢（渲染前需要下载一堆js和css等）</p></blockquote><hr><h5 id="2-服务端渲染"><a href="#2-服务端渲染" class="headerlink" title="2.服务端渲染"></a>2.服务端渲染</h5><h6 id="2-1-概念"><a href="#2-1-概念" class="headerlink" title="2.1.概念"></a>2.1.概念</h6><blockquote><p>解释一：服务端在返回 html 之前，在特定的区域，符号里用数据填充，再给客户端，客户端只负责解析 HTML 。</p></blockquote><blockquote><p>解释二：服务端渲染的模式下，当用户第一次请求页面时，由服务器把需要的组件或页面渲染成 HTML 字符串，然后把它返回给客户端。客户端拿到手的，是可以直接渲染然后呈现给用户的 HTML 内容，不需要为了生成 DOM 内容自己再去跑一遍 JS 代码。使用服务端渲染的网站，可以说是“所见即所得”，页面上呈现的内容，我们在 html 源文件里也能找到。</p></blockquote><h6 id="2-2-利弊"><a href="#2-2-利弊" class="headerlink" title="2.2.利弊"></a>2.2.利弊</h6><blockquote><p><code>好处</code>:首屏渲染快、利于SEO、可以生成缓存片段，生成静态化文件、节能（对比客户端渲染的耗电）</p></blockquote><blockquote><p><code>坏处</code>:用户体验较差、不容易维护，通常前端改了部分html或者css，后端也需要修改。</p></blockquote><h5 id="3-对比"><a href="#3-对比" class="headerlink" title="3.对比"></a>3.对比</h5><blockquote><p>其实前后端的渲染本质是一样的，都是字符串的拼接，将数据渲染进一些固定格式的html代码中形成最终的html展示在用户页面上。  因为字符串的拼接必然会损耗一些性能资源。<br>如果在服务器端渲染，那么消耗的就是server端的性能。<br>如果是在客户端渲染，常见的手段，比如是直接生成DOM插入到html 中，或者是使用一些前端的模板引擎等。他们初次渲染的原理大多是将原html中的数据标记（例如）替换。</p></blockquote><hr><h3 id="二、为什么使用服务端渲染，它解决的是什么问题"><a href="#二、为什么使用服务端渲染，它解决的是什么问题" class="headerlink" title="二、为什么使用服务端渲染，它解决的是什么问题"></a>二、为什么使用服务端渲染，它解决的是什么问题</h3><p>简单总结起来就是两点：</p><blockquote><p><code>首屏加载快</code><br>相比于加载单页应用，我只需要加载当前页面的内容，而不需要像 React 或者 Vue 一样加载全部的 js 文件<br><code>SEO 优化</code><br>对于单页应用，搜索引擎并不能收录到 ajax 爬取数据之后然后再动态 js 渲染出来的页面。</p></blockquote><p>为了更便于理解，下面几段话摘自掘金小册：</p><blockquote><p>事实上，很多网站是出于效益的考虑才启用服务端渲染，性能倒是在其次。<br>假设 A 网站页面中有一个关键字叫“前端性能优化”，这个关键字是 JS 代码跑过一遍后添加到 HTML 页面中的。那么客户端渲染模式下，我们在搜索引擎搜索这个关键字，是找不到 A 网站的——搜索引擎只会查找现成的内容，不会帮你跑 JS 代码。A 网站的运营方见此情形，感到很头大：搜索引擎搜不出来，用户找不到我们，谁还会用我的网站呢？为了把“现成的内容”拿给搜索引擎看，A 网站不得不启用服务端渲染。<br>但性能在其次，不代表性能不重要。服务端渲染解决了一个非常关键的性能问题——首屏加载速度过慢。在客户端渲染模式下，我们除了加载 HTML，还要等渲染所需的这部分 JS 加载完，之后还得把这部分 JS 在浏览器上再跑一遍。这一切都是发生在用户点击了我们的链接之后的事情，在这个过程结束之前，用户始终见不到我们网页的庐山真面目，也就是说用户一直在等！相比之下，服务端渲染模式下，服务器给到客户端的已经是一个直接可以拿来呈现给用户的网页，中间环节早在服务端就帮我们做掉了，用户岂不“美滋滋”？</p></blockquote><hr><h3 id="三、-什么情况下使用服务端渲染？"><a href="#三、-什么情况下使用服务端渲染？" class="headerlink" title="三、 什么情况下使用服务端渲染？"></a>三、 什么情况下使用服务端渲染？</h3><p>通过服务端渲染的概念以及它的两个特点：<code>首屏加载速度快</code>、<code>SEO优化</code>。<br>我们知道，服务端渲染其实就是<code>由浏览器做的一些事情，我们放到了服务端去做</code>，那么对于掘金、简书、CSDN、知乎等网站的搭建，这种在网上一搜搜出一堆东西的网站，SEO做的很好，应该多少都用到服务端渲染了吧？当然，做服务端渲染成本是高昂的。<br>vue全家桶或者react全家桶，都是推荐通过服务端渲染来实现路由的。<br>服务端渲染并非完全之策（服务器稀少而宝贵），关于首屏渲染体验以及SEO的优化方案很多，在不使用服务端渲染这个操作下，我们最好的处理方式就是找寻替代优化方案。</p><p>关于在server端还是在browser端渲染的选择，更多的是要看业务场景。</p><hr><h3 id="相关文章延伸阅读"><a href="#相关文章延伸阅读" class="headerlink" title="相关文章延伸阅读"></a>相关文章延伸阅读</h3><p><a href="https://blog.csdn.net/b9q8e64lo6mm/article/details/79418969" target="_blank" rel="noopener">https://blog.csdn.net/b9q8e64lo6mm/article/details/79418969</a> （力荐）</p><h5 id="欢迎关注我的简书文章：六个周"><a href="#欢迎关注我的简书文章：六个周" class="headerlink" title="欢迎关注我的简书文章：六个周"></a>欢迎关注我的简书文章：<a href="https://www.jianshu.com/p/b8cfa496b7ec" target="_blank" rel="noopener">六个周</a></h5>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;导读&quot;&gt;&lt;a href=&quot;#导读&quot; class=&quot;headerlink&quot; title=&quot;导读&quot;&gt;&lt;/a&gt;导读&lt;/h3&gt;&lt;h5 id=&quot;本文主要是从三个方面学习服务端渲染，内容整理自多个博客。&quot;&gt;&lt;a href=&quot;#本文主要是从三个方面学习服务端渲染，内容整理自多个博客。&quot; class=&quot;headerlink&quot; title=&quot;本文主要是从三个方面学习服务端渲染，内容整理自多个博客。&quot;&gt;&lt;/a&gt;本文主要是从三个方面学习服务端渲染，内容整理自多个博客。&lt;/h5&gt;&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;服务端渲染是什么？什么是服务端渲染？（服务端渲染的运行机制）&lt;/li&gt;
&lt;li&gt;为什么使用服务端渲染？服务端渲染解决了什么问题？&lt;/li&gt;
&lt;li&gt;什么情况下使用服务端渲染？（服务端渲染的应用实例与使用场景）&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
    
    </summary>
    
      <category term="编程概念类" scheme="http://liugezhou.online/categories/%E7%BC%96%E7%A8%8B%E6%A6%82%E5%BF%B5%E7%B1%BB/"/>
    
    
      <category term="服务端渲染" scheme="http://liugezhou.online/tags/%E6%9C%8D%E5%8A%A1%E7%AB%AF%E6%B8%B2%E6%9F%93/"/>
    
  </entry>
  
  <entry>
    <title>Flex布局</title>
    <link href="http://liugezhou.online/2018/08/22/Flex%E5%B8%83%E5%B1%80/"/>
    <id>http://liugezhou.online/2018/08/22/Flex布局/</id>
    <published>2018-08-21T16:00:00.000Z</published>
    <updated>2019-07-25T08:06:00.776Z</updated>
    
    <content type="html"><![CDATA[<h6 id="（本文章整理自网络，方便闲时的阅读、学习使用。）"><a href="#（本文章整理自网络，方便闲时的阅读、学习使用。）" class="headerlink" title="（本文章整理自网络，方便闲时的阅读、学习使用。）"></a>（本文章整理自网络，方便闲时的阅读、学习使用。）</h6><h5 id="一、Flex布局是什么？"><a href="#一、Flex布局是什么？" class="headerlink" title="一、Flex布局是什么？"></a>一、Flex布局是什么？</h5><hr><p>Flex 是 Flexible Box 的缩写，意为”弹性布局”，用来为盒状模型提供最大的灵活性。<br>任何一个容器都可以指定为 Flex 布局。</p><pre><code>.box{  display: flex;}</code></pre><p>行内元素也可以使用 Flex 布局。</p><pre><code>.box{  display: inline-flex;}</code></pre><p>Webkit 内核的浏览器，必须加上-webkit前缀。</p><pre><code>.box{  display: -webkit-flex; /* Safari */  display: flex;}</code></pre><p>注意，设为 Flex 布局以后，子元素的float、clear和vertical-align属性将失效。</p><a id="more"></a><h5 id="二、基本概念"><a href="#二、基本概念" class="headerlink" title="二、基本概念"></a>二、基本概念</h5><hr><blockquote><p>采用 Flex 布局的元素，称为 Flex 容器（flex container），简称”容器”。它的所有子元素自动成为容器成员，称为 Flex 项目（flex item），简称”项目”。</p></blockquote><blockquote><p>容器默认存在两根轴：水平的主轴（main axis）和垂直的交叉轴（cross axis）。主轴的开始位置（与边框的交叉点）叫做main start，结束位置叫做main end；交叉轴的开始位置叫做cross start，结束位置叫做cross end。</p></blockquote><blockquote><p>项目默认沿主轴排列。单个项目占据的主轴空间叫做main size，占据的交叉轴空间叫做cross size。</p></blockquote><h5 id="三、容器的属性"><a href="#三、容器的属性" class="headerlink" title="三、容器的属性"></a>三、容器的属性</h5><hr><p>以下6个属性设置在容器上</p><blockquote><ul><li>flex-direction</li><li>flex-wrap</li><li>flex-flow</li><li>justify-content</li><li>align-items</li><li>align-content</li></ul></blockquote><h6 id="3-1-flex-direction属性"><a href="#3-1-flex-direction属性" class="headerlink" title="3.1 flex-direction属性"></a>3.1 flex-direction属性</h6><hr><p>flex-direction属性决定主轴的方向（即项目的排列方向）。</p><pre><code>.box {  flex-direction: row | row-reverse | column | column-reverse;}</code></pre><p>它可能有4个值。</p><blockquote><ul><li>row（默认值）：主轴为水平方向，起点在左端。<ul><li>row-reverse：主轴为水平方向，起点在右端。</li><li>column：主轴为垂直方向，起点在上沿。</li><li>column-reverse：主轴为垂直方向，起点在下沿。</li></ul></li></ul></blockquote><h6 id="3-2-flex-wrap属性"><a href="#3-2-flex-wrap属性" class="headerlink" title="3.2 flex-wrap属性"></a>3.2 flex-wrap属性</h6><hr><p>默认情况下，项目都排在一条线（又称”轴线”）上。flex-wrap属性定义，如果一条轴线排不下，如何换行。</p><pre><code>.box{  flex-wrap: nowrap | wrap | wrap-reverse;}</code></pre><p>它可能取三个值。</p><blockquote><ol><li>nowrap（默认）：不换行。</li><li>wrap：换行，第一行在上方。</li><li>wrap-reverse：换行，第一行在下方。</li></ol></blockquote><h6 id="3-3-flex-flow"><a href="#3-3-flex-flow" class="headerlink" title="3.3 flex-flow"></a>3.3 flex-flow</h6><hr><p>flex-flow属性是flex-direction属性和flex-wrap属性的简写形式，默认值为row nowrap。</p><pre><code>.box {  flex-flow: &lt;flex-direction&gt; || &lt;flex-wrap&gt;;}</code></pre><h6 id="justify-content属性"><a href="#justify-content属性" class="headerlink" title="justify-content属性"></a>justify-content属性</h6><hr><p>justify-content属性定义了项目在主轴上的对齐方式。</p><pre><code>.box {  justify-content: flex-start | flex-end | center | space-between | space-around;}</code></pre><p>它可能取5个值，具体对齐方式与轴的方向有关。下面假设主轴为从左到右。</p><blockquote><ul><li>flex-start（默认值）：左对齐</li><li>flex-end：右对齐</li><li>center： 居中</li><li>space-between：两端对齐，项目之间的间隔都相等。</li><li>space-around：每个项目两侧的间隔相等。所以，项目之间的间隔比项目与边框的间隔大一倍。</li></ul></blockquote><h6 id="3-5-align-items属性"><a href="#3-5-align-items属性" class="headerlink" title="3.5 align-items属性"></a>3.5 align-items属性</h6><hr><p>align-items属性定义项目在交叉轴上如何对齐。</p><pre><code>.box {  align-items: flex-start | flex-end | center | baseline | stretch;}</code></pre><p>它可能取5个值。具体的对齐方式与交叉轴的方向有关，下面假设交叉轴从上到下。</p><blockquote><ul><li>flex-start：交叉轴的起点对齐。</li><li>flex-end：交叉轴的终点对齐。</li><li>center：交叉轴的中点对齐。</li><li>baseline: 项目的第一行文字的基线对齐。</li><li>stretch（默认值）：如果项目未设置高度或设为auto，将占满整个容器的高度。</li></ul></blockquote><h6 id="3-6-align-content属性"><a href="#3-6-align-content属性" class="headerlink" title="3.6 align-content属性"></a>3.6 align-content属性</h6><hr><p>align-content属性定义了多根轴线的对齐方式。如果项目只有一根轴线，该属性不起作用。</p><pre><code>.box {  align-content: flex-start | flex-end | center | space-between | space-around | stretch;}</code></pre><p>该属性可能取6个值。</p><blockquote><ul><li>flex-start：与交叉轴的起点对齐。</li><li>flex-end：与交叉轴的终点对齐。</li><li>center：与交叉轴的中点对齐。</li><li>space-between：与交叉轴两端对齐，轴线之间的间隔平均分布。</li><li>space-around：每根轴线两侧的间隔都相等。所以，轴线之间的间隔比轴线与边框的间隔大一倍。<pre><code>stretch（默认值）：轴线占满整个交叉轴。</code></pre></li></ul></blockquote><h5 id="四、项目的属性"><a href="#四、项目的属性" class="headerlink" title="四、项目的属性"></a>四、项目的属性</h5><hr><p>以下6个属性设置在项目上</p><blockquote><ul><li>order</li><li>flex-grow</li><li>flex-shrink</li><li>flex-basis</li><li>flex</li><li>align-self</li></ul></blockquote><h6 id="4-1-order属性"><a href="#4-1-order属性" class="headerlink" title="4.1 order属性"></a>4.1 order属性</h6><hr><p>order属性定义项目的排列顺序。数值越小，排列越靠前，默认为0。</p><pre><code>.item {  order: &lt;integer&gt;;}</code></pre><h6 id="4-2-flex-grow属性"><a href="#4-2-flex-grow属性" class="headerlink" title="4.2 flex-grow属性"></a>4.2 flex-grow属性</h6><hr><p>flex-grow属性定义项目的放大比例，默认为0，即如果存在剩余空间，也不放大。</p><pre><code>.item {  flex-grow: &lt;number&gt;; /* default 0 */}</code></pre><p>如果所有项目的flex-grow属性都为1，则它们将等分剩余空间（如果有的话）。如果一个项目的flex-grow属性为2，其他项目都为1，则前者占据的剩余空间将比其他项多一倍。</p><h6 id="4-3-flex-shrink属性"><a href="#4-3-flex-shrink属性" class="headerlink" title="4.3 flex-shrink属性"></a>4.3 flex-shrink属性</h6><hr><p>flex-shrink属性定义了项目的缩小比例，默认为1，即如果空间不足，该项目将缩小。</p><pre><code>.item {  flex-shrink: &lt;number&gt;; /* default 1 */}</code></pre><p>如果所有项目的flex-shrink属性都为1，当空间不足时，都将等比例缩小。如果一个项目的flex-shrink属性为0，其他项目都为1，则空间不足时，前者不缩小。</p><p>负值对该属性无效。</p><h6 id="4-4-flex-basis属性"><a href="#4-4-flex-basis属性" class="headerlink" title="4.4 flex-basis属性"></a>4.4 flex-basis属性</h6><hr><p>flex-basis属性定义了在分配多余空间之前，项目占据的主轴空间（main size）。浏览器根据这个属性，计算主轴是否有多余空间。它的默认值为auto，即项目的本来大小。</p><pre><code>.item {  flex-basis: &lt;length&gt; | auto; /* default auto */}</code></pre><p>它可以设为跟width或height属性一样的值（比如350px），则项目将占据固定空间。</p><h6 id="4-5-flex属性"><a href="#4-5-flex属性" class="headerlink" title="4.5 flex属性"></a>4.5 flex属性</h6><hr><p>flex属性是flex-grow, flex-shrink 和 flex-basis的简写，默认值为0 1 auto。后两个属性可选。</p><pre><code>.item {  flex: none | [ &lt;&apos;flex-grow&apos;&gt; &lt;&apos;flex-shrink&apos;&gt;? || &lt;&apos;flex-basis&apos;&gt; ]}</code></pre><p>该属性有两个快捷值：auto (1 1 auto) 和 none (0 0 auto)。</p><p>建议优先使用这个属性，而不是单独写三个分离的属性，因为浏览器会推算相关值。</p><h6 id="4-6-align-self属性"><a href="#4-6-align-self属性" class="headerlink" title="4.6 align-self属性"></a>4.6 align-self属性</h6><hr><p>align-self属性允许单个项目有与其他项目不一样的对齐方式，可覆盖align-items属性。默认值为auto，表示继承父元素的align-items属性，如果没有父元素，则等同于stretch。</p><pre><code>.item {  align-self: auto | flex-start | flex-end | center | baseline | stretch;}</code></pre><p>该属性可能取6个值，除了auto，其他都与align-items属性完全一致。</p><hr>]]></content>
    
    <summary type="html">
    
      &lt;h6 id=&quot;（本文章整理自网络，方便闲时的阅读、学习使用。）&quot;&gt;&lt;a href=&quot;#（本文章整理自网络，方便闲时的阅读、学习使用。）&quot; class=&quot;headerlink&quot; title=&quot;（本文章整理自网络，方便闲时的阅读、学习使用。）&quot;&gt;&lt;/a&gt;（本文章整理自网络，方便闲时的阅读、学习使用。）&lt;/h6&gt;&lt;h5 id=&quot;一、Flex布局是什么？&quot;&gt;&lt;a href=&quot;#一、Flex布局是什么？&quot; class=&quot;headerlink&quot; title=&quot;一、Flex布局是什么？&quot;&gt;&lt;/a&gt;一、Flex布局是什么？&lt;/h5&gt;&lt;hr&gt;
&lt;p&gt;Flex 是 Flexible Box 的缩写，意为”弹性布局”，用来为盒状模型提供最大的灵活性。&lt;br&gt;任何一个容器都可以指定为 Flex 布局。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;.box{
  display: flex;
}&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;行内元素也可以使用 Flex 布局。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;.box{
  display: inline-flex;
}&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Webkit 内核的浏览器，必须加上-webkit前缀。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;.box{
  display: -webkit-flex; /* Safari */
  display: flex;
}&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;注意，设为 Flex 布局以后，子元素的float、clear和vertical-align属性将失效。&lt;/p&gt;
    
    </summary>
    
      <category term="web前端" scheme="http://liugezhou.online/categories/web%E5%89%8D%E7%AB%AF/"/>
    
      <category term="HTML/CSS" scheme="http://liugezhou.online/categories/web%E5%89%8D%E7%AB%AF/HTML-CSS/"/>
    
    
      <category term="flex" scheme="http://liugezhou.online/tags/flex/"/>
    
  </entry>
  
</feed>
