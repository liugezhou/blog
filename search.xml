<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Just JavaScript--03 |  Values and Variables</title>
      <link href="/2020/07/24/JustJS-03/"/>
      <url>/2020/07/24/JustJS-03/</url>
      
        <content type="html"><![CDATA[<h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><blockquote><p> Dan Abramov:Redux作者，React社区大神。<br>前一段时间发起了一个活动，通过邮箱订阅他写的一个小专栏，每写好一片草稿就会发到你的邮箱里面。<br>这是这篇小专栏的第三节：‘Values and Variables’–“值和变量”。<br>下面内容是在原作基础上，用我的大白话翻译的文章内容，文章原文贴至末尾。 </p></blockquote><a id="more"></a><blockquote><p>我们将通过一些代码片段启动本节内容：  </p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">let reactions = &apos;yikes&apos;;</span><br><span class="line">reactions[0] = &apos;l&apos;;</span><br><span class="line">console.log(reactions);</span><br></pre></td></tr></table></figure><blockquote><p>你觉得上面代码的执行结果是什么？我们还没有讲到这个知识点，所以即使你没思路也没关系。但是还是依据你现在对JS的掌握去解答这个问题。  </p></blockquote><blockquote><p>现在你可以花一些时间一步一步的去分析上面每一行代码的运行过程，留意你现有思维模式中的任何空白或不确定因素，并把它们写下来，如果你对此有任何疑问，试着尽可能清晰地表达出来。</p><p>…………</p></blockquote><blockquote><p>上面的输出结果为 <code>yikes</code>，若在<code>use strict</code>模式下，会抛出错误。最终的答案是不会输出<code>likes</code>的。 </p></blockquote><h4 id="原始数据类型的值是不可变的-Primitive-Values-Are-Immutable"><a href="#原始数据类型的值是不可变的-Primitive-Values-Are-Immutable" class="headerlink" title="原始数据类型的值是不可变的(Primitive Values Are Immutable)"></a>原始数据类型的值是不可变的(Primitive Values Are Immutable)</h4><blockquote><p>你答对了吗？<br>这个问题可能看起来很琐碎，就像人们在JavaScript面试时问的那种问题一样，但在实践中却很少出现。尽管如此，它阐明了关于原始数据类型值的一个重要点。  </p><p><code>无法更改原始数据类型的值</code>    </p><p>我们通过一个简单的例子去解释它。原属数据类型(llike string)和引用数据类型(like array)在表面上有些相似之处：数组是一些元素的集合，字符串是一些字符的集合：<br>let arr = [2020,07,24];<br>let str = ‘20200724’; </p></blockquote><blockquote><p>访问第一个数组项的方式与访问字符串的第一个字符类似。给人的外在感觉字符串就是数组(但它们不是!)   </p><p>console.log(arr[0]); // 2020<br>console.log(str[0]); // 2 </p><p>你可以更改数组arr的第一个值：<br>arr[0] = 2021;<br>console.log(arr); // [2021,07,24] </p><p>然后根据我们的直觉，我们可以很容易的推断出对于字符串来说有这样的功效：<br>str[0] = 2;// ??? </p><p>然而，实际情况是行不通的。<br>这里有一点很重要，我们需要添加到我们的思维模式中。字符串是基本值。这是一个重要意义的点：<code>所有的原始数据类型值都是不可更改的</code>。 </p><p>如果您试图在一个基本值上设置一个属性，无论是数字、字符串还是其他东西，JavaScript不会允许您这样做。它是否会悄无声息地拒绝您的请求或错误取决于您的代码在哪种模式下运行。<br>总之确信的一点就是不能更改原始数据类型的值。  </p><p>let fifty =50;<br>let fifty.shades = ‘gray’; // No! </p><p>在我的JavaScript宇宙中，所有原始值都存在于离代码更远的外圆中，就像遥远的星星一样。这提醒我，即使我可以从代码中引用它们，我也不能更改它们。他们将始终保持原来的样子。</p></blockquote><h4 id="一个矛盾？-A-Contradiction"><a href="#一个矛盾？-A-Contradiction" class="headerlink" title="一个矛盾？(A Contradiction?)"></a>一个矛盾？(A Contradiction?)</h4><blockquote><p>我刚刚证明了原始值是只读(read-only)的，或者用我们刚才的说法，是不可变的(immutable)。这里有一个小片段来测试我们刚形成的思维模式。  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; let pet = &apos;Narwhal&apos;;</span><br><span class="line">&gt; pet = &apos;The Kraken&apos;;</span><br><span class="line">&gt; console.log(pet); // ?</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>就像之前我们说的那样，再次一步一步的分析代码的每行背后的行踪，最后会打印出来个什么值？字符串的<code>不变性</code>在这里起作用了吗?它起什么作用？ </p><p>如果你认为我在搞乱你脑子中的想法，当然你完全正确。<br>输出结果是<code>The Kraken</code>–字符串的<code>不变性</code> 并没有起什么作用。 </p></blockquote><blockquote><p>如果你做错了，那是你还没有看到它的本质，不要失望哦! 最后这两个例子看起来似乎是相互矛盾的。但这是一个很重要的看似矛盾点。<br>当你开始学习一门新的语言的时候，你可能会略过这些矛盾点，毕竟如果你对每个矛盾点都去深究的话，那根本无从下手不知道要去弄懂多少点。但是现在我们是在培养思维模式的一个过程，因此你需要去理会这些矛盾点，解决这个问题你的思维模式就有了提升。  </p></blockquote><h4 id="变量就是一些连线-Values-are-Wires"><a href="#变量就是一些连线-Values-are-Wires" class="headerlink" title="变量就是一些连线(Values are Wires)"></a>变量就是一些连线(Values are Wires)</h4><blockquote><p>让我们再看一下这个例子：  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">let pet = &apos;Narwhal&apos;;</span><br><span class="line">pet = &apos;The Kraken&apos;;</span><br><span class="line">console.log(pet); // &quot;The Kraken&quot;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>我们知道字符串因为是原始数据类型的值而不可更改，但是pet这个变量值变了，这其中发生了什么呢？<br>看起来这是矛盾的，但其实不然。我们仅仅说明原始数据类型的值是不可更改的，但是我们没说变量啊。<br>当我们重建或者加深我们的思维模式的时候，我们非常有必要理清一些概念。<br> 变量不是值，变量指向值。 </p></blockquote><blockquote><p>在我的js宇宙世界中，一个变量就是一根普通的线，它有两端：左侧是在我代码中定义好的一个名字，右侧指向一个值。<br>比如，如果我说用变量<code>pet</code>指向<code>Narwhal</code>这个值,代码表示就是：let pet = ‘Narwhal’;<br>在这行代码中，我们对变量有两条认识：</p></blockquote><h4 id="分配一个值给到变量-Assigning-a-Value-to-a-Variable"><a href="#分配一个值给到变量-Assigning-a-Value-to-a-Variable" class="headerlink" title="分配一个值给到变量(Assigning a Value to a Variable)"></a>分配一个值给到变量(Assigning a Value to a Variable)</h4><blockquote><p>第一条就是我可以分配其它的值给到我的变量。<br>pet = ‘other value’;<br>我在这里所做的一切是告诉JavaScript，<code>线</code>的左边(pet变量)指向在右边的值(‘ Kraken’)。它会一直指向那个值除非我稍后重新赋值。<br>注意在<code>线</code>的左边我不能像这样随意放值:’war’ = ‘peace’;<br>在赋值的时候左侧必须是线(变量)。到此为止，我们只是知道变量就是像上面看到的单线，我们后面会讨论另一种方式的线(可能你已经猜到了–那种带括号的或者点的)。  </p></blockquote><blockquote><p>然后谈第二条规则：<br>在这条线的右边必须是一个表达式。这条规则就比较好说了，像 <code>2</code>、<code>hello</code>、或者 <code>pet = count + &#39;World!&#39;</code> </p></blockquote><h4 id="读取变量的值-Reading-a-Value-of-a-Variable"><a href="#读取变量的值-Reading-a-Value-of-a-Variable" class="headerlink" title="读取变量的值(Reading a Value of a Variable)"></a>读取变量的值(Reading a Value of a Variable)</h4><blockquote><p>我们读取变量的值的时候，例如：<br>console.log(pet);<br>这个看上去平淡无奇。<br>但是请注意，<code>它不是我们传递给console.log的pet变量。我们可能口头上会这么说，但实际上我们不能将变量传递给函数。我们传递pet变量的是当前的值。</code>这作何解释呢?<br>结果表明，像pet这样的变量名也可以用作表达式,当我们写出pet这个表达式时，我们问JavaScript一个问题:pet的当前值是多少?JS回答我们的问题，遵循pet线连接规则，返回了连接末端的值。<br>因此同样的表达式可以在不同的场景下得到了不同的值。  </p></blockquote><h4 id="名词和动词-Nouns-and-Verbs"><a href="#名词和动词-Nouns-and-Verbs" class="headerlink" title="名词和动词(Nouns and Verbs)"></a>名词和动词(Nouns and Verbs)</h4><blockquote><p>当我们跟同事说起这个问题的时候：说传递一个值和传递一个变量，这种根本无伤大雅的差别，在口语交流，谁会去打断这个交流过程并去纠正呢？这样无异于是浪费每个人的时间。<br>但在你的头脑中，你需要清楚你可以用这种不同的概念做什么。就像你不能骑着自行车去滑冰。你不会唱蚊子的歌一样，在JavaScript宇宙中，<code>你不能传递变量</code>。<br>我们通过一个简单的例子来证明：  </p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">function double(x) &#123;</span><br><span class="line">  x = x * 2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">let money = 10;</span><br><span class="line">double(money);</span><br><span class="line">console.log(money); // ?</span><br></pre></td></tr></table></figure><blockquote><p>如果我们认为double(money)传递一个变量，我们可以预期x = x * 2将使这个变量翻倍。但事情不是这样的。我们知道double(money)是指计算出money的值，然后将这个值传递给double。所以答案是10。多么微小的一个小骗局。<br>在你的脑海中JavaScript名词和动词有哪些类似这样的差别?它们之间有什么关系?把你最常用的单词列成一个简短的列表。</p></blockquote><h4 id="合起来说-Putting-is-Together"><a href="#合起来说-Putting-is-Together" class="headerlink" title="合起来说(Putting is Together)"></a>合起来说(Putting is Together)</h4><blockquote><p>现在再让我们来谈论第一节刚开始的代码：<br>let x = 10;<br>let y = x;<br>x = 0;  </p></blockquote><blockquote><p>我建议你可以在你的笔记本上或者通过<a href="https://excalidraw.com/?ck_subscriber_id=917985599" target="_blank" rel="noopener">drawing app</a>,在阅读上面代码的时候一步一步的通过线的方式将他们的整个过程给绘制出来。<br>(关于这个过程这里就省略了，作者分析下面原文)    </p></blockquote><blockquote><p>直接说结果：变量x指向了值0；变量y指向了值10；注意上面代码 y = x并不是说变量y指向变量x，在JS里面变量是不能互相指向的，变量总是指向值。当我们看到 一个赋值操作的时候，通过JS规则求出右侧的值，然后左侧的变量去指向它。<br>我在第一节思维模式介绍–提到变量我们就会联想到盒子，到此为止我们在构建我们的思维模式的时候，发现根本没盒子什么事，我们现在提到变量，我们想到的应该就是线了–它只有线。<br>这里我们可能会有些疑惑：为什么我们在赋值的时候不是直接把值放进像盒子的变量中，而要用<code>线</code>去指向它呢？<br>使用<code>线</code>这个概念对于解释其他许多概念非常重要，比如严格相等、对象一致和突变。我们将继续使用<code>线</code>，所以你最好现在开始习惯它们。<br>我的JS宇宙中都是<code>线</code></p></blockquote><h4 id="总结-Recap"><a href="#总结-Recap" class="headerlink" title="总结(Recap)"></a>总结(Recap)</h4><blockquote><ul><li>原始数据类型不可变的。在我们的代码里无论我们用什么方式都是改变不了原始数据类型的值的。他们始终保持他们的状态。比如因为字符串是原始数据类型值，所以我们没有办法给它再赋别的变量，而数组不是原始数据类型，所以可以给它赋别的属性。  </li><li>变量不是值。每个变量指向一个特定的值，我们可以使用 = 赋值操作符来更改它指向的值。 </li><li>变量就是一些<code>线</code>。<code>线</code>这个概念不是JS的，它只是方便我们理解、想象变量指向值的这个抽象内在。还有一种不同的<code>线</code>它不是变量，目前我们还没有讨论到它。  </li><li>注意矛盾点。如果你学到的两件事看着似乎相互矛盾，不要为此气馁。通常情况下，这是一个信号，表明在这背后隐藏着更深层的真相。  </li><li>名词和动词问题。我们正在建立一个思维模式，这样我们就能对我们的JS宇宙能发生什么或不能发生什么充满信心。在随意的演讲中马虎一点也不错，但我们的思维需要精确。</li></ul></blockquote><h4 id="原文"><a href="#原文" class="headerlink" title="原文"></a>原文</h4><p><img src="http://img.liugezhou.online/JSJustJS_03.png" alt="JustJs_03"></p>]]></content>
      
      
      <categories>
          
          <category> Just JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Just JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Just JavaScript--02 | The JavaScript Universe</title>
      <link href="/2020/07/22/JustJS-02/"/>
      <url>/2020/07/22/JustJS-02/</url>
      
        <content type="html"><![CDATA[<h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><blockquote><p> Dan Abramov:Redux作者，React社区大神。<br>前一段时间发起了一个活动，通过邮箱订阅他写的一个小专栏，每写好一片草稿就会发到你的邮箱里面。<br>这是这篇小专栏的第二节：‘The JavaScript Universe’，我的理解为“JavaScript的宇宙世界”。<br>下面内容是在原作基础上，用我的大白话翻译的文章内容，文章原文贴至末尾。 </p></blockquote><a id="more"></a><blockquote><p>本节以 值(Value)开始。<br>到底什么是值(Value)?这个着实很难说得清楚。<br>这就像问数学里的数字是什么，或者几何里的点是什么一样。值是JavaScript宇宙中的一个东西。<br>数字是值，还有其他一些东西，如对象和函数，也是值。但是，还有许多东西，比如if语句或变量声明，都不是值。</p></blockquote><h4 id="Code-and-Values"><a href="#Code-and-Values" class="headerlink" title="Code and Values"></a>Code and Values</h4><blockquote><p>为了将值与我的JavaScript程序中的其他所有内容区分开，我喜欢想象安东尼·德·圣-埃克苏佩里(Antoine de Saint-Exupery)所画的小王子(图见末尾)。<br>我站在一个小行星上面–行星上的东西就好比我程序里的代码。  </p></blockquote><blockquote><p>从表面上看，我看到了if语句和变量声明，逗号，花括号以及在JavaScript代码中可能发现的所有其他内容。<br>我的代码包含诸如“进行函数调用”或“多次执行此操作”甚至“引发错误”之类的指令。我一步一步地遵循这些说明-从我的小行星运行任务。<br>但是每隔一段时间，我就会抬抬头。<br>在一个晴朗的夜晚，我看到了JavaScript天空中的不同值：booleans, numbers, strings, symbols, functions and objects, null and undefined-哦，天哪！我可能是指他们在我的代码，但他们没有我的代码中存在。<br>在我的JavaScript世界中，值在空间中浮动。</p></blockquote><blockquote><p>“等等，”您可能会说，“我一直认为值就在我的代码中！”。在这里，我强烈要求你让自己的信念开启飞跃模式。此思维模式可还需要几个模块才能得到回报。 <a href="https://signalvnoise.com/posts/3124-give-it-five-minutes?ck_subscriber_id=917985599" target="_blank" rel="noopener"> Give it five minutes.</a><br> 回到值(values)。大致上我们可以将它分成两种。</p></blockquote><h4 id="Primitive-Values"><a href="#Primitive-Values" class="headerlink" title="Primitive Values"></a>Primitive Values</h4><blockquote><p>Primitive Values(原始数据类型、基本数据类型)是指数字和字符串等。打开浏览器的控制台并使用console.log()打印这些基本值。 </p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">console.log(2);</span><br><span class="line">console.log(&quot;hello&quot;);</span><br><span class="line">console.log(undefined);</span><br></pre></td></tr></table></figure><blockquote><p>所有的原始值都有一些共同之处。我在代码中做的任何事情都不会影响到它们。这听起来有点模糊，我们将在下一模块中具体探讨这意味着什么。现在，我要说原始值就像星星一样寒冷而遥远，但当我需要它们时，它们总是在那里。<br>这是第一种类型的值。</p></blockquote><h4 id="Objects-and-Functions"><a href="#Objects-and-Functions" class="headerlink" title="Objects and Functions"></a>Objects and Functions</h4><blockquote><p>Objects and Functions 他们也是值，不过他们不是原始类型的值。他们有一些特别，同样在浏览器控制台打印如下代码：  </p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">console.log(&#123;&#125;);</span><br><span class="line">console.log([]);</span><br><span class="line">console.log(x =&gt; x * 2);</span><br></pre></td></tr></table></figure><blockquote><p>请注意浏览器控制台显示它们与原始值的不同之处。有些浏览器可能会在它们前面显示一个箭头，或者在单击它们时做一些特殊的事情。如果你安装了几个不同的浏览器(例如Chrome和Firefox)，比较一下它们是如何可视化对象和函数的。<br>对象和函数它们比较特殊，因为我可以在我的代码中去操作他们了。操作的过程解释起来可能也有些模糊，同样我们放到后面的模块去细说。 到现在为止，如果说基本数据类型的值像那遥远寒冷的星星，那么对象和函数就像是环绕在我们身边的岩石–近在咫尺可以去触摸他们。<br>这是第二种类型的值。  </p></blockquote><blockquote><p>你可能会有疑问。好。如果你问一个问题，JavaScript的世界可能会回答它!当然，前提是你知道如何提问。</p></blockquote><h4 id="Expressions-表达式"><a href="#Expressions-表达式" class="headerlink" title="Expressions(表达式)"></a>Expressions(表达式)</h4><blockquote><p>有很多问题JavaScript无法回答。如果你想知道是向你最好的朋友坦白你的真实感受，还是一直等到你们都变成骷髅，JavaScript不会有多大帮助。<br>但是有一些问题是JavaScript很乐意回答的。这些问题有一个特殊的名字，叫做表达式。<br>如果我们”询问” 2+2 这个表达式，JavaScript会”回答”我们答案是4 –console.log(2 + 2); // 4<br>表达式是JavaScript可以回答的问题。JavaScript用它知道的唯一方法来回答表达式。<br>如果单词表达式使您感到困惑，可以将其看作表示值的一段代码。你可能听到有人说2 + 2等于4。这些都是表达同一件事的不同方式。<br>我们询问JavaScript ，2 + 2的时候，它回答4。表达式总是产生一个值。现在我们知道了足够多的表达方式是危险的。<br>我之前说过JavaScript值有很多种类型:数字、字符串、对象等等。我们怎么知道特定的值类型呢？<br>这听起来像是一个问题，但是我们可以这么问这个问题吗？</p></blockquote><h4 id="Checking-a-Type-检查值类型"><a href="#Checking-a-Type-检查值类型" class="headerlink" title="Checking a Type(检查值类型)"></a>Checking a Type(检查值类型)</h4><blockquote><p>首先，JavaScript宇宙中的所有值看起来都像是天空中的亮点。但如果仔细观察，就会发现只有不到10种不同类型的值。而相同类型的值的行为方式是相似的。<br> 如果我们想检查一个值的类型，我们可以用typeof运算符来询问它。JavaScript将用一个预定的字符串值来回答我们的问题，比如“number”、“string”或“object”。<br>下面几个小demo你可以在浏览器中尝试一下：  </p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">console.log(typeof(2)); // &quot;number&quot;</span><br><span class="line">console.log(typeof(&quot;hello&quot;)); // &quot;string&quot;</span><br><span class="line">console.log(typeof(undefined)); // &quot;undefined&quot;</span><br></pre></td></tr></table></figure><blockquote><p>在这里， typeof(2)是一个表达式—并产生”number”值。<br>严格的说 typeof运算符并不需要使用括号，直接使用 typeof 2也可以正确的返回 number，但是在一些情况下就不可以省略，下面的几个demo可以自己尝试一下哪个不可以省略括号： </p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">console.log(typeof(&#123;&#125;)); // &quot;object&quot;</span><br><span class="line">console.log(typeof([])); // &quot;object&quot;</span><br><span class="line">console.log(typeof(x =&gt; x * 2)); // &quot;function&quot;</span><br></pre></td></tr></table></figure><blockquote><p>在浏览器运行上面的代码，仔细观察下他们的输出内容，你应该会发现令人惊讶的返回结果，这是为什么呢？</p></blockquote><h4 id="Types-of-Values-值类型"><a href="#Types-of-Values-值类型" class="headerlink" title="Types of Values(值类型)"></a>Types of Values(值类型)</h4><blockquote><p>作为一名有抱负的天文学家，您可能想了解JavaScript天空中可以观察到的每种类型的价值。在研究JavaScript将近25年之后，科学家仅发现了9种此类类型：<br> 原始数据类型  </p><ul><li>Undefined （ undefined ），用于意外丢失的值。   </li><li>Null （ null ），用于故意缺失的值。 </li><li>Boolean （ true和false ），用于逻辑运算。 </li><li>Number -100 ， 3.14 ），用于数学计算。  </li><li>String（ “hello” ， “abracadabra”等），用于文本。 </li><li>Symbol （不常见），用于隐藏实施细节。 </li><li>BigInts （不常见、新增），用于对大数进行数学运算。<br>引用数据类型  </li><li>Object （ {}和其他对象 ），用于对相关数据和代码进行分组。 </li><li>Function （ x =&gt; x * 2等），用于引用代码。  </li></ul></blockquote><h4 id="没有其它类型"><a href="#没有其它类型" class="headerlink" title="没有其它类型"></a>没有其它类型</h4><blockquote><p>您可能会问：“但是我使用过的其他类型（例如数组）呢？”<br>在JavaScript中，除了我们刚刚列举的基本值类型外，没有其他基本值类型。其余都是对象！例如，甚至数组，日期和正则表达式从根本上来说都是 JavaScript 中的对象：  </p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">console .log( typeof ([])); // &quot;object&quot;  </span><br><span class="line">console .log( typeof ( new Date ())); // &quot;object&quot;  </span><br><span class="line">console .log( typeof ( /(hello|goodbye)/ )); // &quot;object&quot;</span><br></pre></td></tr></table></figure><blockquote><p>您可能会回答：“我明白了，这是因为一切都是Object！” 这是一句流行的话，但事实并非如此。尽管像”hi”.toUpperCase()这样的代码使”hi”看起来像一个对象，但这仅是一种幻觉。当您执行此操作时，JavaScript会创建一个包装对象，然后立即将其丢弃。<br>如果该机制还没有完全单击，那就很好。 现在，您只需要记住原始值（例如数字和字符串） 不是对象。</p></blockquote><h4 id="Recap-回顾"><a href="#Recap-回顾" class="headerlink" title="Recap(回顾)"></a>Recap(回顾)</h4><blockquote><p>让我们回顾一下到目前为止我们所讲到的：</p><ol><li>有值，除此之外还有一些其它的事物。我们可以将值视为在JavaScript宇宙中“漂浮”的不同事物。它们在我们的代码中不存在，但是我们可以从我们的代码中引用它们。    </li><li>值类型有两种：原始数据类型和引用数据类型 。总共有九种不同的类型。每种类型都有特定的用途，有些很少使用。  </li><li>有些价值观是孤孤单单的。例如， null是Null类型的唯一值， undefined是Undefined类型的唯一值。正如我们将在后面学到的，这两个特殊的价值观是麻烦制造者！ </li><li>我们可以用表达式提问。 JavaScript将用值回答我们。例如， 2 + 2表达式的回答是4。  </li><li>我们可以通过将内容包装在typeof表达式中来检查其类型。例如， typeof(4)是字符串值”number”。typeof返回的值类型均为string。 </li></ol></blockquote><h4 id="Exercises-练习题"><a href="#Exercises-练习题" class="headerlink" title="Exercises(练习题)"></a>Exercises(练习题)</h4><blockquote><p> 现在该把我们学到的东西付诸实践了。<br> 即使您已经具有相当不错的JavaScript经验，也不要跳过练习题！我几年前也才了解清楚了其中一些东西。<br> <a href="https://eggheadio.typeform.com/to/PLyTKB?email=liumz19941205@gmail.com&ck_subscriber_id=917985599" target="_blank" rel="noopener">单击此处回答这些问题</a>，并提供有关此模块的反馈。 完成练习后，我将立即发送下一个模块。<br>接下来，我们将更详细地探讨原始值。我们看一下这些不同的原始类型（例如数字和Null）的共同点，并学习一两个关于JavaScript相等的含义的东西。<br>我们还将继续完善我们的思维模式。本模块提供了一个粗略的草图来帮助我们近似理解我们上文提到的知识点。我们将专注于图片的不同部分，并为它们填充更多细节，例如<a href="https://www.liquidweb.com/kb/what-is-a-progressive-jpeg/?ck_subscriber_id=917985599" target="_blank" rel="noopener">渐进式JPEG</a>图像。<br>这些步骤似乎很小，但是我们为以后的一切奠定了基础。我们正在一起构建JavaScript世界。  </p></blockquote><h4 id="原文贴图"><a href="#原文贴图" class="headerlink" title="原文贴图"></a>原文贴图</h4><p><img src="http://img.liugezhou.online/JS/JustJS_02.png" alt="JustJavaScript-02"></p>]]></content>
      
      
      <categories>
          
          <category> Just JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Just JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Just JavaScript--01 | Mental Models</title>
      <link href="/2020/07/21/JustJS-01/"/>
      <url>/2020/07/21/JustJS-01/</url>
      
        <content type="html"><![CDATA[<h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><blockquote><p> Dan Abramov:Redux作者，React社区大神。<br>前一段时间发起了一个活动，通过邮箱订阅他写的一个小专栏，每写好一片草稿就会发到你的邮箱里面。<br>这是这篇小专栏的第一节：‘Mental Models’，我的理解为“思维模式”。<br>下面内容是在原作基础上，用我的大白话翻译的文章内容，文章原文贴至末尾。 </p></blockquote><a id="more"></a><blockquote><p>先看一段代码  </p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">let a = 10;</span><br><span class="line">let b = a;</span><br><span class="line">a = 0;</span><br></pre></td></tr></table></figure><blockquote><p>在进行下面的阅读前先回答这样一个问题：这段代码的执行结果是怎样的？</p></blockquote><blockquote><p>如果你已经写了一段时间JS的代码，你心中可能在想：就这几行代码比我每天要写的代码不知道要简单多少倍，此问究竟为何意？<br>这个小练习的用意并不是来向你介绍JS的变量等语法的。我猜想你对这些东西游刃有余。我的目的是为了让你意识到且对你的思维模式有一个认识。</p></blockquote><h4 id="什么是思维模式-What’s-a-Mental-Model"><a href="#什么是思维模式-What’s-a-Mental-Model" class="headerlink" title="什么是思维模式(What’s a Mental Model?)"></a>什么是思维模式(What’s a Mental Model?)</h4><blockquote><p>带着你的想法再次阅读上面代码且真正确认下代码的运行结果是什么(我们会在后面解释为什么你的想法是如此的重要)。</p></blockquote><blockquote><p>当你第二次开始认真阅读这几行代码的时候，一步一步的跟随你脑海中的想法去思考，你的内心独白可能是这样的：  </p><ul><li>let a =10;    声明一个名为a的变量，对其赋值为 10；</li><li>let b = a;    声明一个名为b的变量，对其赋值为a，然后a的值为10，因此变量b的值也会10；  </li><li>a = 0;      变量a再次赋值为0，因此现在 a的值为0，b的值为10.<br>这大概就是我们的答案。</li></ul></blockquote><blockquote><p>可能你的内心独白、思考有些不同，获取你干脆直接读a=10，不去想文绉绉的<code>赋值</code>这个词，或许你读这段代码的顺序稍有不同，当然也或许你得到了不同的结果<br>然后你回想下你脑中的思考过程、内心独白，捕捉你脑子在思考这段代码的种种细节，有可能你会思考第二行代码为：把a设置为b等等细节吧，自己把握。  </p></blockquote><blockquote><p>您可能会发现，对于每个熟悉的基本编程概念(如变量)和对其进行的操作(如设置其值)，都有一组与之关联的根深蒂固的类比。其中一些可能来自现实世界。还有一些可能是你之前学过的其他领域的东西,比如数字属于数学范畴，这些类比可能相互重叠甚至相互矛盾，但它们仍然帮助您理解代码中发生的事情。</p></blockquote><blockquote><p>例如，许多人第一次学习变量时把它当成可以放东西的盒子,当你看到一个变量时，即使你不再生动地想象盒子，它们在你的想象中仍可能是方形的。这些近似关于事物如何在你的头脑中运作的过程被称为思维模式(Mental Model)，它们可能是视觉、空间和机械物理等的组合。</p></blockquote><blockquote><p>这些直觉(比如变量是个”盒子”)影响着我们一生阅读代码的方式,当然有些时候，我们的思维模式是错误的。也许我们之前读过的一些教程为了快速理解而牺牲了它的一些正确性去学习。也许我们错误地转移了对特定语言特征的直觉，比如思维定势像理解之前的语言一样去理解新的概念。也许我们从一段代码中推断出一个心理历程，但从未真正验证过它是否准确。</p></blockquote><blockquote><p>认识到这些问题并修复这些问题就是[Just JavaScript]的初衷。我们将逐步构建(或者可能重新构建)您的JavaScript思维模式，使其更加准确和有用。一个好的思维模式将帮助你更快地发现和修正错误，更好地理解别人的代码，并对你所写的代码感到自信。<br>(顺便说一下，a等于0 b等于10是正确答案。)</p></blockquote><h4 id="编码，快和慢-Coding-Fast-and-Slow"><a href="#编码，快和慢-Coding-Fast-and-Slow" class="headerlink" title="编码，快和慢(Coding, Fast and Slow)"></a>编码，快和慢(Coding, Fast and Slow)</h4><blockquote><p>丹尼尔·卡尼曼（Daniel Kahneman）的《Thinking, Fast and Slow》是一本广受欢迎的非小说类书籍。 其中心论点是，人类在思考时会使用两种不同的“系统”。</p></blockquote><blockquote><p>只要有可能，我们就依赖快速系统。我们和许多动物都有这个系统，这给了我们惊人的能力，比如走路不摔倒。这个快速的系统擅长于模式匹配(生存所必需的!)和直觉反应。但它不擅长规划。</p></blockquote><blockquote><p>独特的是，由于额叶的发展，人类还拥有一个缓慢的思考系统。这个缓慢的系统负责复杂的逐步推理。它让我们计划未来的事件，参与争论，或遵循数学证明。</p></blockquote><blockquote><p>因为使用慢速系统会让人精神疲惫，所以即使在处理像编码这样的智力任务时，我们也倾向于默认使用快速系统。</p></blockquote><blockquote><p>想象一下，您正处于大量工作之中，并且想要快速确定下面这个方法的作用。 快速浏览一下： </p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">function duplicateSpreadsheet(original) &#123;</span><br><span class="line">  if (original.hasPendingChanges) &#123;</span><br><span class="line">    throw new Error(&apos;You need to save the file before you can duplicate it.&apos;);</span><br><span class="line">  &#125;</span><br><span class="line">  let copy = &#123;</span><br><span class="line">    created: Date.now(),</span><br><span class="line">    author: original.author,</span><br><span class="line">    cells: original.cells,</span><br><span class="line">    metadata: original.metadata,</span><br><span class="line">  &#125;;</span><br><span class="line">  copy.metadata.title = &apos;Copy of &apos; + original.metadata.title;</span><br><span class="line">  return copy;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>通过上面快读代码阅读，你可能会得到如下信息：  </p><ul><li>这是函数的作用是复制一个对象  </li><li>如果这个对象有hasPendingChanges属性，会抛出一个错误。  </li><li>复制original这个对象的时候，返回copy对象的metadata的title属性加了一个副本。 </li></ul></blockquote><blockquote><p>您可能没有注意到的是(如果您注意到了，说明你可不简单啊!)：这个函数还会意外地更改原始电子表格的标题。<br>(注:比如原始original对象的metadata属性的title作为test，这个函数执行后，原始original对象的metadata属性的title就会变为‘Copy of test’)   </p></blockquote><blockquote><p>每个程序员每天都会遇到这样的错误。但是现在您知道存在一个bug，您会以不同的方式阅读代码吗? 如果你一直在快速模式下阅读代码，你可能会切换到更费力的缓慢模式来查找。</p></blockquote><blockquote><p>在快速模式中，我们根据命名、注释及其整体结构来猜测代码的作用。在慢速模式下，我们一步一步地追溯代码所做的事情。</p></blockquote><blockquote><p>这就是为什么拥有一个正确的思维模式是如此重要。在我们的头脑中模拟计算机已经够困难的了–更糟糕的是，这些努力都浪费在错误的思维模式上了。  </p></blockquote><blockquote><p>如果根本找不到bug，也不要担心。这意味着你将从这门课中获得最大的收获!在下一个模块中，我们将一起重建JavaScript的思维模式，以便您能够清楚地看到这个bug。 </p></blockquote><blockquote><p>在下一个模块中，我们将开始为一些最基本的JavaScript概念、值和变量构建思维模式。</p></blockquote><h4 id="原文"><a href="#原文" class="headerlink" title="原文"></a>原文</h4><p><img src="http://img.liugezhou.online/JS/JustJS_01.png" alt="JustJS_01"></p>]]></content>
      
      
      <categories>
          
          <category> Just JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Just JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>每周总结第四十四期</title>
      <link href="/2020/07/20/issue-44/"/>
      <url>/2020/07/20/issue-44/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本周是2020年的第二十九个周末。<br>这里记录过去一周，我的一些总结。</p></blockquote><a id="more"></a><h4 id="Feeling"><a href="#Feeling" class="headerlink" title="Feeling"></a>Feeling</h4><blockquote><p>本周比较糟心的一件事是一哥们赌博，欠账三十多万，不断借钱、谎话连篇、不还钱的事。    </p><p>然后就着这件事跟小盆子与阿飞聊到了诈骗一事，让我笑的快要流下泪来。<br>阿飞在大一大二那会，qq上一朋友要他银行卡号还有验证码什么的，没想那么多报了卡号，然后卡里的钱被全部转移。<br>据他说述，在得知被骗之后，遂报警，阴差阳错，人生生平第一次坐上警车–警局报案。<br>在做了一个简单的笔录后，警察叔叔问起阿飞被诈骗金额的时候。<br>阿飞委屈答到被骗了150块。<br>…………<br>按规定诈骗金额要达到三千以上才可以立案调查的，如果不到三千的话去报案据说最多会参加公安给你提供的防诈骗培训，不会介入。<br>阿飞的150块被诈骗事件以及当时的心理活动在述说之，我们狂笑不止。但随后一股悲哀随之涌上心头，150块的诈骗的处理措施，不仅使得一个青少年对警察叔叔失去了一份信任，也使得心凉凉。这种久违的开怀大笑背后，隐藏着东西、折射的社会制度规则真是不简单。  </p></blockquote><h4 id="Github北极代码库计划正式实施"><a href="#Github北极代码库计划正式实施" class="headerlink" title="Github北极代码库计划正式实施"></a>Github北极代码库计划正式实施</h4><blockquote><p>这几天登录自己的Github账号，进入主页面的时候，发现在Highlights下面有一个雪花的小图标显示。<br>有这个雪花代表着：你代码仓库中的文字、代码被冰封到了北极。<br>据称可以冰封千年：代码恒久远，Bug永流传啊。</p></blockquote><h4 id="VScode画流程图"><a href="#VScode画流程图" class="headerlink" title="VScode画流程图"></a><a href="https://mp.weixin.qq.com/s/4JTkjbulPd0L3aI670bEuw" target="_blank" rel="noopener">VScode画流程图</a></h4><blockquote><p>VScode插件：Drawio<br>通过这个插件可以在VSCode中画出完美流程图、思维导图与UML图等。</p></blockquote><h4 id="lodash"><a href="#lodash" class="headerlink" title="lodash"></a>lodash</h4><blockquote><p>loadsh是一个一致性、模块化、高性能的JavaScript实用工具。  </p></blockquote><blockquote><p>在看lodash的历史中，了解到了一些它与underscore的关系：    </p></blockquote><blockquote><p>Node.js的兴起把我们带到了一个没有DOM和BOM的世界，开发过程我们开始迫切需要的是函数、库、我们要处理数字、处理字符串、处理数据等.<br>这个时候underscore出现，unserscore一度成为前端代码排名第二的库(jQuery为第一) 。<br>随后underscore迎来挑战，这就是lodash。<br>lodash也使用<code>_</code>符号,而且underscore的所有函数lodash均包括，还增加了unserscore没有的函数，不仅如此，lodash性能还是underscore的四五倍，因此，慢慢的慢慢的，社区意见也偏向于lodash是唯一选择。  </p></blockquote><blockquote><p><a href="https://zhuanlan.zhihu.com/p/20414991" target="_blank" rel="noopener">lodash与underscore、Prototype与jQuery的恩怨情仇</a></p></blockquote><h4 id="18个常用webpack插件"><a href="#18个常用webpack插件" class="headerlink" title="18个常用webpack插件"></a><a href="https://mp.weixin.qq.com/s/FPENfKo7mObEYcVP0wofRA" target="_blank" rel="noopener">18个常用webpack插件</a></h4><blockquote><p>vue对webpack的封装很完全，但对初学者来说又不显眼。我们只知道vue-cli生成的项目提供了一个vue.config.js的配置文件，这个配置文件就是与webpack的联系了，因此很有必要对webpack这个庞然大物肃然起敬。<br>👆这篇文件就是总结了一些webpack的插件，可能初期用不到或想不到，但是有个了解后，遇到相关场景的时候–信手拈来。  </p></blockquote><h4 id="博客"><a href="#博客" class="headerlink" title="博客"></a><a href="https://anuraghazra.github.io/" target="_blank" rel="noopener">博客</a></h4><blockquote><p>一名来自印度的19岁小伙的个人博客网站，cool！</p></blockquote><h4 id="git仓库一次性push到多个仓库"><a href="#git仓库一次性push到多个仓库" class="headerlink" title="git仓库一次性push到多个仓库"></a>git仓库一次性push到多个仓库</h4><blockquote><p>之前我在将一个项目push到多个仓库的时候，使用的是 git remote add  gitname XXXX 再次添加一个远程仓库，然后根据不同的名字去git push.<br>然想要push一次就推送到多个仓库，直接使用 <code>git remote set-url --add  origin  https://xxxx</code>即可。 </p></blockquote><h4 id="End"><a href="#End" class="headerlink" title="End"></a>End</h4><blockquote><p>如果你花钱买，你就是客户。<br>如果你免费获得，你就是产品。  </p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 每周分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 每周分享 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>lodash</title>
      <link href="/2020/07/13/lodash/"/>
      <url>/2020/07/13/lodash/</url>
      
        <content type="html"><![CDATA[<h4 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h4><blockquote><p>Lodash是一个一致性、模块化、高性能的JavaScript实用工具库。</p></blockquote><a id="more"></a><h4 id="数组Array–39"><a href="#数组Array–39" class="headerlink" title="数组Array–39"></a>数组Array–39</h4><h5 id="C-3"><a href="#C-3" class="headerlink" title="C-3"></a>C-3</h5><blockquote><ol><li>_.chunk(array,[size=2]):将数组拆分成两个长度的区块，并将这些区块组成一个新的数组。  </li><li>_.compact(array):创建一个新数组，包含原数组中所有的非假值元素。 </li><li>_.concat(array, [values]):创建一个新数组，将array与任何数组 或值连接在一起。</li></ol></blockquote><h5 id="D-7"><a href="#D-7" class="headerlink" title="D-7"></a>D-7</h5><blockquote><ol start="4"><li>_.difference(array,[values]):arr1中的数不在给定的<code>values</code>中的其他值。    </li><li><em>.diffrenceBy(array,[values],[iteratee=</em>.identity]):同上，不同的是：_.diffrenceBy([1.2, 3.4, 4.5],[2.3, 4.9,5],Math.floor)返回的是：[1.2, 3.4]  </li><li><em>.diffrenceWith(array,[values], [comparator]):同上，接收的是比较器。</em>.diffrenceWith([{‘x’:1,’y’:2},{‘x’:2,’y’:1}],[{‘x’:1,’y’:2}],_.isEqual)返回的是：[{‘x’:1,’y’:2}]   </li><li>_.drop(array, [n=2]):在js数组中，array.shift()只会去除第一个元素，这个方法是去除前n个元素。   </li><li>_.dropRight(array,[n=2]):在js数组中。array.pop()只会去除数组最后一个元素，这个方法是去除后n个元素。</li><li><em>.dropRightWhile(array,[predicate=</em>.identity])：创建一个切片数组，去除array中符合predicate这个规则的那些数值。</li><li><em>.dropWhile(array,[predicate=</em>.identity]):同上，去除的是array数组不符合predicate这个规则的那些数值。</li></ol></blockquote><h5 id="F-8"><a href="#F-8" class="headerlink" title="F-8"></a>F-8</h5><blockquote><ol start="11"><li>_.fill(array.value,[start=0],[end=array.length]):使用value值来填充(替换)array,从start开始，到end结束(不包含end)，这个方法不是创建新数组，而是改变原数组。   </li><li><em>.findIndex(array,[predicate=</em>.identity],[fromIndex=0]):返回元素的索引值,不是值本身，否则返回-1。  </li><li><em>.findLastIndex(array,[predicate=</em>.identity],[fromIndex=array.length-1]):同上，区别是从数组结尾开始迭代查找。 </li><li>_.first(array)_或者.head(array):获取数组的第一个元素</li><li>_.flatten(array):减少一级array嵌套深度。    </li><li>_.flattenDeep(array):将array递归为一维数组。   </li><li>_.flattenDepth(array,[depth=1]):根据depth减少array的嵌套层级。   </li><li>_.formPairs(pairs):返回一个由键值对pairs构成的对象。  </li></ol></blockquote><h5 id="I-4"><a href="#I-4" class="headerlink" title="I-4"></a>I-4</h5><blockquote><ol start="19"><li>_.indexOf(array,value,[fromIndex=0]):返回首次value在数组中被找到的索引值。    </li><li>_.initial(array):返回一个新数组，数组内容为除了数组array最后一个元素外的所有元素。  </li><li>_.intersetion(array1,array2,array3):返回array1、array2和array3的每个数组都包含的数值。    </li><li><em>.intersetionBy(arrays,[iteratee=</em>.identity]):同上，区别是接收一个规则，通过该规则每个值都会进行计算，对计算结果的值进行比较</li></ol></blockquote><h5 id="J-1"><a href="#J-1" class="headerlink" title="J-1"></a>J-1</h5><blockquote><ol start="23"><li>_.join(array,[separator=’,’]):将array转为由<code>separator</code>分割的字符串</li></ol></blockquote><h5 id="L-2"><a href="#L-2" class="headerlink" title="L-2"></a>L-2</h5><blockquote><ol start="24"><li>_.last(array):原数组不变，返回该数组的最后一个元素。  </li><li>_.lastIndexOf(array,value,[fromIndex=array.length-1])：与indexOf相反，从最后一个值开始查找第一次出现value值的位置。</li></ol></blockquote><h5 id="N-1"><a href="#N-1" class="headerlink" title="N-1"></a>N-1</h5><blockquote><ol start="26"><li>_.nth(array,[n=0]):返回array数组的索引为n的元素，如果为负数，则从结尾开始的第n个元素  </li></ol></blockquote><h5 id="P-3"><a href="#P-3" class="headerlink" title="P-3"></a>P-3</h5><blockquote><ol start="27"><li>_.pull(array,[values]):移除array数组中的values包含的值  </li><li>_.pullAll(array,values):这个方法与pull类似，不同的是pull方法传values值的时候是用逗号隔开，而pullAll直接传入一个数组。   </li><li>_.pullAt(array,[indexes]):通过索引删除array中的值,会改变原数组，此方法会返回删除的值</li></ol></blockquote><h5 id="R-2"><a href="#R-2" class="headerlink" title="R-2"></a>R-2</h5><blockquote><ol start="30"><li>_.remove(array,function):该方法会改变原始数组，移除那些function命中的值。</li><li>_.reverse(array):数组反转,使得第一个元素变为最后一个元素，第二个元素变为倒数第二个元素。</li></ol></blockquote><h5 id="S-3"><a href="#S-3" class="headerlink" title="S-3"></a>S-3</h5><blockquote><ol start="32"><li>_.slice(arrat,start,end):裁剪数组，从start位置开始，到end位置结束（不包含） </li><li>_.sortedUniq(array):返回一个不重复的数组。  </li></ol></blockquote><h5 id="T-3"><a href="#T-3" class="headerlink" title="T-3"></a>T-3</h5><blockquote><ol start="34"><li>_.tail(array):获取数组array除了第一个元素的其他元素。 </li><li>_.take(array,[n=2]):从数组array第一个位置开始，获取n个元素。    </li><li>_.takeRight(array,[n=2]):从数组array的倒数第一个位置开始，获取n个元素。 </li></ol></blockquote><h5 id="U-8"><a href="#U-8" class="headerlink" title="U-8"></a>U-8</h5><blockquote><ol start="37"><li>_.union(arr1,arr2,arr3):返回数组arr1，arr2，arr3数组的并集  </li><li>_unzip(zipped): _.unzip([ [ ‘liu’,18,’eat’],[‘liuyl’,17,’drink’] ])   返回[ [ ‘liu’,’liuyl’], [18,17 ],[ ‘eat’,’drink’ ]] </li></ol></blockquote><h4 id="集合Collection-Array-Object-–27"><a href="#集合Collection-Array-Object-–27" class="headerlink" title="集合Collection[Array | Object]–27"></a>集合Collection[Array | Object]–27</h4><h5 id="C-1"><a href="#C-1" class="headerlink" title="C-1"></a>C-1</h5><blockquote><ol><li><em>.countBy(collection,[ iteratee=</em>.identity]):创建一个组成对象，key键是经过迭代函数处理集合中每个元素的返回值，每个key键对应的值是返回该值的次数。其中iteratee可以是 数组、函数、对象、字符串等。</li></ol></blockquote><h5 id="E-3"><a href="#E-3" class="headerlink" title="E-3"></a>E-3</h5><blockquote><ol start="2"><li><em>.each(collection,[ iteratee=</em>.identity ]-Function):遍历，iteratee接受的参数依次是 当前值、索引、整个集合  </li><li><em>eachRight(collection,[ iteratee=</em>.identity ]-Function):同上，不同之处为从右向左遍历。 </li><li><em>.every(collection,[ predicate=</em>.identity ]):通过断言函数predicate,检查collection中的所有元素是否都返回真值,若返回假值，迭代马上停止。 </li></ol></blockquote><h5 id="F-6"><a href="#F-6" class="headerlink" title="F-6"></a>F-6</h5><blockquote><ol start="5"><li><em>.filter(collection,[ predicate=</em>.identity]):返回断言函数predicate返回值为真值的所有元素的数组。 </li><li>_.find(collection,[ predicate], [ fromIndex=0]):返回断言函数predicate第一个值为真值的集合的第一个元素。  </li><li>_.findLast():略，同上，集合尾部开始迭代。    </li><li><em>.flatMap(collection,[ iteratte=</em>.idendity]):创建一个扁平化的数组。    </li><li><em>.flatMapDeep(collection,[ iteratte=</em>.idendity]):同上，区别是会继续扁平化递归映射的结果。 </li><li><em>.flatMapDepth(collection,[ iteratte=</em>.idendity],[ depth=1]):同上，区别是根据depth值扁平化递归映射结果。  </li></ol></blockquote><h4 id="日期Date-1"><a href="#日期Date-1" class="headerlink" title="日期Date-1"></a>日期Date-1</h4><h4 id="函数Function-23"><a href="#函数Function-23" class="headerlink" title="函数Function-23"></a>函数Function-23</h4><h4 id="Lang–56"><a href="#Lang–56" class="headerlink" title="Lang–56"></a>Lang–56</h4><h4 id="数学Math–15"><a href="#数学Math–15" class="headerlink" title="数学Math–15"></a>数学Math–15</h4><h4 id="数字Number–3"><a href="#数字Number–3" class="headerlink" title="数字Number–3"></a>数字Number–3</h4><h4 id="对象Object–47"><a href="#对象Object–47" class="headerlink" title="对象Object–47"></a>对象Object–47</h4><h4 id="Seq–13"><a href="#Seq–13" class="headerlink" title="Seq–13"></a>Seq–13</h4><h4 id="字符串String-–30"><a href="#字符串String-–30" class="headerlink" title="字符串String –30"></a>字符串String –30</h4><h4 id="是用函数–34"><a href="#是用函数–34" class="headerlink" title="是用函数–34"></a>是用函数–34</h4><h4 id="Properties–7"><a href="#Properties–7" class="headerlink" title="Properties–7"></a>Properties–7</h4><h4 id="Methods–1"><a href="#Methods–1" class="headerlink" title="Methods–1"></a>Methods–1</h4>]]></content>
      
      
      <categories>
          
          <category> ES6 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> lodash </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>每周总结第四十三期</title>
      <link href="/2020/07/12/issue-43/"/>
      <url>/2020/07/12/issue-43/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本周是2020年的第二十八个周末。<br>这里记录过去一周，我的一些总结。</p></blockquote><a id="more"></a><h4 id="Feeling"><a href="#Feeling" class="headerlink" title="Feeling"></a>Feeling</h4><blockquote><p>距离上一个周总结过去了快要俩个月了。<br>这匆匆忙忙的两个月里，并没有干什么。</p></blockquote><h4 id="A股暴涨"><a href="#A股暴涨" class="headerlink" title="A股暴涨"></a>A股暴涨</h4><blockquote><p>之前炒过一段时间股票，亏了两千块左右后就不玩了。<br>今年年初，手里有一点点闲钱，然后就入市。<br>我是个一点经验都没有的新手，在疫情期间入市后的一。时间一至在亏，然而这两周A股暴涨(尤其是7月6号，周一的涨幅，上证大盘近六个点)，从入市算起，竟然小赚万把块，这种捡来的钱，除了运气好、投机之外，想不到别的原因。<br>由此可见这次A股暴涨带给人的心灵冲击。</p></blockquote><h4 id="百度网盘白嫖新姿势"><a href="#百度网盘白嫖新姿势" class="headerlink" title="百度网盘白嫖新姿势"></a><a href="https://mp.weixin.qq.com/s/kIExcmla99aBBLoKC6O3Ig" target="_blank" rel="noopener">百度网盘白嫖新姿势</a></h4><blockquote><p>👆 这篇文章介绍了一个名为<code>度云简易分享地址提取</code>的网站，整个页面非常简单，没有多余粉饰和图片，只有几段文字介绍了网站如何下载百度网盘内的资源.<br>该网站地址是：<a href="http://pan.naifei.cc/" target="_blank" rel="noopener">http://pan.naifei.cc/</a>   </p><p>我从网盘里下载了一套视频，差不多不到13G，下载了大约半个小时到四十分钟左右吧。<br>不限速很爽。</p></blockquote><h4 id="如何自己写一个包发布到npm"><a href="#如何自己写一个包发布到npm" class="headerlink" title="如何自己写一个包发布到npm"></a>如何自己写一个包发布到npm</h4><blockquote><p>之前不知道发布一个npm包竟是如此简单。<br>简单到：在写好自己的包项目后，在npm注册一个账号，npm login登录成功后，npm publish就可以直接发布到npm官网。</p></blockquote><h4 id="webpack4-0"><a href="#webpack4-0" class="headerlink" title="webpack4.0"></a>webpack4.0</h4><blockquote><p>前几天在某交流群中，看到一群友分享的一个资源：慕课网讲师dell的实战课：《从基础到实战，手把手教带你掌握webpack4.0》。<br>拿到资源地址后，通过上面推荐的百度网盘资源下载，对整个视频整体了看了一遍，收获不小。<br>webpack的配置甚多。<br>现在的Vue-cli3.0与create-react-app在项目构建都不在看见webpack的身影。<br>对于Vue来说，自己出了一套规则，通过vue.config.js去配置webpack(vue将webpack封装)。对React脚手架来说，如果想要自己配置webpack，需要通过npm run ejects这个命令释放代码，配置的规则还是webpack。</p></blockquote><h4 id="Dan-Abramov"><a href="#Dan-Abramov" class="headerlink" title="Dan Abramov"></a>Dan Abramov</h4><blockquote><p>Dan Abramov–Redux的作者，受2014年Facebook的Flux架构以及函数式编程语言Elm启发。很快，Redux因其简单易学体积小在短时间内成为最热门的前端架构。<br>TA正在撰写 JavaScript 教程，还没有写完。只要在上面网址报名，每写好一部分就会通过邮件发给你。网址：<a href="https://justjavascript.com/" target="_blank" rel="noopener">https://justjavascript.com/</a></p></blockquote><h4 id="End"><a href="#End" class="headerlink" title="End"></a>End</h4><blockquote><p>创业公司不要专注于创造产品，而要专注于解决问题。  </p><p>看到抽象的东西，应该尽量使它变得具体；看到具体的东西，应该尽量使它变得抽象。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 每周分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 每周分享 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Proxy与Reflect</title>
      <link href="/2020/07/07/%E6%B7%B1%E5%85%A5%E4%B8%80%E4%B8%8B%E4%B8%8B%E8%BF%99%E4%B8%AAES6%E7%9A%84Proxy%E4%B8%8EReflect/"/>
      <url>/2020/07/07/%E6%B7%B1%E5%85%A5%E4%B8%80%E4%B8%8B%E4%B8%8B%E8%BF%99%E4%B8%AAES6%E7%9A%84Proxy%E4%B8%8EReflect/</url>
      
        <content type="html"><![CDATA[<h4 id="Proxy概述"><a href="#Proxy概述" class="headerlink" title="Proxy概述"></a>Proxy概述</h4><blockquote><p>说到Proxy这个东西，首先我们得对他有个定义，并且要对这个定义有个解释：<br>定义：Proxy用于修改某些操作的默认行为(等同于在语言层面做出修改，属于一种“元编程”，即对编程语言进行编程)。<br>解释：Proxy可以理解成，在目标对象之间架势一层“拦截”，外界对该对象的方法，都必须先通过这层拦截，因此提供一种机制，可以对外界的访问进行过滤和改写。<br>Proxy这个词的愿意是代理，用在这里表示由它来“代理”某些操作，可以译为“代理器”。</p></blockquote><a id="more"></a><blockquote><p>通过以上描述，我们最起码知道了Proxy这个东西就是一层过滤，担任拦截器的一种作用，然后我们写一段代码，来瞅瞅它的拦截-代理作用：  </p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">var obj = new Proxy(&#123;&#125;,&#123;</span><br><span class="line">  set:function(target,propKey,value,receiver)&#123;</span><br><span class="line">    console.log(`setting $&#123;propKey&#125;!`)</span><br><span class="line">    return Reflect.set(target,propKey,value,receiver)</span><br><span class="line">  &#125;,</span><br><span class="line">  get:function(target,propKey,receiver)&#123;</span><br><span class="line">    console.log(`getting $&#123;propKey&#125;!`)</span><br><span class="line">    return Reflect.set(target,propKey,receiver)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">obj.name=&quot;liugezhou&quot; // setting name</span><br><span class="line">obj.name  // getting name</span><br></pre></td></tr></table></figure><blockquote><p>通过以上代码，我们在给对象obj赋值或者取值的时候，通过Proxy代理拦截修改默认行为，看到输出的日志，这便是Proxy的一个简单代码描述。   </p></blockquote><blockquote><p>对Proxy有了一个简单的认识后，通过代码，我们知道：ES6原生提供了Proxy构造函数，用来生成一个Proxy实例<br><code>var proxy = new Proxy(target,handler)</code>   </p><ul><li>生成一个Proxy实例使用： <code>new Proxy()</code>   </li><li><code>target</code>表示所要拦截的目标对象。  </li><li><code>handler</code>参数也是一个对象，用来控制拦截行为。   </li></ul></blockquote><blockquote><p>到这里，关于Proxy的知识点差不多就算完了，只是对于Proxy拦截来说，它肯定是有一些规则的，Proxy支持的拦截操作一共13个，关于这些拦截方法的详细介绍，本文就不做整理了。</p></blockquote><h4 id="Reflect概述"><a href="#Reflect概述" class="headerlink" title="Reflect概述"></a>Reflect概述</h4><blockquote><p> 前面我们知道了Proxy，这个Reflect与Proxy是一样的，也是ES6为了操作对象而提供的新的API。Reflect的设计目的是这样的：   </p><ul><li>Reflect对Object说：你的一些明显是属于语言内部的方法，比如Object.defineProperty()。你就放我身上吧，包括一些你的其他方法，咱俩先都部署着，等到将来有新方法的时候，就都放我身上，到那时直接从我的身去拿语言内部的方法吧。  </li><li>Reflect接着对Object说：你说你提供了一些方法，也不知道居安思危的优化一下，我要修改一些你原先的一些返回结果，让客户们更舒服一些。Object说我哪里让客户不舒服了，举个例子。R说：比如你有个Object.defineProperty(obj,name,desc)的招式，这一招当你无法定义一个属性的时候，你奶奶的就直接抛出一个错误，而我呢，通过我的Reflec.defineProperty()</li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> ES6 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Proxy </tag>
            
            <tag> Reflect </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>webpack4.0</title>
      <link href="/2020/07/05/webpack4.0/"/>
      <url>/2020/07/05/webpack4.0/</url>
      
        <content type="html"><![CDATA[<h4 id="初识webpack"><a href="#初识webpack" class="headerlink" title="初识webpack"></a>初识webpack</h4><blockquote><ul><li>webpack is a module bundler.    </li><li>webpack核心定义是一个模块打包工具。   </li><li>webpack module：ES Module、CommonJS、CMD、AMD </li></ul></blockquote><a id="more"></a><h4 id="搭建webpack环境"><a href="#搭建webpack环境" class="headerlink" title="搭建webpack环境"></a>搭建webpack环境</h4><blockquote><ul><li>webpack本质上是由node实现的。 </li><li>不推荐全局安装webpack   </li><li>查看所有的webpack历史版本：<code>npm view webpack versions</code>    </li><li>查看最新webpacxk版本：<code>npm view webpack version</code>  </li><li>本地项目安装完成后，查看webpack的版本：<code>npx  webpack -v</code>    </li><li>加入本地全局安装了webpack，想看webpack安装目录：<code>npm ls webpack -g</code> </li></ul></blockquote><h4 id="webpack的配置"><a href="#webpack的配置" class="headerlink" title="webpack的配置"></a>webpack的配置</h4><blockquote><ul><li>mode:production(代码压缩),development(代码未压缩)</li><li>entry:打包进入文件  </li><li>output: 打包输出路径  </li><li>以某文件为配置文件打包：npx webpack –config webpackconfig.js </li><li>loader是什么：打包方案(对于特定文件的打包处理:比如file-loader可以对图片、字体等静态资源文件进行打包) ,loader的执行顺序是由下往上，由左至右。   </li><li>module:一些loader规则（比如使用file-loader的时候，想让图片的打包名字不改变，可以在module的rules中配置use属性的options属性）   </li><li>plugins:  <blockquote><ul><li>html-webpack-plugin:会在打包结束后自动生成一个html文件，并把打包生成的js自动引入到这个html文件中。 </li><li>plugin可以在webpack运行到某个时刻的时候，帮你做一些事情   类似与vue中的生命周期函数。 </li><li>clean-webpack-plugin:打包生成dist目录下的覆盖(1.0版本可以正常打包，3.0报错)。</li></ul></blockquote></li></ul></blockquote><h4 id="sourceMap的配置"><a href="#sourceMap的配置" class="headerlink" title="sourceMap的配置"></a>sourceMap的配置</h4><blockquote><ul><li>项目打包后，如果关闭sourceMap的配置，在浏览器打开项目后，看到的js代码为打包后的代码，不利于查找代码错误。 </li><li>sourceMap是一个映射关系，他可以知道在dist打包后的main.js错误的代码对应在未经打包的代码的位置。  </li><li>配置项为：devtool:’source-map’—会在dist目录下生成一个.map的映射文件。如果为’inline-source-map’，则不会生成.map文件，直接在原main.js文见中添加注释以映射(位置在底部)。如果为’’cheap-inline-source-map’ :与inline不同，只告诉是哪行代码出错，效率会高一些。如果为”cheap-module-source-map’:不管是业务代码，但是依赖的第三方模块，都会显示出出错的地方。eval是打包效率最高的方式。如果是开发环境，建议使用“cheap-module-eval-source-map’这种方式。如果是开发环境，一般不用设置devtool的配置。如果要配置，推荐使用”cheap-module-source-map”。</li></ul></blockquote><h4 id="使用WebpackDevServer提升开发效率"><a href="#使用WebpackDevServer提升开发效率" class="headerlink" title="使用WebpackDevServer提升开发效率"></a>使用WebpackDevServer提升开发效率</h4><blockquote><p> 要实现的效果是修改了一个index.js文件中的代码，可以不用重新打包，直接去运行index.html的文件。要实现这种效果有三种方法： </p><ul><li><ol><li>在 package.json文件中给script命令加一个 –watch的参数。当加入watch参数后，会监听文件，如果源文件代码修改，会实时的更新打包。 </li></ol></li><li><ol start="2"><li>webpack-dev-server（webpack不自带，需要安装的）:第一次运行脚本的时候，自动打包、打开浏览器、热更新等功能。此外隐藏的一个功能是将dist打包保存至电脑内存。  </li></ol></li><li><ol start="3"><li>在node中直接使用webpack：通过expres与webpack-dev-middleware手写一个server.js。</li></ol></li></ul></blockquote><h4 id="HMR-hot-Module-Replacement-热模块替换"><a href="#HMR-hot-Module-Replacement-热模块替换" class="headerlink" title="[HMR] hot Module Replacement(热模块替换)"></a>[HMR] hot Module Replacement(热模块替换)</h4><blockquote><p>场景：js动作添加一些模块后，如果修改css文件，webpack会将之前的行为给删除，HMR就是解决只修改css在，不更改行为的。</p></blockquote><h4 id="使用Babel处理ES6语法"><a href="#使用Babel处理ES6语法" class="headerlink" title="使用Babel处理ES6语法"></a>使用Babel处理ES6语法</h4><blockquote><ul><li>安装第三方依赖：’babel-loader’、‘@babel/core’：babel-loader只是webpack与babel的一个沟通桥梁，并不会将ES6代码转化为ES5代码。 </li><li>继续安装@babel/preset-env，用于将ES6代码转为ES5代码。 </li><li>配置webpack.config.js。 </li><li>继续安装@babel/pollyfill(对低版本的一个完善)，使用的时候直接在全局引入即可:import ‘@babel/polyfill’,这样存在一个问题，打出的包非常的大，不爽，然后解决之：在webpack的配置文件中，这么配置：   </li></ul></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">  test: /\.js$/, </span><br><span class="line">  exclude: /node_modules/, </span><br><span class="line">  loader: &apos;babel-loader&apos;,</span><br><span class="line">  options:&#123;</span><br><span class="line">    presets: [[&apos;@babel/preset-env&apos;,&#123;</span><br><span class="line">      useBuiltIns:&apos;usage&apos;</span><br><span class="line">    &#125;]]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Tree-Shaking"><a href="#Tree-Shaking" class="headerlink" title="Tree Shaking"></a>Tree Shaking</h4><blockquote><ul><li>Tree Shaking在webpack2.0之后引入。  </li><li>在math.js这个模块中有两个方法add 和minu，在index中只调用add方法，去打包的时候，会将math中的两个方法均打包，这样做是没有必要，且会使得打包文件变大，Tree Shaking就是为了解决这个问题的。     </li><li>Tree Shaking只支持ES Module(即import这种模块引入，require这种的不支持)。 </li></ul></blockquote><blockquote><p> mode为development环境：  </p><ul><li>默认没有Tree Shaking功能。配置的话需要在配置文件中添加 <code>optimization:{usedExports:true},</code> ，并且如果直接引入第三方资源，如果也不想做Tree Shaking，需要在package.json中配置（比如业务代码中使用了polyfill，添加： “sideEffects”:[“@babel/polyfill”],以忽略Tree Shaking对其作用）   </li><li>在我们math这个例子中，并未用到polyfill , 我们继续在package.json中配置： “sideEffects”:false   </li><li>这个时候我们用webpack打包，发现打包文件中，minu这个方法也被打包保留了下来，但是文件中有提示，告知我们只要add方法使用了。之所以有代码的保留是因为在开发环境下我们会调试代码，为了使得行行对应。  </li></ul></blockquote><blockquote><p>mode为production环境时：  </p><ul><li>Tree-Shaking才算真正生效。  </li><li>在production环境下，Tree-Shaking默认已经配置好了，在webpack的配置文件下不需要对<code>optimization</code>配置。     </li><li>但是仍然需要对package.json中的sideEffects进行配置。   </li><li>使用webpack打包会发现生成一个.map的映射文件，且打包文件被压缩，注释去掉、minu有关的代码也剔除掉了。    </li></ul></blockquote><h4 id="Development和Production模式的区分打包"><a href="#Development和Production模式的区分打包" class="headerlink" title="Development和Production模式的区分打包"></a>Development和Production模式的区分打包</h4><blockquote><p> 通过前面的学习，我们知道在开发环境与生产环境下，打包方式是有区别。<br> 为了提高在不同开发模式下进行打包的效率，我们分别新建两个文件:webpack.dev.js和webpack.prod.js。这两个文件分别代码不同环境下的webpack配置。<br>然后在package.json文件中的script标签页配置两个命令即可：<br>‘dev’:’webpack-dev-server –config webpack-dev.js’<br>‘build’:’webpack –config webpack.prod.js’    </p></blockquote><blockquote><p>到这里我们又发现一个问题，dev与prod的配置文件有特别多相同的代码，我们继续优化：<br>根目录下新建webpack.base.js,将dev与prod相同的代码摘出来放到base中去。<br>这个时候分别将dev/pro的文件与base文件进行合并输出配置：需要安装第三方模块：<code>webpack-merge</code> (此文默认安装的时候最新版本是5.0.8,使用merge报错，然后回退使用4.2.2版本)<br>最后分别在dev和prod中引入webpack-merge,通过<code>module.exports = merge(baseConfig, fileConfig)</code>即可。  </p></blockquote><h4 id="webpack和Code-Splitting-代码分割"><a href="#webpack和Code-Splitting-代码分割" class="headerlink" title="webpack和Code Splitting(代码分割)"></a>webpack和Code Splitting(代码分割)</h4><blockquote><p>代码分割与webpack无关。</p><ul><li>这里的代码分割是指对代码进行分割，提高代码执行效率与性能。    </li></ul></blockquote><blockquote><p>Demo:</p><ul><li>安装第三方包：lodash(提供了一些工具方法)。      </li><li>比如通过entry，将lodash打包成一个文件，业务代码打成一个文件。   </li></ul></blockquote><blockquote><p>webpack4可以自动的帮我们做代码分割：  </p><ul><li>第一种同步代码：在webpack.base.js中配置 optimization:{splitChunks:{chunks:’all’}},此时在开发环境下打包，会看到有一个新的打包文件：vendors~main.js.    </li><li>第二种异步代码：异步加载第三方资源(import异步引入)，无需做任何配置，webpack会自动帮我们进行代码的分割。</li></ul></blockquote><h4 id="Lazy-Loading懒加载，Chunk是什么？"><a href="#Lazy-Loading懒加载，Chunk是什么？" class="headerlink" title="Lazy Loading懒加载，Chunk是什么？"></a>Lazy Loading懒加载，Chunk是什么？</h4><blockquote><p>懒加载是通过import异步加载一个模块，在执行的时候，再去引入。<br>路由懒加载等提升页面加载效率。<br>业务代码引入第三方资源的懒加载可以通过async、await。    </p></blockquote><blockquote><p>chunk指的是整个项目完成打包后，dist下面有几个js文件就是指几个chunk。</p></blockquote><h4 id="CSS文件的代码分割"><a href="#CSS文件的代码分割" class="headerlink" title="CSS文件的代码分割"></a>CSS文件的代码分割</h4><blockquote><p>webpack配置文件中的output有两个属性：fileName和chunkFilename，这两个的区别是：  </p><p>CSS文件代码分割要使用在生产环境中。<br>需要安装<code>mini-css-extract-plugin</code>插件。<br>使用<code>optimize-css-assets-webpack-plugin</code>这个插件可以对代码进行合并和压缩。</p></blockquote><h4 id="shimming"><a href="#shimming" class="headerlink" title="shimming"></a>shimming</h4><blockquote><p>代码或者打包过程的兼容性问题。    </p><p>webpack自带一个webpack.procidePlugin({})插件–垫片。    </p><p>如果想让每一个js文件的this指向window，安装<code>imports-loader</code>。<br>对webpack.base.js做一些配置。</p></blockquote><h4 id="Library打包"><a href="#Library打包" class="headerlink" title="Library打包"></a>Library打包</h4><blockquote><p>自己发布一个npm包，在配置好自己的项目包之后，在npm官方注册账号，npm login登录，npm publish即可</p></blockquote><h4 id="Progessive-Web-Application-PWA"><a href="#Progessive-Web-Application-PWA" class="headerlink" title="Progessive Web Application - PWA"></a>Progessive Web Application - PWA</h4><blockquote><ul><li>安装第三方插件：workbox-webpack-plugin。   </li><li>线上打包配置文件：添加plugin：new WorkboxPlugin.GenerateSW()。   </li><li>在业务代码中，应该serverWorker，就可以将页面缓存住了。  </li></ul></blockquote><h4 id="TypaScript的打包配置"><a href="#TypaScript的打包配置" class="headerlink" title="TypaScript的打包配置"></a>TypaScript的打包配置</h4><blockquote><p> 总结至：<a href="https://github.com/liugezhou/typescript_webpack" target="_blank" rel="noopener">https://github.com/liugezhou/typescript_webpack</a></p></blockquote><h4 id="使用WebpackDevServer实现请求转发"><a href="#使用WebpackDevServer实现请求转发" class="headerlink" title="使用WebpackDevServer实现请求转发"></a>使用WebpackDevServer实现请求转发</h4><blockquote><p>本节主要是对webpack的配置devServer属性中的proxy做了一个讲解，没啥内容。</p></blockquote><h4 id="WebpackDevServer解决单页面应用路由问题"><a href="#WebpackDevServer解决单页面应用路由问题" class="headerlink" title="WebpackDevServer解决单页面应用路由问题"></a>WebpackDevServer解决单页面应用路由问题</h4><blockquote><p>devServer:historyApiFallback: true</p></blockquote><h4 id="Eslint在Webpack中的配置"><a href="#Eslint在Webpack中的配置" class="headerlink" title="Eslint在Webpack中的配置"></a>Eslint在Webpack中的配置</h4><blockquote><ul><li>npm i eslint -D   </li><li>npx eslint –init   </li><li>npm i babel-eslint -D</li></ul></blockquote><h4 id="提升Webpack打包速度的方法"><a href="#提升Webpack打包速度的方法" class="headerlink" title="提升Webpack打包速度的方法"></a>提升Webpack打包速度的方法</h4><blockquote><ol><li>跟上技术的迭代：Npde、Npm、Yarn  </li><li>在尽可能少的模块上应用Loader (合理使用exclude和include)    </li><li>Plugin尽可能精简少用并确保可靠</li><li>resolve参数合理配置(如果想引入默认为js或者jsx的文件，在webpack配置文件中加<code>resolve:{extensions:[&#39;.js&#39;,&#39;jsx&#39;]}</code>)</li></ol></blockquote><h4 id="如何编写一个loader"><a href="#如何编写一个loader" class="headerlink" title="如何编写一个loader"></a>如何编写一个loader</h4><blockquote><p>借助loader处理引用的文件。<br><a href="https://github.com/liugezhou/make-loader" target="_blank" rel="noopener">demo仓库源码</a></p></blockquote><h4 id="如何编写一个Plugin"><a href="#如何编写一个Plugin" class="headerlink" title="如何编写一个Plugin"></a>如何编写一个Plugin</h4><blockquote><p>在打包的某个具体时刻做的操作(比如打包钱清空dist目录，打包完成的html自动生成等)<br><a href="https://github.com/liugezhou/make-plugin" target="_blank" rel="noopener">demo仓库源码</a></p></blockquote><h4 id="Bundler源码编写-模块分析"><a href="#Bundler源码编写-模块分析" class="headerlink" title="Bundler源码编写(模块分析)"></a>Bundler源码编写(模块分析)</h4><blockquote><p><a href="https://github.com/liugezhou/make-bundle" target="_blank" rel="noopener">demo仓库源码</a></p></blockquote><h4 id="通过CreateReactApp深入学习Webpack配置"><a href="#通过CreateReactApp深入学习Webpack配置" class="headerlink" title="通过CreateReactApp深入学习Webpack配置"></a>通过CreateReactApp深入学习Webpack配置</h4><h4 id="通过VueCli3学习webpack配置"><a href="#通过VueCli3学习webpack配置" class="headerlink" title="通过VueCli3学习webpack配置"></a>通过VueCli3学习webpack配置</h4>]]></content>
      
      
      <categories>
          
          <category> webpack </category>
          
      </categories>
      
      
        <tags>
            
            <tag> webpack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>长链接转短链接方法实践</title>
      <link href="/2020/05/27/%E9%95%BF%E9%93%BE%E6%8E%A5%E8%BD%AC%E7%9F%AD%E9%93%BE%E6%8E%A5/"/>
      <url>/2020/05/27/%E9%95%BF%E9%93%BE%E6%8E%A5%E8%BD%AC%E7%9F%AD%E9%93%BE%E6%8E%A5/</url>
      
        <content type="html"><![CDATA[<h5 id="我们在项目开发中，会遇到长链接转短链接的一个需求。"><a href="#我们在项目开发中，会遇到长链接转短链接的一个需求。" class="headerlink" title="我们在项目开发中，会遇到长链接转短链接的一个需求。"></a>我们在项目开发中，会遇到长链接转短链接的一个需求。</h5><h5 id="单从我在开发中遇到的场景，是这样的：某个项目的详情页，要通过页面url生成二维码。而这个项目地址的url很长，所以会导致生成的二维码非常的密密麻麻，然后会造成不容易识别，于是就有了将长链接地址转为短链接地址，然后生成二维码的需求。"><a href="#单从我在开发中遇到的场景，是这样的：某个项目的详情页，要通过页面url生成二维码。而这个项目地址的url很长，所以会导致生成的二维码非常的密密麻麻，然后会造成不容易识别，于是就有了将长链接地址转为短链接地址，然后生成二维码的需求。" class="headerlink" title="单从我在开发中遇到的场景，是这样的：某个项目的详情页，要通过页面url生成二维码。而这个项目地址的url很长，所以会导致生成的二维码非常的密密麻麻，然后会造成不容易识别，于是就有了将长链接地址转为短链接地址，然后生成二维码的需求。"></a>单从我在开发中遇到的场景，是这样的：某个项目的详情页，要通过页面url生成二维码。而这个项目地址的url很长，所以会导致生成的二维码非常的密密麻麻，然后会造成不容易识别，于是就有了将长链接地址转为短链接地址，然后生成二维码的需求。</h5><h5 id="除此之外，拼多多分享被微信封掉后-我们也时不时微信群里面看到地址有长这个样子的分享：https-w-url-cn-s-xxxxxxx。这个地址是微信api给出的长链接转短链接接口。"><a href="#除此之外，拼多多分享被微信封掉后-我们也时不时微信群里面看到地址有长这个样子的分享：https-w-url-cn-s-xxxxxxx。这个地址是微信api给出的长链接转短链接接口。" class="headerlink" title="除此之外，拼多多分享被微信封掉后,我们也时不时微信群里面看到地址有长这个样子的分享：https://w.url.cn/s/xxxxxxx。这个地址是微信api给出的长链接转短链接接口。"></a>除此之外，拼多多分享被微信封掉后,我们也时不时微信群里面看到地址有长这个样子的分享：<a href="https://w.url.cn/s/xxxxxxx。这个地址是微信api给出的长链接转短链接接口。" target="_blank" rel="noopener">https://w.url.cn/s/xxxxxxx。这个地址是微信api给出的长链接转短链接接口。</a></h5><h5 id="这篇文章就记录长链接转短链接的一些小小所学。"><a href="#这篇文章就记录长链接转短链接的一些小小所学。" class="headerlink" title="这篇文章就记录长链接转短链接的一些小小所学。"></a>这篇文章就记录长链接转短链接的一些小小所学。</h5><a id="more"></a><h4 id="微信长链接转短链接接口"><a href="#微信长链接转短链接接口" class="headerlink" title="微信长链接转短链接接口"></a>微信长链接转短链接接口</h4><blockquote><p>微信公众号官方文档提供了一个长链接转短链接的接口:<a href="https://developers.weixin.qq.com/doc/offiaccount/Account_Management/URL_Shortener.html" target="_blank" rel="noopener">官方地址</a>；<br>根据官方文档：<br>主要使用场景为开发者用于生成二维码的原链接（商品、支付二维码等）太长导致扫码速度和成功率下降，将原长链接通过此接口转成短链接再生成二维码将大大提升扫码速度和成功率。该接口请求参数为三个：access_token、action、long_url，请求方式为POST。通过接口生成的短链接样式为：<a href="https://w.url.cn/s/xxxxxxx。" target="_blank" rel="noopener">https://w.url.cn/s/xxxxxxx。</a>  </p><p>该生成接口的方式非常之简单，只是此链接只能在腾讯系应用打开。如若在支付宝中会提示打不开。<br>代码实现如下：  </p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line">@RestController</span><br><span class="line">@Slf4j</span><br><span class="line">public class WechatToolImpl extends BaseApiService implements IWechatToolApi &#123;</span><br><span class="line">    @Autowired</span><br><span class="line">    private WechatApiImpl wechatapi;</span><br><span class="line">    @Override</span><br><span class="line">    public String longUrlToShort(String longUrl) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            longUrl= URLDecoder.decode( longUrl, &quot;UTF-8&quot; );</span><br><span class="line"></span><br><span class="line">        &#125; catch (UnsupportedEncodingException e) &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        //要先去redis获取之前存储的 access_token</span><br><span class="line">        BaseResponse&lt;AccessTokenOutputDTO&gt; tokenDTO = wechatapi.getpublictoken();</span><br><span class="line">        AccessTokenOutputDTO token = tokenDTO.getData();</span><br><span class="line">        String access_token = token.getAccessToken();</span><br><span class="line">        JSONObject jsobj1 = new JSONObject();</span><br><span class="line">        jsobj1.put(&quot;action&quot;, &quot;long2short&quot;);</span><br><span class="line">        jsobj1.put(&quot;long_url&quot;, longUrl);</span><br><span class="line">        String result = post(jsobj1, &quot;https://api.weixin.qq.com/cgi-bin/shorturl?access_token=&quot; + access_token);</span><br><span class="line">        String short_url = &quot;&quot;;</span><br><span class="line">        Map maps = (Map) JSON.parse(result);</span><br><span class="line">        if (maps.containsKey(&quot;short_url&quot;)) &#123;</span><br><span class="line">            short_url = maps.get(&quot;short_url&quot;).toString();</span><br><span class="line">        &#125;</span><br><span class="line">        return short_url;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static String post(JSONObject json, String URL) &#123;</span><br><span class="line"></span><br><span class="line">        HttpClient client = new DefaultHttpClient();</span><br><span class="line">        HttpPost post = new HttpPost(URL);</span><br><span class="line"></span><br><span class="line">        post.setHeader(&quot;Content-Type&quot;, &quot;application/json&quot;);</span><br><span class="line">        post.addHeader(&quot;Authorization&quot;, &quot;Basic YWRtaW46&quot;);</span><br><span class="line">        String result = &quot;&quot;;</span><br><span class="line"></span><br><span class="line">        try &#123;</span><br><span class="line"></span><br><span class="line">            StringEntity s = new StringEntity(json.toString(), &quot;utf-8&quot;);</span><br><span class="line">            s.setContentEncoding(new BasicHeader(HTTP.CONTENT_TYPE,</span><br><span class="line">                    &quot;application/json&quot;));</span><br><span class="line">            post.setEntity(s);</span><br><span class="line"></span><br><span class="line">            // 发送请求</span><br><span class="line">            HttpResponse httpResponse = client.execute(post);</span><br><span class="line"></span><br><span class="line">            // 获取响应输入流</span><br><span class="line">            InputStream inStream = httpResponse.getEntity().getContent();</span><br><span class="line">            BufferedReader reader = new BufferedReader(new InputStreamReader(</span><br><span class="line">                    inStream, &quot;utf-8&quot;));</span><br><span class="line">            StringBuilder strber = new StringBuilder();</span><br><span class="line">            String line = null;</span><br><span class="line">            while ((line = reader.readLine()) != null) &#123;</span><br><span class="line">                strber.append(line + &quot;\n&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">            inStream.close();</span><br><span class="line"></span><br><span class="line">            result = strber.toString();</span><br><span class="line"></span><br><span class="line">            if (httpResponse.getStatusLine().getStatusCode() == 200) &#123;</span><br><span class="line"></span><br><span class="line">                log.info(&quot;请求服务器成功，做相应处理&quot;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            &#125; else &#123;</span><br><span class="line"></span><br><span class="line">                log.info(&quot;请求服务端失败&quot;);</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        log.info(result);</span><br><span class="line">        return result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>上述代码未写从微信接口获取access_token的方法实现。</p></blockquote><h4 id="自己实现思路总结"><a href="#自己实现思路总结" class="headerlink" title="自己实现思路总结"></a>自己实现思路总结</h4><blockquote><p>只从表象来看，长链接转短链接，肯定是有映射关系的。比如从微信获取一个短链接地址，微信服务器上肯定有一个相对应的地方去存这个长链接。这么来看，我们不妨自己实现一个长链接转短链接的功能(简版)。<br>首先：数据库中建一个表，用来存在主键ID以及长链接地址。<br>然后：拿到一个长链接后，通过主键ID存放长链接地址，返回一个短链接地址，先假如返回的短链接地址是：<a href="https://liugezhou/go/skr/u=1" target="_blank" rel="noopener">https://liugezhou/go/skr/u=1</a> (1为新建表的主键ID)。<br>最后：在我们的服务liugezhou上实现一个接口 <code>s</code>，采用get请求方式，传递一个参数u，然后在此接口中通过传递过来的u参数与表中查找长链接地址，然后直接重定向。<br>代码实现比较简单，由于这只是一个设想，并未去实现<code>通过主键ID存放长链接地址</code>的代码开发，只是在各个平台测试了下简单访问：  </p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">@Api(tags = &quot;通用服务接口&quot;, description = &quot;重定向&quot;)</span><br><span class="line">@RequestMapping(&quot;/go&quot;)</span><br><span class="line">public interface ICommonApi &#123;</span><br><span class="line"></span><br><span class="line">        @ApiOperation(value = &quot;扫码进入&quot;,notes = &quot;应用环境：PUBLIC&quot;)</span><br><span class="line">        @GetMapping(&quot;/skr&quot;)</span><br><span class="line">        void skr(@ApiParam(value = &quot;二维码对应主键id&quot;, required = true)</span><br><span class="line">        @RequestParam(value = &quot;u&quot;) String u) throws IOException;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@Slf4j</span><br><span class="line">@RestController</span><br><span class="line">public class CommonApiImpl extends BaseApiService implements ICommonApi &#123;</span><br><span class="line">    @Autowired</span><br><span class="line">    private QService qService;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private HttpServletRequest request;</span><br><span class="line">    @Autowired</span><br><span class="line">    private HttpServletResponse response;</span><br><span class="line"></span><br><span class="line">   @Override</span><br><span class="line">    public void skr(String u) throws IOException &#123;</span><br><span class="line">        String url = qService.selectQrUrl(u);</span><br><span class="line">        response.sendRedirect(url);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="各种第三方"><a href="#各种第三方" class="headerlink" title="各种第三方"></a>各种第三方</h4><blockquote><p>第三方的实现就比较多了，比如百度短网址。<br>百度短网址服务现在只针对企业开发，个人没有权限，而通过企业账号登录后，调试其接口，可能会出现：”content long url not safe”的错误。<br>提工单，将自己的长链接地址示例审核一下，大约半个到一个小时就ok了。<br>第三方相对来说稳定一些，也不用维护什么，就是得稍微花一点点的钱。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 服务端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 长链接 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>每周总结第四十二期</title>
      <link href="/2020/05/25/issue-42/"/>
      <url>/2020/05/25/issue-42/</url>
      
        <content type="html"><![CDATA[<blockquote><p>上周是2020年的第二十一个周末。(今天周一)<br>这里记录过去一周，我的一些总结。</p></blockquote><!-- 制作一张最能反映过去一周的周图片 --><p><img src="http://img.liugezhou.online/blog/weekly42.png" alt="weekly-42"></p><a id="more"></a><!-- 一周最大感受 --><h4 id="Feeling"><a href="#Feeling" class="headerlink" title="Feeling"></a>Feeling</h4><blockquote><p>好吧，继续拖更。<br>虽然此号无人问津，但是我却心有不甘。</p></blockquote><h4 id="爱love佑"><a href="#爱love佑" class="headerlink" title="爱love佑"></a>爱love佑</h4><blockquote><p>爱love佑小程序，爱佑慈善基金会官方小程序。<br>如果世界让你感到冷漠，如果生活让你疲惫不堪，如果爱心让你无处释放。<br>打开小程序，为远方还在忍受病痛折磨的孩子献上一份爱心吧。</p></blockquote><h4 id="KTFSR"><a href="#KTFSR" class="headerlink" title="KTFSR"></a>KTFSR</h4><blockquote><p>发送KTFSR到10086，可以开通骚扰电话拦截功能，不用额外下载软件。</p></blockquote><h4 id="楼盘真正销售情况"><a href="#楼盘真正销售情况" class="headerlink" title="楼盘真正销售情况"></a><a href="https://mp.weixin.qq.com/s/4rtdQ5gU6w0xY2lqSMEbWg" target="_blank" rel="noopener">楼盘真正销售情况</a></h4><blockquote><p>👆 这篇文章，通过分析武汉楼盘情况，告诉大家：<code>所有楼盘的销售情况都是在政府网站上全部公开的</code>。<br>作者在留言区：<code>所有城市楼盘销售情况都有的，国家规定必须公开，位置不同而已</code>。<br>然而我花了些时间找了一找，还是没有找到。  </p></blockquote><h4 id="One-Switch"><a href="#One-Switch" class="headerlink" title="One Switch"></a>One Switch</h4><blockquote><p>一款Mac桌面软件， 可以快速设置隐藏桌面、黑暗模式、保持亮屏、屏幕保护、清理屏幕等小工具。  </p><p>Mac上一些软件在安装时，会显示不能打开的提示，就像这块小工具软件，这个时候只要打开终端输入以下命令，就会开启Mac的安装设置：允许任何来源。<br><code>sudo spctl --master-disable</code></p></blockquote><h4 id="小技巧：Mac系统调整Launchpad图标大小"><a href="#小技巧：Mac系统调整Launchpad图标大小" class="headerlink" title="小技巧：Mac系统调整Launchpad图标大小"></a><a href="https://www.jianshu.com/p/60315dfcda53" target="_blank" rel="noopener">小技巧：Mac系统调整Launchpad图标大小</a></h4><blockquote><p>👆 Mac的启动台页面默认显示的图标比较大，而在我们使用一段时间后，会安装很多软件，图标看着着实不舒服。<br>在设置中找不到图标大小的设置，这个时候需要在终端中，执行如下命令：  </p><p>1、调整每一列显示图标数量，7 表示每一列显示7个<br> <code>defaults write com.apple.dock springboard-rows -int 7</code>  </p><p>2、调整每一行显示图标数量，这里我用的是8<br><code>defaults write com.apple.dock springboard-columns -int 8</code>  </p><p>3、由于修改了每一页显示图标数量，可能需要重置Launchpad<br><code>defaults write com.apple.dock ResetLaunchPad -bool TRUE;killall Dock</code></p></blockquote><h4 id="柠檬清理"><a href="#柠檬清理" class="headerlink" title="柠檬清理"></a><a href="https://lemon.qq.com/" target="_blank" rel="noopener">柠檬清理</a></h4><blockquote><p>一款Mac清理工具。</p></blockquote><h4 id="traditional"><a href="#traditional" class="headerlink" title="traditional"></a>traditional</h4><blockquote><p> jquery框架的ajax参数：<code>traditional</code>,其默认值是false。<br>而在请求接口如果需要传递一个参数为数组时，可以添加<code>traditionla:true</code>这一设置。</p></blockquote><h4 id="JustAuth"><a href="#JustAuth" class="headerlink" title="JustAuth"></a><a href="https://github.com/justauth/JustAuth" target="_blank" rel="noopener">JustAuth</a></h4><blockquote><p>👆 史上最全的整合第三方登录的开源库。目前已支持Github、Gitee、微博、钉钉、百度、Coding、腾讯云开发者平台、OSChina、支付宝、QQ、微信、淘宝、Google、Facebook、抖音、领英、小米、微软、今日头条、Teambition、StackOverflow、Pinterest、人人、华为、企业微信、酷家乐、Gitlab、美团、饿了么和推特等第三方平台的授权登录。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 每周分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 每周分享 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>每周总结第四十一期</title>
      <link href="/2020/05/12/issue-41/"/>
      <url>/2020/05/12/issue-41/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本周是2020年的第十九个周末。<br>这里记录过去一周，我的一些总结。</p></blockquote><a id="more"></a><!-- 一周最大感受 --><h4 id="Feeling"><a href="#Feeling" class="headerlink" title="Feeling"></a>Feeling</h4><blockquote><p>这两周的周总结是干不下去了，上周的文章又拖到了今日[本周二]。 </p><p>眨眼之间，周总结写了四十周，差不多就是十个月，这家伙真要这么断了，也怪可惜的。<br>比较没有总结的欲望，是因为周总结带给我的是一次不如一次的体验。<br>为了让我欣慰的感觉到每周还在做点东西、而明显开始应付差事。  </p><p>记录下最近比较糟心的事–关于工作方面的：<br>在手的两个项目，其中一个由于跨部门合作，主要是为前端提供后端接口；<br>另一个比较舒心但总是中断的项目是：前后端分离但需共同兼顾的新项目。  </p><p>第一个项目基本接口服务已经完成，由于接手离职人员的代码，外加我对后端代码不是很待见，于是调试的一个个bug扰乱了我弱小的心灵。<br>第二个项目由于第一个项目的时刻扰乱，从来也不顺畅。<br>不仅如此，我也深感调试的这些bug对自我技术的提升不会有什么帮助，于是时刻提醒自己保持平常心。<br>这就是工作，一个职工在公司的首页任务：解决问题为先。 </p></blockquote><h4 id="教育部"><a href="#教育部" class="headerlink" title="教育部"></a>教育部</h4><blockquote><p>教育部消息，今年将招收40多万毕业生补充中小学和幼儿园教师队伍，并采取“先上岗、再考证”的举措。</p></blockquote><h4 id="未获用户同意投放快递柜属违法"><a href="#未获用户同意投放快递柜属违法" class="headerlink" title="未获用户同意投放快递柜属违法"></a>未获用户同意投放快递柜属违法</h4><blockquote><p>江苏省邮政管理局统计，省内15%的快递采取了快递柜方式投递。邮政管理部门表示，快递员未征得用户同意就投到快递柜属违法行为，用户可投诉快递企业。若企业不改正，可拨打025-12305申诉。</p></blockquote><h4 id="求助电话"><a href="#求助电话" class="headerlink" title="求助电话"></a>求助电话</h4><blockquote><p>抖音上看到的一个视频，法律相关的救助电话：<br>12348:法律援助。<br>12333:拖欠工资。<br>12309:举报村霸。</p></blockquote><h4 id="后浪"><a href="#后浪" class="headerlink" title="后浪"></a>后浪</h4><blockquote><p>B站后浪视频的爆火，引起一批90后00后的强烈方案与吐槽。有人写道：《后浪》是一次成功的事件营销，但也给B站敲响了警钟。<br>虽然不止于此，但还是忍不住网络思考者们的一堆吐槽。  </p><p>程序猿版<a href="https://mp.weixin.qq.com/s/8mMV-6ggKS-ES7M4x-h4Jg" target="_blank" rel="noopener">《溢出吧，后浪》</a></p></blockquote><h4 id="端到端加密"><a href="#端到端加密" class="headerlink" title="端到端加密"></a>端到端加密</h4><blockquote><p>我总结了一下,目前支持端对端加密的通信软件，欢迎补充。  </p><ul><li>Signal  </li><li>WhatsApp   </li><li>Wire  </li><li>Matrix  </li><li>Riot  </li><li>Line  </li><li>Keybase<br>根据我查到的资料，Telegram 默认不开启端对端加密，仅在使用一对一的“秘密聊天”功能时提供。<br>所以，Telegram 的群聊是不加密的<br><cite>–from  阮一峰的Twitter</cite><br>国内受政策影响，应该没有较为[流行]的端对端加密通信软件。<br>所谓端到端加密通讯软件，简单来说就是：<br>任何使用端到端加密（E2EE）的软件都可以保证只有您和收件人才能看到发送的内容。没有人可以拦截您正在传输的消息并阅读它们。<br><a href="https://www.cyclonis.com/zh-hans/what-is-end-to-end-encryption/" target="_blank" rel="noopener">什么是端到端加密</a></li></ul></blockquote><h4 id="Free-Mybatis-Plugin"><a href="#Free-Mybatis-Plugin" class="headerlink" title="Free Mybatis Plugin"></a>Free Mybatis Plugin</h4><blockquote><p>IDE插件：跳转到mapper以及从mapper文件中跳回,主要作用：  </p><ul><li>生成mapper xml文件  </li><li>快速从代码跳转到mapper及从mapper返回代码  </li><li>mybatis自动补全及语法错误提示 </li><li>集成mybatis generator gui界面</li></ul></blockquote><h4 id="END"><a href="#END" class="headerlink" title="END"></a>END</h4><blockquote><p>Okay.</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 每周分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 每周分享 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>每周总结第四十期</title>
      <link href="/2020/05/05/issue-40/"/>
      <url>/2020/05/05/issue-40/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本周是2020年的第十八个周末。<br>这里记录过去一周，我的一些总结。</p></blockquote><!-- 制作一张最能反映过去一周的周图片 --><p><img src="http://img.liugezhou.online/blog/weekly40.jpg" alt="weekly-40"></p><a id="more"></a><!-- 一周最大感受 --><h4 id="Feeling"><a href="#Feeling" class="headerlink" title="Feeling"></a>Feeling</h4><blockquote><p>上周由于加班与项目烦心事较多，停更了一周。<br>当然，也是由于没有什么值得记录的素材与总结的心得。<br>虽然尽量保证每周周报不糊弄自己，可时间久了免不了心生疲惫与退意。每每想到虽然每周的总结做的不是很好，但至少还在坚持学习、坚持尝试关注一些东西，还是觉得有一些的收获。<br>祝大家五一中长假欢乐。</p><p>这篇文章开始写的时候是五月一号，而到如今发出五一过去了。</p></blockquote><h4 id="一句话新规"><a href="#一句话新规" class="headerlink" title="一句话新规"></a>一句话新规</h4><blockquote><p>最高人民法院正式规定，电子数据充当民事诉讼证据具有完全效力，从2020年5月1日开始实施。网页、博客、微博、短信、电子邮件、即时通信、用户注册信息、电子交易记录、登录日志等，都是有效证据。</p></blockquote><h4 id="负油价"><a href="#负油价" class="headerlink" title="负油价"></a>负油价</h4><blockquote><p>看到一个段子：<br>一月武汉加油，二月中国加油，三月世界加油，四月油加多了～<br>上周【暴跌300% 美油期货每桶-37美元】又一次让众人见证历史，中国银行原油宝客户抄底失败倒欠银行钱的事引起轩然大波。</p></blockquote><h4 id="丰巢快递柜与刷脸识别技术"><a href="#丰巢快递柜与刷脸识别技术" class="headerlink" title="丰巢快递柜与刷脸识别技术"></a>丰巢快递柜与刷脸识别技术</h4><blockquote><p>4月30日，丰巢快递柜开始进入收费时代，超12小时每半天收费0.5元，3元封顶。<br>一名公号大V针对此次进行了审核剖析：<a href="https://mp.weixin.qq.com/s/kqy0qC2i7VP2BHQXxNYnSQ" target="_blank" rel="noopener">《我的快递，什么时候能送货上门？》</a>.   </p><p>和这样事件大同小异的刷脸识别技术也被各公司应用的淋漓极致，比如北京银行新版的《北京银行电子银行转账服务条款》。<br>在进行转账时，北京银行提示：为确保您本人办理，我行将采集您的人像信息安全验证，并将切实保护您的信息安全，您是否同意？<br>如果你不同意你就得使用U盾，然后你U盾大概率是不知道早扔哪了，你还是必须使用人脸验证，否则你就没有进行转账的权利。  </p><p>与快递一样，人脸识别技术也在慢慢不断刷新人民的忍耐力，直到完全推行起来。<br>因不愿意“刷脸进门”，购买了动物园年卡的浙江理工大学副教授郭兵将杭州野生动物世界告上了法庭。<br>被称为国内“人脸识别第一案”刚刚过去半年，然并卵，栾冰然。</p></blockquote><h4 id="中国互联网往事"><a href="#中国互联网往事" class="headerlink" title="中国互联网往事"></a><a href="https://mp.weixin.qq.com/s/EhrdF4BvPzlqx3C_vvH5zA" target="_blank" rel="noopener">中国互联网往事</a></h4><blockquote><p>👆一篇长长的漫画，简要回顾中国互联网往事。</p></blockquote><h4 id="如何改进-NGINX-配置文件节省带宽？"><a href="#如何改进-NGINX-配置文件节省带宽？" class="headerlink" title="如何改进 NGINX 配置文件节省带宽？"></a><a href="https://www.nginx.com/blog/help-the-world-by-healing-your-nginx-configuration/" target="_blank" rel="noopener">如何改进 NGINX 配置文件节省带宽？</a></h4><blockquote><p>👆从阮老师博客看到的推荐：<a href="https://www.nginx.com/blog/help-the-world-by-healing-your-nginx-configuration/" target="_blank" rel="noopener">NGINX 官方的博客文章</a>，教大家五个小技巧，通过改进配置来节省带宽、提高性能。<br>对开发者来说对nginx的掌握非常必要，下周将这篇文章的翻译提上日程。</p></blockquote><h4 id="Gossip"><a href="#Gossip" class="headerlink" title="Gossip"></a><a href="https://pearmini.gitee.io/gossip/" target="_blank" rel="noopener">Gossip</a></h4><blockquote><p>一个制作幻灯片的在线工具，只需要少量拖拽和对齐操作，就可以生成通过浏览器播放的幻灯片。<br><cite>来自–阮一峰的网络日志</cite></p></blockquote><h4 id="VSCode插件"><a href="#VSCode插件" class="headerlink" title="VSCode插件"></a>VSCode插件</h4><blockquote><p>Polacode:用来生成代码截图。<br>better-comments:注释高亮。</p></blockquote><h4 id="Mac下安装redis"><a href="#Mac下安装redis" class="headerlink" title="Mac下安装redis"></a><a href="https://zhuanlan.zhihu.com/p/35945728" target="_blank" rel="noopener">Mac下安装redis</a></h4><blockquote><p>👆Mac下安装redis简易教程。  </p><ul><li>下载并安装 reids  </li><li>编译测试: sudo make test  </li><li>编译安装: sudo make install   </li><li>启动redis: redis-server </li><li>查看redis进程：ps -ef | grep redis  </li><li>在redis目录下建立bin，etc，db三个目录、配置(略) </li></ul></blockquote><h4 id="终极Shell"><a href="#终极Shell" class="headerlink" title="终极Shell"></a><a href="https://xie.infoq.cn/article/da5db7e0e60a4fb1529a5ba51" target="_blank" rel="noopener">终极Shell</a></h4><blockquote><p>👆池坚强，池老师的一篇总结【oh my zsh】项目的配置文章。<br>【oh my zsh】是国外一个程序员开发的让你快速上手zsh的项目。<br>我由于zsh或者bash的很大命令还不是很融会贯通，加上对shell的学习没有那么强烈，所以暂没有进行安装使用，这里做一个记录与了解。</p></blockquote><h4 id="panolens-js"><a href="#panolens-js" class="headerlink" title="panolens.js"></a><a href="https://pchen66.github.io/Panolens/" target="_blank" rel="noopener">panolens.js</a></h4><blockquote><p>一个360度全景照片浏览的 JS 库。官网有一些示例，非常酷。<br>我们生活，身边应用的有印象的就是买房、看房软件的360度环绕效果。 </p></blockquote><!-- 鸡汤一句 --><h4 id="End"><a href="#End" class="headerlink" title="End"></a>End</h4><blockquote><p>悲观者往往正确,乐观者往往成功.</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 每周分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 每周分享 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Help the World by Healing Your NGINX Configuration</title>
      <link href="/2020/05/01/Help%20the%20World%20by%20Healing%20Your%20NGINX%20Configuration/"/>
      <url>/2020/05/01/Help%20the%20World%20by%20Healing%20Your%20NGINX%20Configuration/</url>
      
        <content type="html"><![CDATA[<h5 id="Title：通过完善配置你的NGIINX来帮助世界"><a href="#Title：通过完善配置你的NGIINX来帮助世界" class="headerlink" title="Title：通过完善配置你的NGIINX来帮助世界"></a>Title：通过完善配置你的NGIINX来帮助世界</h5><blockquote><p>在2014年德克萨斯大学的著名演讲中，Admiral William H. McRaven(威廉-H-麦克拉文上将)曾说过，如果你想改变世界，就从铺床开始。有时候，小事也会产生大的影响—-无论是早上整理好你的床铺，还是对网站的HTTP服务器配置做一些小小的改动，都会产生很大的影响。 </p><p>这样说是不是有点夸大其词呢？2020年的头几个月已经把我们这个世界上所有正常和合理的活动都搞掉了。由于COVID-19大流行病，地球上几乎一半的人口都被关在家里。互联网已经成为我们唯一的交流、娱乐、买菜、工作、教育等的方式和途径。 因此每周互联网的网络流量和服务器负载都比以往任何时候都要高。 根据BroadbandNow在3月25日发布的一份报告，”在我们分析的200个城市中，与之前的10周相比，有44%的城市在过去一周内出现了一定程度的网络退化。”。</p></blockquote><blockquote><p>Netflix和YouTube等主要媒体平台为了保护网络链路，都在限制其传输质量，让人们有更多的带宽用于工作、与家人沟通，或者在学校上虚拟课。但这仍然是不够的，随着网络质量逐渐恶化，很多服务器都出现了超负荷的情况。</p></blockquote><h5 id="您可以通过优化您的网站提供帮助"><a href="#您可以通过优化您的网站提供帮助" class="headerlink" title="您可以通过优化您的网站提供帮助"></a>您可以通过优化您的网站提供帮助</h5><blockquote><p>如果你拥有一个网站，并且能够管理其HTTP服务器的配置，你可以提供帮助。几个小的改动就可以减少用户产生的网络带宽和服务器的负载。这是一个双赢的局面：如果你的网站目前处于高负载下，你可以降低负载，使你能够为更多的用户提供服务，并可能降低你的成本。如果它不是在高负载下，更快的加载速度会改善你的用户体验（有时会对你在Google搜索结果中的位置产生积极影响）。<br>如果你有一个每月有数百万用户的应用程序，或者是一个有烘焙食谱的小博客，这其实并不重要–你消除的每一KB的网络流量都能为那些急需在线检查医学检验结果或创建包裹标签来给亲戚寄送重要的东西的人释放出流量。<br>在这篇博客中，我们介绍了一些简单但功能强大的NGINX配置。作为一个现实世界的例子，我们使用的是我们的朋友Rogalove的电子商务网站，Rogalove是一个生态化妆品制造商，我住在波兰，在这里。该网站是一个相当标准的WooCommerce安装，运行NGINX 1.15.9作为其网络服务器。为了我们的计算，我们假设这个网站每天有100个独特的用户，30%的用户是经常性访客，每个用户平均在一个会话中访问4个页面。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 文档翻译 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>每周总结第三十九期</title>
      <link href="/2020/04/19/issue-39/"/>
      <url>/2020/04/19/issue-39/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本周是2020年的第十六个周末。<br>这里记录过去一周，我的一些总结。</p></blockquote><!-- 制作一张最能反映过去一周的周图片 --><p><img src="http://img.liugezhou.online/blog/weekly39.png" alt="weekly-39"></p><a id="more"></a><!-- 一周最大感受 --><h4 id="Feeling"><a href="#Feeling" class="headerlink" title="Feeling"></a>Feeling</h4><blockquote><p>突然感觉自己就老了，对什么事情也提不起兴趣，对什么事情也毫无激情。<br>间歇性怀疑人生。</p></blockquote><h4 id="商品历史价格"><a href="#商品历史价格" class="headerlink" title="商品历史价格"></a><a href="http://www.lsjgcx.comlsjgcx.com" target="_blank" rel="noopener">商品历史价格</a></h4><blockquote><p>👆 淘宝，京东等商品历史价格查询，能更清晰了解商家的活动是否为虚假促销以及促销的力度。</p></blockquote><h4 id="斯诺登自传"><a href="#斯诺登自传" class="headerlink" title="斯诺登自传"></a><a href="https://a.temporaryrecord.com/" target="_blank" rel="noopener">斯诺登自传</a></h4><blockquote><p> 👆斯诺登自传《永久记录》—美国政府监控全世界网络信息的真相。<br>未删节的简体中文版 PDF 下载，作者本人授权。</p></blockquote><h4 id="Git-is-now-free-for-team"><a href="#Git-is-now-free-for-team" class="headerlink" title="Git is now free for team"></a>Git is now free for team</h4><blockquote><p>GitHub CEO Nat Friedman 在官方博客中正式宣布：即日起，所有用户都可以免费使用该平台的核心功能。无论是个人免费账户、还是商业项目团队，都可访问 GitHub 的无限私有存储库、以及每月 2000 分钟的 GitHub Actions 访问，后者是该公司的自动化和 CI / CD 平台。<br>本次重大的更新大概如下几点：</p><ul><li>对个人免费的私有仓库，现在对所有账号类型开放，取消协作者数量上限（之前个人私仓限制 3 个协作者）； </li><li>GitHub Pro 现在将包括 2GB 的 Packages 存储和 10GB 的数据传输；  </li><li>在官宣时间之前注册并已为团队服务付费的用户，订单到期之日按比例退款；  </li><li>自 5 月 14 日起，GitHub 团队每月将为私有仓库提供 3000 分钟的操作时间；  </li></ul></blockquote><h4 id="page-note-网页里的笔记"><a href="#page-note-网页里的笔记" class="headerlink" title="page note:网页里的笔记"></a>page note:网页里的笔记</h4><blockquote><p>一款Chrome浏览器插件，类似于之前记录的LINER。可以在网页中做笔记。</p></blockquote><h4 id="代码git仓库提交统计"><a href="#代码git仓库提交统计" class="headerlink" title="代码git仓库提交统计"></a>代码git仓库提交统计</h4><blockquote><p>git shortlog -sn 命令可以列出代码仓库的提交者统计。</p></blockquote><h4 id="Bash脚本教程"><a href="#Bash脚本教程" class="headerlink" title="Bash脚本教程"></a><a href="https://wangdoc.com/bash/" target="_blank" rel="noopener">Bash脚本教程</a></h4><blockquote><p>👆 历时三个月，本周阮一峰老师总结的《Bash脚本教程》发布。</p></blockquote><!-- 鸡汤一句 --><h4 id="End"><a href="#End" class="headerlink" title="End"></a>End</h4><blockquote><p>时光匆匆，好似在高中课堂那会我问自己 我应该干些什么一样。此时的生活也断不了会这么想。<br>后来，我明白我并不是想干些什么，我是想在年轻的时候多留下些什么，老了可以念想一下。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 每周分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 每周分享 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>每周总结第三十八期</title>
      <link href="/2020/04/11/issue-38/"/>
      <url>/2020/04/11/issue-38/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本周是2020年的第十五个周末。<br>这里记录过去一周，我的一些总结。</p></blockquote><!-- 制作一张最能反映过去一周的周图片 --><p><img src="http://img.liugezhou.online/blog/weekly38.png" alt="weekly-38"></p><a id="more"></a><!-- 一周最大感受 --><h4 id="Feeling"><a href="#Feeling" class="headerlink" title="Feeling"></a>Feeling</h4><blockquote><p>世界很大，圈子很小。  </p></blockquote><h4 id="大炮"><a href="#大炮" class="headerlink" title="大炮"></a>大炮</h4><blockquote><p>接受纪律审查和监察调查。视频弹幕关闭，官媒停止评论，搜索不到。</p></blockquote><h4 id="个人所得税"><a href="#个人所得税" class="headerlink" title="个人所得税"></a>个人所得税</h4><blockquote><p>个人所得税北京补退税开通。<br>【专项附加扣除填报一定要填，特被注意租房一定要填】  </p></blockquote><h4 id="青客长租公寓"><a href="#青客长租公寓" class="headerlink" title="青客长租公寓"></a>青客长租公寓</h4><blockquote><p>国内第一家上市长租公寓(19年11月5日登陆纳斯达克挂牌上市)，疫情期间，青客强行解约，拖欠房东租金，导致租客被赶的一系列操作导致再次被推上风口浪尖。</p></blockquote><h4 id="专为程序员编写的英语学习指南-v1-2"><a href="#专为程序员编写的英语学习指南-v1-2" class="headerlink" title="专为程序员编写的英语学习指南 v1.2"></a><a href="https://github.com/yujiangshui/A-Programmers-Guide-to-English" target="_blank" rel="noopener">专为程序员编写的英语学习指南 v1.2</a></h4><blockquote><p>Github上一个八千多start的项目–专为程序员编写的英语学习指南 v1.2。<br>在线版本为：<a href="https://a-programmers-guide-to-english.harryyu.me/" target="_blank" rel="noopener">https://a-programmers-guide-to-english.harryyu.me</a></p></blockquote><h4 id="DeepL"><a href="#DeepL" class="headerlink" title="DeepL"></a><a href="https://www.deepl.com/translator" target="_blank" rel="noopener">DeepL</a></h4><blockquote><p>一家创业公司推出的机器翻译引擎，据称比谷歌翻译得更好。</p></blockquote><h4 id="RCS"><a href="#RCS" class="headerlink" title="RCS"></a>RCS</h4><blockquote><p>RCS 增强短信（富媒体信息收发）。<br>简言之类似与安卓版的 iMessage ，只不过主导厂商不再是苹果或者腾讯，而是运营商。  </p></blockquote><h4 id="COBOL"><a href="#COBOL" class="headerlink" title="COBOL"></a>COBOL</h4><blockquote><p>在抢口罩和呼吸机的同时，美国新泽西州州长在电视台上，公开招聘大龄程序员，要求是：50年程序员经验，掌握COBOL编程语言，时薪 55 美元至 85 美元！<br>原因为：疫情背景下，美国失业数据飙升，由于国家各项福利保障比较完善，失业人纷纷领取失业保险金，但失业保险系统用COBOL语言开发，由于系统故障，积累了太多的失业金无法发放，于是州长开始在电视台上公开招聘。<br>COBOL 全称为（Common Business Oriented Language），是数据处理领域最为广泛的程序设计语言。它是世界上第一个商用语言，第一个广泛使用的高级编程语言。<br>COBOL 应用的领域特别重要：金融，政府，航空公司。所有的银行，保险公司，金融机构都在大量使用 COBOL 写的程序。</p></blockquote><h4 id="每天前端一道前端面试题"><a href="#每天前端一道前端面试题" class="headerlink" title="每天前端一道前端面试题"></a>每天前端一道前端面试题</h4><blockquote><p>本周在哔哩哔哩上注册了一个<a href="https://space.bilibili.com/527313141?from=search&seid=1467228759580826016" target="_blank" rel="noopener">账号</a>，尝试着录了几个视频《每天一道前端面试题》。<br>一气呵成，效果不是很好，但，是一次很有意思的尝试。  </p></blockquote><h4 id="DOM变动发出声音"><a href="#DOM变动发出声音" class="headerlink" title="DOM变动发出声音"></a><a href="https://gist.github.com/tomhicks/6cb5e827723c4eaef638bf9f7686d2d8" target="_blank" rel="noopener">DOM变动发出声音</a></h4><blockquote><p>👆 一段 JS 代码，只要插在网页里面，可以让 DOM 变动发出声音。如果 DOM 有改变，你就会听到声音。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">const audioCtx = new (window.AudioContext || window.webkitAudioContext)()</span><br><span class="line">const observer = new MutationObserver(function(mutationsList) &#123;</span><br><span class="line">  const oscillator = audioCtx.createOscillator()</span><br><span class="line"></span><br><span class="line">  oscillator.connect(audioCtx.destination)</span><br><span class="line">  oscillator.type = &quot;sine&quot;</span><br><span class="line">  oscillator.frequency.setValueAtTime(</span><br><span class="line">    Math.log(mutationsList.length + 5) * 880,</span><br><span class="line">    audioCtx.currentTime,</span><br><span class="line">  )</span><br><span class="line"></span><br><span class="line">  oscillator.start()</span><br><span class="line">  oscillator.stop(audioCtx.currentTime + 0.01)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">observer.observe(document, &#123;</span><br><span class="line">  attributes: true,</span><br><span class="line">  childList: true,</span><br><span class="line">  subtree: true,</span><br><span class="line">  characterData: true,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><!-- 鸡汤一句 --><h4 id="End"><a href="#End" class="headerlink" title="End"></a>End</h4><blockquote><p>即使没有报酬，你也会去干的工作是什么？  </p></blockquote><blockquote><p>每个人心中都有一个火种，不要听任它熄灭，要找到它，点燃它。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 每周分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 每周分享 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>每周总结第三十七期</title>
      <link href="/2020/04/04/issue-37/"/>
      <url>/2020/04/04/issue-37/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本周是2020年的第十四个周末。<br>这里记录过去一周，我的生活、工作与娱乐的一些小总结。</p></blockquote><!-- 制作一张最能反映过去一周的周图片 --><p><img src="http://img.liugezhou.online/blog/weekly37.jpg" alt="weekly-37"></p><a id="more"></a><!-- 一周最大感受 --><h4 id="Feeling"><a href="#Feeling" class="headerlink" title="Feeling"></a>Feeling</h4><blockquote><p>浅水是喧哗的，深水是沉默的。（Shallow water is roaring, deep water is silent.）<br><cite>– 雪莱</cite></p></blockquote><h4 id="何以为家"><a href="#何以为家" class="headerlink" title="何以为家"></a>何以为家</h4><blockquote><p>《何以为家》由娜丁·拉巴基执导的2018年黎巴嫩剧情长片，由加拿大CTV电视网制作，于第71届戛纳电影节主竞赛单元首映。获得评审团奖和基督教评审团奖。也获得了金球奖最佳外语片和奥斯卡最佳外语片提名。<br>为了让观众意识到这个残酷的现实和所讲故事的真实性，导演纳迪拉巴基选择一批真实生活于迦百农类似的人出演影片，演员必须经历过这样的生活。<br>影片中的赞恩饰演者并不是职业演员，而是真实的叙利亚难民。被导演发掘时，当时12岁左右的他连自己的名字都不会写.</p></blockquote><h4 id="瑞幸咖啡"><a href="#瑞幸咖啡" class="headerlink" title="瑞幸咖啡"></a>瑞幸咖啡</h4><blockquote><p>本周大事件为瑞幸咖啡财务造假，伪造交易22亿，周三晚(北京时间)盘前暴跌80%。<br>由此引发的连锁反应还在持续，股价大跌，遭遇集体诉讼，用户出现挤兑式消费。</p></blockquote><h4 id="Colorables"><a href="#Colorables" class="headerlink" title="Colorables"></a><a href="https://www.colorabl.es/all" target="_blank" rel="noopener">Colorables</a></h4><blockquote><p>这个网站可以下载各种填色图片，打印以后让小朋友用蜡笔填色。</p></blockquote><h4 id="创客贴"><a href="#创客贴" class="headerlink" title="创客贴"></a><a href="https://www.chuangkit.com" target="_blank" rel="noopener">创客贴</a></h4><blockquote><p>👆创客贴是一款多平台（Web、Mobile、Mac 、Windows）极简图形编辑和平面设计工具，包括创客贴网页版、 iPhone、iPad、 桌面版  等。从功能使用上分，创客贴有个人版和团队协作版，提供图片素材和设计模板，通过简单的拖拉拽操作就可以设计出海报、PPT、名片、邀请函等各类设计图. </p></blockquote><h4 id="音频剪辑转码网站"><a href="#音频剪辑转码网站" class="headerlink" title="音频剪辑转码网站"></a><a href="http://www.ruanyifeng.com/blog/2020/04/weekly-issue-101.html" target="_blank" rel="noopener">音频剪辑转码网站</a></h4><blockquote><p>👆在线音频实时剪辑转码网站,这个网站兼顾了准专业性和傻瓜式的操作。<br>包含单轨编辑、音频转码、音频去燥、提取伴奏等功能。  </p></blockquote><h4 id="Liner"><a href="#Liner" class="headerlink" title="Liner"></a>Liner</h4><blockquote><p>Liner是一款谷歌浏览器插件，让你能对网页方便的”划重点”.</p></blockquote><h4 id="RSA的原理与实现"><a href="#RSA的原理与实现" class="headerlink" title="RSA的原理与实现"></a><a href="https://cjting.me/2020/03/13/rsa/" target="_blank" rel="noopener">RSA的原理与实现</a></h4><blockquote><p>👆这篇文章运用数学原理解释了RSA这种非对称加密方式的原理与实现，分析了私钥的生成、加密与解秘过程以及解秘证明等。<br>我们工作中Github或者远程服务器，以及微信、支付宝的支付等等都会用到这种RAS加密方式。<br>文章对于小白来说较为晦涩，需要花点时间去理解。这里做个文章收藏。 </p></blockquote><h4 id="从forEach到迭代器"><a href="#从forEach到迭代器" class="headerlink" title="从forEach到迭代器"></a><a href="https://juejin.im/post/5bcb249a6fb9a05d212ed038" target="_blank" rel="noopener">从forEach到迭代器</a></h4><blockquote><p>👆本文从使用 forEach 对数组进行遍历开始说起，粗略对比使用 forEach , for…in , for…of 进行遍历的差异，并由此引入 ES6 中 *可迭代对象/迭代器 *的概念，并对其进行粗略介绍。</p></blockquote><h4 id="本周小结"><a href="#本周小结" class="headerlink" title="本周小结"></a>本周小结</h4><blockquote><p>本周在学习上周总结中的一篇文章《前端100问》，对于JS中的一些基础知识，依然甚是欠缺。<br>文章大概看到十分之一，粗略总结了 Vue中的key、map(parseInt)、防抖截流、SET与MAP、拷贝、继承、对象等相关基础知识。<br>阮老师的开源书籍《ES6标准入门》，真的是ES6基础的精华，我一定要好好学完这本书。</p></blockquote><!-- 鸡汤一句 --><h4 id="End"><a href="#End" class="headerlink" title="End"></a>End</h4><blockquote><ul><li>工作是一场马拉松，而不是短跑。  </li><li>尊重人，而不是头衔。  </li><li>工作从白板开始，而不是键盘。  </li><li>产出的是价值，而不是代码。  </li><li>热爱生活，而不是工作。  </li><li>学会享受过程。</li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> 每周分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 每周分享 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>每周总结第三十六期</title>
      <link href="/2020/03/28/issue-36/"/>
      <url>/2020/03/28/issue-36/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本周是2020年的第十三个周末。<br>这里记录过去一周，我的一些总结。</p></blockquote><!-- 制作一张最能反映过去一周的周图片 --><p><img src="http://img.liugezhou.online/blog/weekly36.jpg" alt="weekly-36"></p><a id="more"></a><!-- 一周最大感受 --><h4 id="Feeling"><a href="#Feeling" class="headerlink" title="Feeling"></a>Feeling</h4><blockquote><p>Talk is cheap,show the code.</p></blockquote><h4 id="东京奥运会"><a href="#东京奥运会" class="headerlink" title="东京奥运会"></a>东京奥运会</h4><blockquote><p>国际奥委会和东京奥组委发布联合声明：同意东京奥运会推迟至2021年夏天举办，2020东京奥运会及残奥会的称呼将保留。</p></blockquote><h4 id="透明国际"><a href="#透明国际" class="headerlink" title="透明国际"></a>透明国际</h4><blockquote><p>透明国际(Transparency International)即“国际透明组织”，简称TI，是一个非政府、非盈利、国际性的民间组织。“透明国际”于1993年由德国人彼得·艾根创办，总部设在德国柏林，以<code>推动全球反腐败运动</code>为己任，今天已成为对腐败问题研究得最权威、最全面和最准确的国际性非政府组织，目前已在90多个国家成立了分会。它的研究结果经常被其他权威国际机构反复引用。</p></blockquote><h4 id="北大团队“精准删除特定记忆”登上Science子刊"><a href="#北大团队“精准删除特定记忆”登上Science子刊" class="headerlink" title="北大团队“精准删除特定记忆”登上Science子刊"></a>北大团队“精准删除特定记忆”登上Science子刊</h4><blockquote><p>近日，北京大学神经科学研究所的伊鸣研究员和万有教授团队在 Science 子刊 Science Advances发表了一篇论文，实现了在实验大鼠的脑中实现了特定记忆的精准删除。<br>论文作者之一、北京大学神经科学研究所研究员伊鸣表示，此项研究有望为慢性痛、成瘾等以“病理性记忆”为特征的疾病治疗提供新思路。<br><a href="https://advances.sciencemag.org/content/6/12/eaay6687.full" target="_blank" rel="noopener">论文地址</a></p></blockquote><h4 id="冠状病毒之后的世界"><a href="#冠状病毒之后的世界" class="headerlink" title="冠状病毒之后的世界"></a><a href="https://mp.weixin.qq.com/s/Mhj0jf4N5p4kb_fqdjP43w" target="_blank" rel="noopener">冠状病毒之后的世界</a></h4><blockquote><p>👆《人类简史》的作者尤瓦尔·赫拉利，上周末在《金融时报》发表了一篇长文《冠状病毒之后的世界》。<br>他谈到疫情结束后，世界向何处去的问题，以及对目前各国没有统一行动的计划，反而各自为战、竞相关闭边境的担忧。</p></blockquote><h4 id="GitHub-中文项目排行榜"><a href="#GitHub-中文项目排行榜" class="headerlink" title="GitHub 中文项目排行榜"></a><a href="https://github.com/kon9chunkit/GitHub-Chinese-Top-Charts" target="_blank" rel="noopener">GitHub 中文项目排行榜</a></h4><blockquote><p>👆🇨🇳 GitHub中文排行榜，帮助你发现高分优秀中文项目。<br>设立1个总榜（所有语言项目汇总排名）、18个分榜（单个语言项目排名）;</p></blockquote><h4 id="pont"><a href="#pont" class="headerlink" title="pont"></a><a href="https://github.com/alibaba/pont" target="_blank" rel="noopener">pont</a></h4><blockquote><p>👆VSCode插件。Pont 把 swagger、rap、dip 等多种接口文档平台，转换成 Pont 元数据。<br>Pont 利用接口元数据，可以高度定制化生成前端接口层代码，接口 mock 平台和接口测试平台。<br>其中 swagger 数据源，Pont 已经完美支持。</p></blockquote><h4 id="前端-100-问"><a href="#前端-100-问" class="headerlink" title="前端 100 问"></a><a href="https://juejin.im/post/5d23e750f265da1b855c7bbe" target="_blank" rel="noopener">前端 100 问</a></h4><blockquote><p>👆突然不知道前端学习什么？<br>可以看看一些大佬们整理的前端问题。</p></blockquote><h4 id="快速AI自动抠图！"><a href="#快速AI自动抠图！" class="headerlink" title="快速AI自动抠图！"></a><a href="https://www.remove.bg/zh" target="_blank" rel="noopener">快速AI自动抠图！</a></h4><blockquote><p>在线图片背景消除网站。</p></blockquote><h4 id="颜值即正义-哪些管UI小姐姐要来的网站"><a href="#颜值即正义-哪些管UI小姐姐要来的网站" class="headerlink" title="颜值即正义,哪些管UI小姐姐要来的网站"></a><a href="https://juejin.im/post/5e7cdee26fb9a03c6e640cc7" target="_blank" rel="noopener">颜值即正义,哪些管UI小姐姐要来的网站</a></h4><blockquote><p>👆一些UI网站收集。</p></blockquote><!-- 鸡汤一句 --><h4 id="End"><a href="#End" class="headerlink" title="End"></a>End</h4><blockquote><p>本周总结有些水，没有积累、关注什么，总体来说很丧。<br>花了一天时间读了linux之父linus的自传《Just for Fun》,对为开源世界作出推动力量的linus有了一个大概认识。<br>很cool.</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 每周分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 每周分享 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>每周总结第三十五期</title>
      <link href="/2020/03/21/issue-35/"/>
      <url>/2020/03/21/issue-35/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本周是2020年的第十二个周末。<br>这里记录过去一周，我的一些总结。</p></blockquote><!-- 制作一张最能反映过去一周的周图片 --><p><img src="http://img.liugezhou.online/blog/weekly35.jpg" alt="weekly-35"></p><a id="more"></a><!-- 一周最大感受 --><h4 id="Feeling"><a href="#Feeling" class="headerlink" title="Feeling"></a>Feeling</h4><blockquote><p>Just for Fun (只是为了好玩) 。<br>本书是Linux之父Linus Torvalds的自传。<br>Linux之父Linus Torvalds的自传，也是Linus唯一一本书。Linus以调侃的语气讲述了自己的成长经历，在他看来，一切都是为了好玩儿，兴趣引发革命。书中内容共分为五章，一部分是Linus自己写的，一部分是合著者David Diamond的评论。<br>林纳斯•托瓦兹 当今世界最著名的程序员、黑客，开源操作系统Linux之父。生于芬兰，毕业于赫尔辛基大学，1997年～2003年任职于美国加州硅谷的全美达公司，现受聘于开放源代码开发实验室，全力开发Linux内核。2004年，他被《时代周刊》评为世界最有影响力的人之一。<br>大卫•戴蒙 职业撰稿人，曾为《纽约时报》《连线》《美国周末》及许多刊物供稿。 </p></blockquote><h4 id="黄金价格"><a href="#黄金价格" class="headerlink" title="黄金价格"></a>黄金价格</h4><blockquote><p>黄金价格不断上涨，2020年3月16日金银比价创下123.78的记录，即等重量的黄金价格是白银的123.78倍。这是人类5000年来的最高记录。</p></blockquote><h4 id="滴滴跑腿"><a href="#滴滴跑腿" class="headerlink" title="滴滴跑腿"></a>滴滴跑腿</h4><blockquote><p>滴滴跑腿推出一项用户福利活动，从3月21日起，用户每天首笔订单费用0.1元，此优惠将连续11天。此前，滴滴已在21个城市上线跑腿服务。(from 36ke)</p></blockquote><h4 id="git-install"><a href="#git-install" class="headerlink" title="git install"></a>git install</h4><blockquote><p>本周开源社区劲爆的一条新闻是：Github宣布收购npm。<br>至此，TypeScript, VS Code, GitHub, npm 都是微软的。<br>有开发者评论道：<br>「 微软通过收购 GitHub 接管了整个开源生态系统，<br>通过收购 npm 接管了整个 JavaScript 生态系统<br>通过 Visual Studio Code 占领了大部分开发者的机器<br>通过 TypeScript 改变了开发者使用 JavaScript 的方式。<br>因此可以认为，JavaScript 现在基本上是属于微软的。」</p></blockquote><h4 id="PacVim"><a href="#PacVim" class="headerlink" title="PacVim"></a><a href="https://github.com/jmoon018/PacVim" target="_blank" rel="noopener">PacVim</a></h4><blockquote><p>👆Github上一个让你通过玩游戏学习 Vim 命令的游戏PacVim，类似于PacMan(吃豆人)。<br>该游戏在终端即可打开使用，玩法详见上面链接项目仓库介绍或者：<a href="https://mp.weixin.qq.com/s/aauMKWZhzsYeayj1S0FffQ" target="_blank" rel="noopener">Vim一直学不会？试试这个 “真香” 神器</a> </p></blockquote><h4 id="Github移动端上线"><a href="#Github移动端上线" class="headerlink" title="Github移动端上线"></a>Github移动端上线</h4><blockquote><p>GitHub移动端：iOS与安卓版终于上线了，在iOS应用市场搜索不到，需要在网页:<a href="https://github.com/mobile/中点击下载，在AppStore中打开下载。" target="_blank" rel="noopener">https://github.com/mobile/中点击下载，在AppStore中打开下载。</a><br>由于国内网络原因，体验并不是很友好。</p></blockquote><h4 id="微信服务平台上架13种接口能力"><a href="#微信服务平台上架13种接口能力" class="headerlink" title="微信服务平台上架13种接口能力"></a><a href="https://mp.weixin.qq.com/s/k07xNw6kn22Bdhgt_KqSBQ" target="_blank" rel="noopener">微信服务平台上架13种接口能力</a></h4><blockquote><p>👆 为了提升开发者的开发运营效率，节省开发资源，3月17日，微信服务平台上架了13种接口能力，包括微信OCR识别、地址解析、珊瑚图片内容安全等，可支持开发者快速进行调用，帮助各行业打造完善的服务链。</p></blockquote><h4 id="CentOS7安装MySQL数据库"><a href="#CentOS7安装MySQL数据库" class="headerlink" title="CentOS7安装MySQL数据库"></a><a href="https://help.aliyun.com/document_detail/116727.html?spm=5176.11065259.1996646101.searchclickresult.c3be2f1auy5Wbc" target="_blank" rel="noopener">CentOS7安装MySQL数据库</a></h4><blockquote><p>👆CentOS7上安装mysql数据库的文章特别特别的多，这篇阿里云文档给出的安装教程简单、清晰，可以快速在CentOS7上安装mysql数据库、配置远程访问等。</p></blockquote><h4 id="CentOS升级git版本"><a href="#CentOS升级git版本" class="headerlink" title="CentOS升级git版本"></a><a href="https://www.cnblogs.com/Hi-blog/p/How-To-Update-Git-On-CentOS7.html" target="_blank" rel="noopener">CentOS升级git版本</a></h4><blockquote><p>👆一篇总结简单、易懂的文章，介绍快速在CentOS上升级git版本。</p></blockquote><h4 id="VsCode插件，自动生成注释koroFileHeader"><a href="#VsCode插件，自动生成注释koroFileHeader" class="headerlink" title="VsCode插件，自动生成注释koroFileHeader"></a><a href="https://blog.csdn.net/SevenGirl2017/article/details/88424641" target="_blank" rel="noopener">VsCode插件，自动生成注释koroFileHeader</a></h4><blockquote><p>整洁的代码一定是代码注释简洁明了，koroFileHeader插件可快速定制自己的文件头以及光标处的代码注释生成。</p></blockquote><!-- 鸡汤一句 --><h4 id="End"><a href="#End" class="headerlink" title="End"></a>End</h4><blockquote><p>西瓜视频、抖音、今日头条、《大赢家》出品方共同宣布，于3月20日晚八点免费上线喜剧电影《大赢家》。该片由于淼执导，大鹏、柳岩主演，讲述了一次抢劫演习中所发生的幽默故事。<br>so,看电影去喽。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 每周分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 每周分享 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>每周总结第三十四期</title>
      <link href="/2020/03/15/issue-34/"/>
      <url>/2020/03/15/issue-34/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本周是2020年的第十一个周末。<br>这里记录过去一周，我的一些总结。</p></blockquote><p><img src="http://img.liugezhou.online/blog/weekly34.jpeg" alt="weekly-34"></p><a id="more"></a><h4 id="Feeling"><a href="#Feeling" class="headerlink" title="Feeling"></a>Feeling</h4><blockquote><p>每个夜晚来临的时候，每个清晨苏醒的时候，脑中思维不停盘旋：我是谁？我来自哪里？我将要去向何处？我正在干嘛？</p></blockquote><h4 id="全球股市暴跌"><a href="#全球股市暴跌" class="headerlink" title="全球股市暴跌"></a>全球股市暴跌</h4><blockquote><p>过去一周，全球股市暴跌，石油战诱发美股跌停熔断，另有疫情夹击，12个国家股市于3月12日发生“熔断“。<br>这一天将会被股市历史牢牢铭记。<br>据说中国历史上也推行过熔断制度，但自从熔断制度推出后，接连两天触发熔断，于是撤回。<br>朋友圈看到一个段子,很鲜活：<br><code>金融行业每天的工作，早上八点起床先看国外肺炎人数，看美股收盘点数。八点半，看亚太崩盘，九点半看大A震荡，下午四点看欧洲崩盘，晚上九点半看美股开盘崩盘</code><br>惨不忍睹。<br><a href="https://mp.weixin.qq.com/s/TJvfe99YFhctkCakS0Hrjg" target="_blank" rel="noopener">这篇文章</a>简单、通俗的解释了有关熔断定义规则、熔断历史等内容(该文章发于2020年3月10日)。  </p></blockquote><h4 id="《人物》"><a href="#《人物》" class="headerlink" title="《人物》"></a>《人物》</h4><blockquote><p>2020年3月10日，《人物》杂志发表了一篇名为《发哨子的人》的特稿，文章发布数小时后，随后在国内所有的媒体平台全面删除，采访内容让人们更为真实地了解到这场现代社会最为严重的疫情是缘何扩散，以及处于漩涡中心的武汉人民经受怎样的苦难。 </p><p><a href="https://mp.weixin.qq.com/s/unmdEd7tN--frL88xAYScg" target="_blank" rel="noopener">《人物》被删文章：发哨子的人</a><br><a href="https://jsbin.com/soqaxuj/edit?html,output" target="_blank" rel="noopener">序员版本</a></p><p>有人总结道「也算创了传播史上的一个小记录：一而删，再而转；你越删，我越转，前赴后继锲而不舍飞蛾扑火宁死不屈大义凛然不可描述无法形容的壮烈与顽固」。</p></blockquote><h4 id="yuange1975"><a href="#yuange1975" class="headerlink" title="yuange1975"></a>yuange1975</h4><blockquote><p>微博用户@yuange1975持续质疑微博借钱利息高，被微博平台炸号。<br>此人是国内首屈一指的网络安全专家，腾讯沪湛实验室掌门人.</p></blockquote><h4 id="微信读书助手"><a href="#微信读书助手" class="headerlink" title="微信读书助手"></a><a href="https://chrome.google.com/webstore/search/%E5%BE%AE%E4%BF%A1%E8%AF%BB%E4%B9%A6%E5%8A%A9%E6%89%8B?utm_source=chrome-ntp-icon" target="_blank" rel="noopener">微信读书助手</a></h4><blockquote><p>👆 Chrome浏览器插件–一款自动组队、备份笔记、听书的微信读书插件。</p></blockquote><h4 id="从一到无穷大"><a href="#从一到无穷大" class="headerlink" title="从一到无穷大"></a>从一到无穷大</h4><blockquote><p>乔治·伽莫夫（1904-1968, George Gamow）世界著名物理学家和天文学家。<br>《从一到无穷大：科学中的事实和臆测》是当今世界最有影响的科普经典名著之一，1970年代末由科学出版社引进出版后，曾在国内引起很大反响，直接影响了众多的科普工作者。<br>豆瓣评分9.1。</p></blockquote><h4 id="https-yandex-com"><a href="#https-yandex-com" class="headerlink" title="https://yandex.com/"></a><a href="https://yandex.com/" target="_blank" rel="noopener">https://yandex.com/</a></h4><blockquote><p>俄罗斯搜索引擎 Yandex,图片搜索很赞。 </p></blockquote><h4 id="Chrome-80-开发者工具两个特性"><a href="#Chrome-80-开发者工具两个特性" class="headerlink" title="Chrome 80 开发者工具两个特性"></a>Chrome 80 开发者工具两个特性</h4><blockquote><ul><li>在控制台中已支持 let 和 class 重新声明。  </li><li>Network 面板：增加新的 Path 列和 Url 列查看每个网络资源的绝对路径或完整URL。开启方式：需要在NetWork面板的菜单栏右击选择显示。        </li><li>Network 面板:增加initiator列，可以将网络请求的启动器和依赖项作为嵌套列表查看，帮助你理解为什么要请求某个资源，或者某个资源(例如脚本)导致了什么网络活动。</li></ul></blockquote><h4 id="第一次使用VS-Code时你应该知道的一切配置"><a href="#第一次使用VS-Code时你应该知道的一切配置" class="headerlink" title="第一次使用VS Code时你应该知道的一切配置"></a><a href="https://juejin.im/post/5cb87c6e6fb9a068a03af93a" target="_blank" rel="noopener">第一次使用VS Code时你应该知道的一切配置</a></h4><blockquote><p>👆这是一篇总结的非常全面的VSCode使用技巧，包括常用快捷键、光标使用、Terminal启动、高级进阶使用、推荐的一些很高级的插件使用等等。根据这篇文章温习了一下使用技巧，且体验使用了几个插件：<br>Bracket Pair Colorizer 2 、Project Manager 、Color Manager 、Code Time、RemoteHub 、Live Share等。</p></blockquote><h4 id="lodash"><a href="#lodash" class="headerlink" title="lodash"></a>lodash</h4><blockquote><p>一个提供模块化、高性能和额外功能的现代JavaScript实用程序库.</p></blockquote><h4 id="JS基础–typeof、instanceof、Object-prototype-toString"><a href="#JS基础–typeof、instanceof、Object-prototype-toString" class="headerlink" title="JS基础–typeof、instanceof、Object.prototype.toString"></a>JS基础–typeof、instanceof、Object.prototype.toString</h4><blockquote><ul><li>typeof用在基本数据类型和函数时，返回其对应类型的描述，对于引用类型都返回为object.   </li><li>instanceof无法判断基本数据类型，对于引用类型数据，返回其其对应类型.    </li><li>Object.prototype.toString无论基本数据类型还是引用类型返回其对应类型.   </li></ul></blockquote><h4 id="vscode保存时自动按eslint格式化"><a href="#vscode保存时自动按eslint格式化" class="headerlink" title="vscode保存时自动按eslint格式化"></a><a href="https://www.haorooms.com/post/vscode_eslint" target="_blank" rel="noopener">vscode保存时自动按eslint格式化</a></h4><blockquote><p> 👆通过简单的配置，使得在VSCode中编写代码保存时，自动按eslint格式进行代码格式化。</p></blockquote><h4 id="End"><a href="#End" class="headerlink" title="End"></a>End</h4><blockquote><p>每个人的生活都是一条通向自身的道路。每个人的真正职责只有一个：找到自我。然后在心中坚守一生，全心全意，永不停息。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 每周分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 每周分享 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>每周总结第三十三期</title>
      <link href="/2020/03/07/issue-33/"/>
      <url>/2020/03/07/issue-33/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本周是2020年的第十个周末。<br>这里记录过去一周，我的一些总结。</p></blockquote><p><img src="http://img.liugezhou.online/weekly33.jpg" alt="weekly-33"></p><a id="more"></a><h4 id="Feeling"><a href="#Feeling" class="headerlink" title="Feeling"></a>Feeling</h4><blockquote><p>DONE IS BETTER THAN PERFECT.</p></blockquote><h4 id="飞书"><a href="#飞书" class="headerlink" title="飞书"></a>飞书</h4><blockquote><p>飞书被微信屏蔽了<br>报道飞书被微信屏蔽的媒体被微信屏蔽了<br>报道报道飞书被微信屏蔽的媒体被微信屏蔽的媒体被微信屏蔽了      </p><p align="right">DIYGOD</p></blockquote><h4 id="网络信息内容生态治理规定"><a href="#网络信息内容生态治理规定" class="headerlink" title="网络信息内容生态治理规定"></a><a href="http://www.cac.gov.cn/2019-12/20/c_1578375159509309.htm" target="_blank" rel="noopener">网络信息内容生态治理规定</a></h4><blockquote><p>👆 2020年3月1日开始，多条新规开始实行，其中网络条例带来的好消息表明：以后网络信息内容可能不会有坏消息了。</p></blockquote><h4 id="Github打开新标签页"><a href="#Github打开新标签页" class="headerlink" title="Github打开新标签页"></a>Github打开新标签页</h4><blockquote><p>Github上存在这一个明显的问题是，很多的第三方网页都是在当前标签页打开，对开发者来说很不友好，作为一个这么大的网站，或许是有其什么设计考虑吧。</p></blockquote><h4 id="nprogress"><a href="#nprogress" class="headerlink" title="nprogress"></a><a href="https://github.com/rstacruz/nprogress" target="_blank" rel="noopener">nprogress</a></h4><blockquote><p>👆一个超轻量进度条的开源库，使用极其简单。</p></blockquote><h4 id="node项目基础第三方包"><a href="#node项目基础第三方包" class="headerlink" title="node项目基础第三方包"></a>node项目基础第三方包</h4><blockquote><p>搭建一个node后端项目编写接口的时候，下面是在构建基础项目的时候依赖的第三方包：<br>express：基于Node.js平台的web应用开发框架<br>mysql：连接数据库<br>body-parser:body-parser是非常常用的一个express中间件，作用是对post请求的请求体进行解析<br>boom：封装了状态码接口错误的返回信息，使用用例(boom.NotFound(),boom.badRequest(),boom.gatewayTimeout()等)<br>jsonwentoken:后台生成给前端的token数据，通过sign方法生成,通过verify方法解析。<br>express-jwt: 除白名单之外的接口，进行token是否过期验证，如果未过期，使用verfify进行token解析。<br>express-validator:是一个功能强大的表单验证器，它是 validator.js 的中间件，使用 express-validator 可以简化 POST 请求的参数验证<br>crypto: 加密方式。<br>cors: 解决跨域问题。<br>等。</p></blockquote><h4 id="使用nvm安装管理nodejs"><a href="#使用nvm安装管理nodejs" class="headerlink" title="使用nvm安装管理nodejs"></a>使用nvm安装管理nodejs</h4><blockquote><p>本周在项目部署中遇到有关nodejs版本切换的问题,终于还是碰到了nvm。<br>安装过程遇到一个小坑，要先删除之前的node，下面总结一下安装nvm的过程：   </p><ul><li><ol><li>sudo rm -rf /usr/local/lib/node_modules # 删除全局 node_modules 目录      </li></ol></li><li><ol start="2"><li>sudo rm /usr/local/bin/node  # 删除 node     </li></ol></li><li><ol start="3"><li>cd /usr/local/bin &amp;&amp; ls -l | grep “../lib/node_modules/“ | awk ‘{print $9}’| xargs rm    # 删除全局 node 模块注册的软链  </li></ol></li><li><ol start="4"><li>curl安装：curl -o- <a href="https://raw.githubusercontent.com/nvm-sh/nvm/v0.35.2/install.sh" target="_blank" rel="noopener">https://raw.githubusercontent.com/nvm-sh/nvm/v0.35.2/install.sh</a> | bash(试了好几次)    </li></ol></li><li><ol start="5"><li>nvm –version 查看安装版本       </li></ol></li><li><ol start="6"><li>查看服务器端可用的 Node.js 版本:nvm ls-remote    </li></ol></li><li><ol start="7"><li>安装 8.* LTS 版本 (长久维护版本) 和12版本：nvm install 8.11.2 （12）   </li></ol></li><li><ol start="8"><li>查看本地可用的node.js版本： nvm list </li></ol></li><li><ol start="9"><li>切换node版本 ：nvm use 8   </li></ol></li><li><ol start="10"><li>设置默认版本：nvm alias default 12</li></ol></li></ul></blockquote><h4 id="tar命令解压文件造成目录权限修改"><a href="#tar命令解压文件造成目录权限修改" class="headerlink" title="tar命令解压文件造成目录权限修改"></a>tar命令解压文件造成目录权限修改</h4><blockquote><p>如果在指定解压时指定参数-no-same-owner(即 tar -no-same-owner -zxvf xxx.tar.gz),则会将执行该tar命令的用户作为解压后的文件目录的所有者。这是因为tar命令在解压时会默认指定参数–same-owner。<br>简言之，如果使用tar命令导致文件目录权限修改,可添加-no-same-owner参数。</p></blockquote><h4 id="END"><a href="#END" class="headerlink" title="END"></a>END</h4><blockquote><p>表面上，每个人都在强调自己有独立的人格，但是实际上，只有与他人稍稍有所不同，我们就会怕的要死，时刻都在提醒自己，一定要装的与其他人一致。  </p><p align="right">前方的路^体制与个性</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 每周分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 每周分享 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>每周总结第三十二期</title>
      <link href="/2020/02/29/issue-32/"/>
      <url>/2020/02/29/issue-32/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本周是2020年的第九个周末。<br>这里记录过去一周，我的一些总结。</p></blockquote><p><img src="http://img.liugezhou.online/blog/weekly32.png" alt="weekly-32"></p><a id="more"></a><h4 id="Feeling"><a href="#Feeling" class="headerlink" title="Feeling"></a>Feeling</h4><blockquote><p>本周在家粗略的看了一本由阮一峰译保罗·格雷厄姆的一本文集：《黑客与画家 : 硅谷创业之父Paul Graham文集》。<br>保罗·格雷厄姆被称为硅谷创业之父，自毕业初期,他的梦想是当一名画家,由于入不敷出,改行写软件。与朋友合伙创立了 Y Combinator(YC),根据保罗·格雷厄姆设想,它既是一个创业公司的孵化器,也是一个教导员,还是一个与投资人联系的中介.</p><p>下面是他书中的一些内容：<br>没有什么比一个共同的敌人更能使得人们团结起来了。这就好比一个政客，他想让选民忘记糟糕的国内局势，方法就是为国家找出一个敌人，哪怕敌人真的不存在，他也可以创造一个出来。一群人在一起，挑出一个书呆子，居高临下的欺负他，就会把彼此联系起来。一起攻击一个外人，所有人因此都成了自己人。这就是为什么最恶劣的以强凌弱的事件都与团体有关的原因。随便找一个书呆子，他都会告诉你，一群人的虐待比一个人的虐待残酷的多。</p><p>历史的常态似乎就是，任何一个年代的人们，都会对一些荒谬的东西深信不疑。他们的信念还很坚定，只要有人稍微表示一点怀疑，就会惹来大麻烦。</p><p>触怒他人的言论是那些可能会有人相信的言论。我猜想，最令人暴跳如雷的言论，就是被认为说出了真相的言论。</p><p>对于做产品的公司，等你咨询公司帮你出主意的时候，就是你开始走向灭亡的时候。</p><p>你把整个程序想清楚的时间点，应该是在编写代码的同时，而不是在编写代码之前，这与作家、画家和建筑师的做法完全不一样。它意味着，编程语音的首要特性应该是允许动态扩展。<br>编程语言是用来帮助思考程序的，而不是用来表达你已经想好的程序。它应该是一支铅笔，而不是一支钢笔。如果大家都像学校教的那样编程，那么静态类型是一个不错的概念。但是我认识的黑客，没有一个人喜欢用静态类型语言编程。我们需要的是一种可以随意涂抹、擦擦改改的语言，我们不想正襟危坐，把一个盛满各种变量类型的茶杯，小心翼翼放在自己的膝盖上，为了与一丝不苟的编译器大婶交谈，努力地挑选词语，确保变量类型匹配，好让自己显得礼貌又周到.</p><p>任何一门艺术，不管是否重要，如果你想要在该领域出类拔萃，就必须全身心投入。</p><p>我们认定无法解决的难题，事实上完全可以解决。</p></blockquote><h4 id="中华人们共和国外国人永久居留管理条例"><a href="#中华人们共和国外国人永久居留管理条例" class="headerlink" title="中华人们共和国外国人永久居留管理条例"></a><a href="http://www.moj.gov.cn/news/content/2020-02/27/zlk_3242559.html" target="_blank" rel="noopener">中华人们共和国外国人永久居留管理条例</a></h4><blockquote><p>👆此连接是2020年2月27日，中华人民共和国司法部网站发布的“中华人们共和国外国人永久居留管理条例(征求意见稿)”，在网上引起轩然大波、激烈讨论。</p></blockquote><h4 id="拼多多开启新一轮广告投送"><a href="#拼多多开启新一轮广告投送" class="headerlink" title="拼多多开启新一轮广告投送"></a>拼多多开启新一轮广告投送</h4><blockquote><p>本周拼多多开启新一轮广告补贴，深度极广，多数微信公众号大V有力参与。</p></blockquote><h4 id="Kbone"><a href="#Kbone" class="headerlink" title="Kbone"></a>Kbone</h4><blockquote><p>最近微信官方重磅推出了一个统一Web前端和小程序的框架 —— Kbone,代码已在Github开源。<br>微信小程序的底层模型和 Web 端不同，开发者无法直接把 Web 端的代码挪到小程序环境内执行。<br>Kbone 的诞生就是为了解决这个问题，它实现了一个适配器，在适配层里模拟出了浏览器环境，让 Web 端的代码可以不做什么改动，便可运行在小程序里。<br>Kbone的缺点是：使用一定的性能损耗，来换取更为全面的 Web 端特性支持。  </p></blockquote><h4 id="SwitchHosts"><a href="#SwitchHosts" class="headerlink" title="SwitchHosts"></a><a href="https://oldj.github.io/SwitchHosts/" target="_blank" rel="noopener">SwitchHosts</a></h4><blockquote><p>👆一个可以快速添加、修改、切换 本地hosts 文件的小工具。</p></blockquote><h4 id="epub"><a href="#epub" class="headerlink" title="epub"></a>epub</h4><blockquote><p>epub是Electronic Publication的缩写，译为：电子出版。这是一个自由的开放标准，许多电子书的软件都是基于epub格式的电子书进行的开发。  </p></blockquote><h4 id="Network-Link-Conditioner"><a href="#Network-Link-Conditioner" class="headerlink" title="Network Link Conditioner"></a>Network Link Conditioner</h4><blockquote><p>网络环境的好坏，有时会让你的产品带给用户完全不同的体验，作为开发者，在开发项目过程中，我们需要进行对于网络环境的调试。Mac环境下模拟慢速网络可以使用苹果官方提供的工具：Network Link Conditioner。</p></blockquote><h4 id="VSCode设置侧边颜色"><a href="#VSCode设置侧边颜色" class="headerlink" title="VSCode设置侧边颜色"></a>VSCode设置侧边颜色</h4><blockquote><p>查看项目的时候，有时我们会打开多个窗口，为了增加窗口打开项目的识别(窗口侧边颜色修改)，我们可以在项目的.vscode/setting.json中进行配置：  </p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    …………</span><br><span class="line">    &quot;workbench.colorCustomizations&quot;:&#123;</span><br><span class="line">        &quot;activityBar.background&quot;: &quot;#a06a05&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    …………</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="使用Inspector调试node-js"><a href="#使用Inspector调试node-js" class="headerlink" title="使用Inspector调试node.js"></a><a href="https://www.imooc.com/learn/1093" target="_blank" rel="noopener">使用Inspector调试node.js</a></h4><blockquote><p>慕课网上的一个免费nodejs调试入门视频课。<br>这门课程简要、简单的总结了调试nodejs的多个方法，以及对inpector的调试api进行了简单演示。</p></blockquote><h4 id="vue-element-ui"><a href="#vue-element-ui" class="headerlink" title="vue-element-ui"></a><a href="https://github.com/PanJiaChen/vue-element-admin" target="_blank" rel="noopener">vue-element-ui</a></h4><blockquote><p>👆一个后台前端的开源框架，star数马上五万。采用最新的前端技术栈，提供丰富的功能组件，并且提供了基础模板，方便快速搭建企业期中后台产品原型。</p></blockquote><h4 id="Vue音乐APP"><a href="#Vue音乐APP" class="headerlink" title="Vue音乐APP"></a><a href="http://music.liugezhou.online" target="_blank" rel="noopener">Vue音乐APP</a></h4><blockquote><p>本周将之前学习的一门课程《Vue2.0开发企业级移动音乐APP》通过nginx，使用pm2管理，进行了线上部署，部署地址：<a href="http://music.liugezhou.online，由于课程久远，在iPhone客户端上出现播放歌曲没有声音的bug，仍未修复。" target="_blank" rel="noopener">http://music.liugezhou.online，由于课程久远，在iPhone客户端上出现播放歌曲没有声音的bug，仍未修复。</a></p></blockquote><h4 id="End"><a href="#End" class="headerlink" title="End"></a>End</h4><blockquote><p>人们真正注意到你的时候，不是第一眼看到你站在那里，而是发现过了这么久你居然还在那里。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 每周分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 每周分享 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>每周总结第三十一期</title>
      <link href="/2020/02/22/issue-31/"/>
      <url>/2020/02/22/issue-31/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本周是2020年的第八个周末。<br>这里记录过去一周，我的一些总结。</p></blockquote><p><img src="http://img.liugezhou.online/weekly31.jpeg" alt="weekly-31"></p><a id="more"></a><h3 id="Feeling"><a href="#Feeling" class="headerlink" title="Feeling"></a>Feeling</h3><blockquote><p>读书与电影会扩展我们的生活半径,唯有读书人是最自由，唯有看电影人是最畅想。<br>看一部电影，读一本书都有身临其境、思想解放的感受。<br>而由于新时代下电影审查的严苛，读书便成为了不二选择。    </p></blockquote><h3 id="指路明灯"><a href="#指路明灯" class="headerlink" title="指路明灯"></a>指路明灯</h3><blockquote><p>世界上最长的电视剧《指路明灯》，该剧最初该剧由ABS在1937年1月25日首次播出,于2009年9月播出最后一集，合计播出18262集，该剧从电台广播剧开始，已播放了72年。吉尼斯纪录称它是世界上最长的电视剧。</p></blockquote><h3 id="视频号"><a href="#视频号" class="headerlink" title="视频号"></a>视频号</h3><blockquote><p>微信公灰度发布视频号，目前进入视频号，视频不能暂停、不能快进、不能静音，只能点赞和评论。</p></blockquote><h3 id="拉里～特斯勒"><a href="#拉里～特斯勒" class="headerlink" title="拉里～特斯勒"></a><a href="https://www.bbc.com/zhongwen/simp/science-51569946?at_campaign=64&at_custom2=twitter&at_custom1=%5Bpost+type%5D&at_custom3=BBC+Chinese&at_medium=custom7&at_custom4=1B94F308-53C9-11EA-8759-A0FEC28169F1" target="_blank" rel="noopener">拉里～特斯勒</a></h3><blockquote><p>早期计算机科学标志性人物拉里·特斯勒（Larry Tesler）–“复制粘贴剪切”功能发明人,于2020年2月17日去世，终年74岁。    </p></blockquote><h3 id="MacOS中如何快读调出终端"><a href="#MacOS中如何快读调出终端" class="headerlink" title="MacOS中如何快读调出终端"></a><a href="https://www.zhihu.com/question/20692634" target="_blank" rel="noopener">MacOS中如何快读调出终端</a></h3><blockquote><p>MacOS中没有快捷键打开终端的快捷键，这篇文章总结了通过 Automator.app设置快捷键打开终端。</p></blockquote><h3 id="Commond-T"><a href="#Commond-T" class="headerlink" title="Commond + T"></a>Commond + T</h3><blockquote><p>Commond + T快捷键可以在浏览器或者终端中开启一个新的标签、终端。</p></blockquote><h3 id="IDEA过期"><a href="#IDEA过期" class="headerlink" title="IDEA过期"></a>IDEA过期</h3><blockquote><p>本周IDEA又一次过期(还可以打开，只有过期提示)，此次更新步骤是：<br>菜单栏依次打开：help、register、Licence、server：<br> 根据提示，将之前licence-server address ,<br>由<a href="http://jetbrains-license-server改为" target="_blank" rel="noopener">http://jetbrains-license-server改为</a><br><a href="http://fls.jetbrains-agent.com" target="_blank" rel="noopener">http://fls.jetbrains-agent.com</a>    </p><p>若不是以server的，又看到了一篇过期激活教程：<a href="https://mp.weixin.qq.com/s/WwLSaNCHL7FeB2mOxNt2dw" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/WwLSaNCHL7FeB2mOxNt2dw</a></p></blockquote><h3 id="https-www-npmjs-com"><a href="#https-www-npmjs-com" class="headerlink" title="https://www.npmjs.com/"></a><a href="https://www.npmjs.com/" target="_blank" rel="noopener">https://www.npmjs.com/</a></h3><blockquote><p>npmjs网站用来查看npm包基本信息，包括周下载量、版本号、证书类型、包大小、文件数量、Issues、仓库地址、包使用介绍等等。</p></blockquote><h3 id="包管理工具"><a href="#包管理工具" class="headerlink" title="包管理工具"></a>包管理工具</h3><p><img src="http://img.liugezhou.online/blog%2Fpackagetools.png" alt="packagetools"></p><h3 id="How-to-Install-MongoDB-on-CentOS-7"><a href="#How-to-Install-MongoDB-on-CentOS-7" class="headerlink" title="How to Install MongoDB on CentOS 7"></a><a href="https://linuxize.com/post/how-to-install-mongodb-on-centos-7/" target="_blank" rel="noopener">How to Install MongoDB on CentOS 7</a></h3><blockquote><p>一篇在CentOS7上安装MongoDB的最简单教程。 步骤如下： </p><ol><li><code>vi /etc/yum.repos.d/</code>       </li><li>编辑内容如下： <pre><code class="[mongodb-org-4.0]">name=MongoDB Repositorybaseurl=https://repo.mongodb.org/yum/redhat/$releasever/mongodb-org/4.0/x86_64/gpgcheck=1  enabled=1gpgkey=https://www.mongodb.org/static/pgp/server-4.0.asc</code></pre></li><li><code>yum install mongodb-org(验证安装结果：rpm -qa |grep mongodb)</code>    </li><li>启动服务：<code>sudo systemctl start mongod</code>、<br>停止服务：<code>sudo systemctl stop mongod</code>、<br>修改配置文件后重启：<code>systemctl restart mongod</code>     </li><li>MongoDB默认端口上27017，检查端口是否开启：<code>netstat -natp | grep 27017</code></li><li><code>mongo</code>，验证服务开启，进入命令行可查看版本：db.version();     </li><li>想要修改mongo默认端口，<code>vi /etc/mongd.conf</code>      </li></ol></blockquote><h3 id="本周产出"><a href="#本周产出" class="headerlink" title="本周产出"></a>本周产出</h3><blockquote><p>本周总结了两篇博文：  </p><ul><li><a href="https://www.liugezhou.online/2020/02/18/ssh%E8%BF%9C%E7%A8%8B%E7%99%BB%E5%BD%95%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9A%84%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98/" target="_blank" rel="noopener">ssh远程登录服务器的一些问题</a> </li><li><a href="https://www.liugezhou.online/2020/02/21/%E4%BB%8E%E6%9C%AC%E5%9C%B0%E5%8F%91%E5%B8%83%E4%B8%8A%E7%BA%BF%E5%92%8C%E6%9B%B4%E6%96%B0%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9A%84Node.js%E9%A1%B9%E7%9B%AE/" target="_blank" rel="noopener">从本地发布上线和更新服务器的Node.js项目</a></li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> 每周分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 每周分享 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从本地发布上线和更新服务器的Node.js项目</title>
      <link href="/2020/02/21/%E6%9C%AC%E5%9C%B0%E5%8F%91%E5%B8%83%E4%B8%8A%E7%BA%BF%E5%92%8C%E6%9B%B4%E6%96%B0%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9A%84Node.js%E9%A1%B9%E7%9B%AE/"/>
      <url>/2020/02/21/%E6%9C%AC%E5%9C%B0%E5%8F%91%E5%B8%83%E4%B8%8A%E7%BA%BF%E5%92%8C%E6%9B%B4%E6%96%B0%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9A%84Node.js%E9%A1%B9%E7%9B%AE/</url>
      
        <content type="html"><![CDATA[<h3 id="一、直接部署一个简单的app-js项目"><a href="#一、直接部署一个简单的app-js项目" class="headerlink" title="一、直接部署一个简单的app.js项目"></a>一、直接部署一个简单的app.js项目</h3><blockquote><p>在进行<code>本地</code>发布上线和更新服务器的Node.js项目前，先来总结一下之前的方法:</p></blockquote><p><img src="http://img.liugezhou.online/blog%2Fnode-liugezhou.png" alt="nodetest"></p><a id="more"></a><blockquote><ol><li>要部署的一个node项目，仅为单文件app.js，该文件内容如下：  </li></ol></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">const http = require(&apos;http&apos;)</span><br><span class="line"></span><br><span class="line">const homePage = `</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;meta charset=&apos;utf-8&apos;&gt;</span><br><span class="line">        &lt;title&gt;六个周的个人网站&lt;/title&gt;</span><br><span class="line">        &lt;style&gt;</span><br><span class="line">            *&#123;</span><br><span class="line">                padding:0;</span><br><span class="line">                margin:0</span><br><span class="line">            &#125;</span><br><span class="line">            body&#123;</span><br><span class="line">                padding:30px 0;</span><br><span class="line">                text-align:center;</span><br><span class="line">                font-size:16px;</span><br><span class="line">                background-color:#333;</span><br><span class="line">            &#125;</span><br><span class="line">            h1,</span><br><span class="line">            h2&#123;</span><br><span class="line">                color:#fff;</span><br><span class="line">            &#125;</span><br><span class="line">            nav&#123;</span><br><span class="line">                margin-top:20px;</span><br><span class="line">            &#125;</span><br><span class="line">            a &#123;</span><br><span class="line">                color:#ccc;</span><br><span class="line">                text-decoration:none;</span><br><span class="line">            &#125;</span><br><span class="line">            a:hover&#123;</span><br><span class="line">                text-decoration:none;</span><br><span class="line">            &#125;</span><br><span class="line">        &lt;/style&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;h1&gt;六个周的个人网站测试&lt;/h1&gt;</span><br><span class="line">        &lt;h2&gt;2020-02-21&lt;/h2&gt;</span><br><span class="line">        &lt;nav&gt;</span><br><span class="line">            &lt;ul&gt;</span><br><span class="line">                &lt;li&gt;</span><br><span class="line">                    &lt;a target=&quot;_blank&quot; href=&quot;https://liugezhou.online&quot;&gt;六个周的个人博客&lt;/a&gt;</span><br><span class="line">                &lt;/li&gt;</span><br><span class="line">                &lt;li&gt;</span><br><span class="line">                    &lt;a target=&quot;_blank&quot; href=&quot;https://juejin.im/user/5afcc0a66fb9a07aad17b79e&quot;&gt;六个周的掘金主页&lt;/a&gt;</span><br><span class="line">                &lt;/li&gt;</span><br><span class="line">                &lt;li&gt;</span><br><span class="line">                    &lt;a target=&quot;_blank&quot; href=&quot;https://www.jianshu.com/u/5842abb77bd1&quot;&gt;六个周的简书主页&lt;/a&gt;</span><br><span class="line">                &lt;/li&gt;</span><br><span class="line">                &lt;li&gt;</span><br><span class="line">                    &lt;a target=&quot;_blank&quot; href=&quot;https://github.com/liugezhou&quot;&gt;六个周的Github&lt;/a&gt;</span><br><span class="line">                &lt;/li&gt;</span><br><span class="line">                &lt;li&gt;</span><br><span class="line">                    &lt;a target=&quot;_blank&quot; href=&quot;https://mp.weixin.qq.com/mp/profile_ext?action=home&amp;__biz=MzIxNDc0OTMxNA==&amp;scene=124#wechat_redirect&quot;&gt;Dangerous Wakaka&lt;/a&gt;</span><br><span class="line">                &lt;/li&gt;</span><br><span class="line">            &lt;/ul&gt;</span><br><span class="line">        &lt;/nav&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">`</span><br><span class="line">http.createServer((req,res) =&gt; &#123;</span><br><span class="line">    res.statusCode = 200</span><br><span class="line">    res.setHeader(&apos;Content-Type&apos;,&apos;text/html&apos;)</span><br><span class="line">    res.end(homePage)</span><br><span class="line">&#125;).listen(3000, () =&gt; &#123;</span><br><span class="line">    console.log(&apos;Server Running At 3000&apos;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><ol start="2"><li>在本地终端，通过scp命令将本地app.js文件上传到服务器 /www/website-3000-static 目录下。  </li><li>编辑nginx配置文件：<code>vi  /etc/nginx/conf.d/node-test-3000.conf</code>内容如下：   </li></ol></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">upstream nodetest &#123;</span><br><span class="line">server 127.0.0.1:3000;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">listen 80;</span><br><span class="line">server_name 47.104.XX.XXX;</span><br><span class="line"></span><br><span class="line">location /&#123;</span><br><span class="line">proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">proxy_set_header X-Forward-For $proxy_add_x_forwarded_for;</span><br><span class="line">proxy_set_header Host $http_host;</span><br><span class="line">proxy_set_header x-Nginx-Proxy true;</span><br><span class="line">proxy_pass http://nodetest;</span><br><span class="line">proxy_redirect off;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><ol start="4"><li>在服务器，进入到3000文件夹目录，使用<code>pm2 delete app</code>掉之前开的app服务，然后<code>pm2 start app</code>,即可直接访问(<a href="http://node.liugezhou.online--这里需要域名解析A记录)。" target="_blank" rel="noopener">http://node.liugezhou.online--这里需要域名解析A记录)。</a></li></ol></blockquote><h3 id="二、从本地发布上线和更新服务器的Node-js项目"><a href="#二、从本地发布上线和更新服务器的Node-js项目" class="headerlink" title="二、从本地发布上线和更新服务器的Node.js项目"></a>二、从本地发布上线和更新服务器的Node.js项目</h3><h4 id="步骤一：测试服务器从git上克隆拉取代码"><a href="#步骤一：测试服务器从git上克隆拉取代码" class="headerlink" title="步骤一：测试服务器从git上克隆拉取代码"></a>步骤一：测试服务器从git上克隆拉取代码</h4><blockquote><ul><li>首先将本地项目包含app.js的项目上传至私有仓库。      </li><li>其次要确保本地以及服务器的公钥已在git上配置。      </li><li>最后，从git上拉取代码到服务器上（与本地操作一致）。  </li></ul></blockquote><h4 id="步骤二：了解pm2的相关命令"><a href="#步骤二：了解pm2的相关命令" class="headerlink" title="步骤二：了解pm2的相关命令"></a>步骤二：了解pm2的相关命令</h4><blockquote><h5 id="Welcome"><a href="#Welcome" class="headerlink" title="Welcome"></a>Welcome</h5><p>PM2是守护程序进程管理器，它将帮助您管理和保持应用程序在线。 PM2入门非常简单，它是一个简单直观的CLI，可以通过NPM安装。</p><h5 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h5><p><code>npm install pm2@latest -g</code> or<br><code>yarn global add pm2</code><br><code>pm2 update</code>  </p><h5 id="Start-an-app"><a href="#Start-an-app" class="headerlink" title="Start an app"></a>Start an app</h5><p><code>pm2 start app.js</code><br><code>pm2 start bashscript.sh</code><br><code>pm2 start python-app.py --watch</code><br><code>pm2 start binary-file -- --port 1520</code></p><h5 id="Managing-processes"><a href="#Managing-processes" class="headerlink" title="Managing processes"></a>Managing processes</h5><p><code>pm2 restart app_name</code><br><code>pm2 reload app_name</code><br><code>pm2 stop app_name</code><br><code>pm2 delete app_name</code><br><code>pm2 list/status/ls</code><br><code>pm2 logs</code><br><code>pm2 logs --lines 50</code><br><code>pm2 monit</code></p></blockquote><blockquote><h5 id="Ecosystem-File"><a href="#Ecosystem-File" class="headerlink" title="Ecosystem File"></a>Ecosystem File</h5><p>生成ecosystem文件,在指定目录下执行命令：<br><code>pm2 ecosystem</code><br>启动:  <code>pm2 deploy production setup</code><br>更新部署：<code>pm2 deploy production update</code></p></blockquote><h4 id="步骤三：配置PM2一键部署线上项目结构"><a href="#步骤三：配置PM2一键部署线上项目结构" class="headerlink" title="步骤三：配置PM2一键部署线上项目结构"></a>步骤三：配置PM2一键部署线上项目结构</h4><blockquote><ol><li><p>首先创建创建ecosystem.config文件：<br><code>pm2 ecosystem</code>.</p></li><li><p>然后修改该配置文件中deploy下production中的字段：<br>“user”为远程服务器的登录名。<br>“host”为远程服务器的主机名。<br>“ref”为远程git仓库的主分支。<br>“path”为远程服务器要部署的代码地址(与步骤一中的地址不一样)</p></li><li><p>在本地终端输入以下命令：<br><code>pm2 deploy production setup</code> </p></li></ol><p>在远程服务器上查看,生成三个文件夹依次为:<br>“current”:当前的服务所运行的文件夹<br>“shared”: 日志文件、pid等<br>“source”:clone下的源代码</p></blockquote><h4 id="步骤四：本地控制远端代码更新、服务重启"><a href="#步骤四：本地控制远端代码更新、服务重启" class="headerlink" title="步骤四：本地控制远端代码更新、服务重启"></a>步骤四：本地控制远端代码更新、服务重启</h4><blockquote><p>首先确保本地项目已经上传至git仓库。然后打开本地项目命令行，直接键入：<br><code>pm2 deploy production update</code><br>发现远程服务器项目更新且部署完毕，这个时候在浏览器中输入”<a href="http://node.liugezhou.online&quot;即可查看部署的项目。" target="_blank" rel="noopener">http://node.liugezhou.online&quot;即可查看部署的项目。</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 服务端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pm2 </tag>
            
            <tag> Node.js发布 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ssh远程登录服务器的一些问题</title>
      <link href="/2020/02/18/ssh%E8%BF%9C%E7%A8%8B%E7%99%BB%E5%BD%95%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9A%84%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98/"/>
      <url>/2020/02/18/ssh%E8%BF%9C%E7%A8%8B%E7%99%BB%E5%BD%95%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9A%84%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h3 id="一、zsh"><a href="#一、zsh" class="headerlink" title="一、zsh"></a>一、zsh</h3><h4 id="1-zsh切换"><a href="#1-zsh切换" class="headerlink" title="1.zsh切换"></a>1.zsh切换</h4><blockquote><p>首先确保本地终端shell是zsh。更改详见<a href="https://www.liugezhou.online/2020/01/10/%E6%AF%8F%E5%91%A8%E6%80%BB%E7%BB%93%E7%AC%AC%E4%BA%8C%E5%8D%81%E4%B8%83%E6%9C%9F/" target="_blank" rel="noopener">每周总结第二十七期</a></p></blockquote><p><img src="http://img.liugezhou.online/blog%2Fnode-royaltsx.png" alt="node-royaltsx"></p><a id="more"></a><h4 id="2-zsh配置连接服务端别名"><a href="#2-zsh配置连接服务端别名" class="headerlink" title="2.zsh配置连接服务端别名"></a>2.zsh配置连接服务端别名</h4><blockquote><p>这篇短文要解决的是这么一个小问题：购买了ECS，获得了公网IP，知晓密码。 </p><p>这个时候不想在sheel中每次输入<code>ssh root@47.104.85.127</code>去连接服务器。   </p><p>这个时候就可以更改.zshrc配置文件(<code>vi ~/.zshrc</code>).<br>在该配置文件中加入以下一段声明即可：<br><code>alias ssh_liugezhou=&quot;ssh root@47.104.85.127&quot;</code></p><p>更改完成后，执行<code>source ~/.zshrc</code>命令。<br>这个时候在终端直接输入:<code>ssh_liugezhou</code>,接着输入服务器密码即可。   </p></blockquote><h3 id="二、服务器信息"><a href="#二、服务器信息" class="headerlink" title="二、服务器信息"></a>二、服务器信息</h3><h4 id="数据盘与磁盘空间"><a href="#数据盘与磁盘空间" class="headerlink" title="数据盘与磁盘空间"></a>数据盘与磁盘空间</h4><blockquote><p>如果买了新的数据盘,数据盘需要额外挂载，没有购买情况下，默认是挂载了一个系统盘，系统盘是用来安装操作系统的，如果网站应用都跑在系统盘上，一旦重装系统，所有网站数据资料都会丢失，若挂载在数据盘上，可以提高安全性，重装系统用户资料也不会丢失，查看是否含有数据盘的命令是：<br><code>fdisk -l</code><br>如果只有一个 Disk /dev/xvda 则说明没有新的数据盘。    </p><p>查看磁盘空间的命令是：<br><code>df -h</code></p></blockquote><h3 id="三、配置root用户管理"><a href="#三、配置root用户管理" class="headerlink" title="三、配置root用户管理"></a>三、配置root用户管理</h3><h4 id="1-增加用户"><a href="#1-增加用户" class="headerlink" title="1.增加用户"></a>1.增加用户</h4><blockquote><p>通过命令,创建新的用户liugezhou。<br><code>useradd liugezhou</code><br>添加完用户后可在  /home下看到用户名。<br>然后输入 <code>passwd liugezhou</code>为用户设置密码。<br>回车输入该用户的密码(两次)。  </p></blockquote><h4 id="2-删除用户"><a href="#2-删除用户" class="headerlink" title="2.删除用户"></a>2.删除用户</h4><blockquote><p>语法：<code>userdel [-rf] liugezhou</code><br>userdel可删除用户账号与相关文件，若不加参数，则仅删除用户账号，而不删除相关文件。<br>-r: 删除用户登入目录以及目录中所有文件。<br>-f: 强制删除用户(甚至当用户已登入Linux系统时此选项依旧生效)</p></blockquote><h4 id="3-查看用户信息-uid、gid、组"><a href="#3-查看用户信息-uid、gid、组" class="headerlink" title="3.查看用户信息(uid、gid、组)"></a>3.查看用户信息(uid、gid、组)</h4><blockquote><p><code>id liugezhou</code></p></blockquote><h4 id="4-为新用户添加sudo权限"><a href="#4-为新用户添加sudo权限" class="headerlink" title="4.为新用户添加sudo权限"></a>4.为新用户添加sudo权限</h4><blockquote><p>#首先登录 root 账户<br><code>visudo</code>   </p><p>#找到如下行数<br><code>root  ALL=(ALL)   ALL</code><br>添加 <code>liugezhou  ALL=(ALL)  ALL</code></p></blockquote><h4 id="5-切换用户"><a href="#5-切换用户" class="headerlink" title="5.切换用户"></a>5.切换用户</h4><blockquote><p><code>su username</code></p></blockquote><h4 id="6-相关文件"><a href="#6-相关文件" class="headerlink" title="6.相关文件"></a>6.相关文件</h4><blockquote><p>/etc/passed文件：用户的配置文件，记录用户的各种信息。<br>/etc/shadow文件：口令的配置文件<br>/etc/group文件：组的配置文件，记录Linux包含的组的信息。   </p></blockquote><h4 id="7-更多Linux用户和用户组的管理"><a href="#7-更多Linux用户和用户组的管理" class="headerlink" title="7.更多Linux用户和用户组的管理"></a>7.<a href="https://www.runoob.com/linux/linux-user-manage.html" target="_blank" rel="noopener">更多Linux用户和用户组的管理</a></h4><h3 id="四、配置本地无密码ssh登录"><a href="#四、配置本地无密码ssh登录" class="headerlink" title="四、配置本地无密码ssh登录"></a>四、配置本地无密码ssh登录</h3><h4 id="1-查看本地是否已配置私钥、公钥。"><a href="#1-查看本地是否已配置私钥、公钥。" class="headerlink" title="1.查看本地是否已配置私钥、公钥。"></a>1.查看本地是否已配置私钥、公钥。</h4><blockquote><p>进入本地用户的根目录：cd /Users/liumingzhou<br>该目录下，查看是否包含id_rsa和id_rsa.pub<br>如果不包含，在本目录下依次执行以下命令：<br><code>mkdir .ssh</code><br><code>cd .ssh</code><br><code>ssh-keygen -t rsa -b 4096 -C &quot;abc@gmail.com&quot;</code><br><code>eval &quot;$(ssh-agent -s)&quot;</code><br><code>ssh-add ~/.ssh/id_rsa</code></p></blockquote><h4 id="2-服务器根目录下配置"><a href="#2-服务器根目录下配置" class="headerlink" title="2.服务器根目录下配置"></a>2.服务器根目录下配置</h4><blockquote><p>登入服务器，进入/root目录下，首先查看是否有.ssh目录，若没有：<br>遵从步骤一。之后：<br><code>vi .ssh/authorzed_keys</code><br>将本地的公钥放进到<code>.ssh/authorzed_keys</code>.<br><code>chomd 600 authorzed_keys</code><br><code>sudo service ssh restart</code><br>这个时候，直接输入ssh_liugezhou,即可以直接登入到服务器。</p></blockquote><h3 id="五、修改服务器默认登录端口-未进行实战"><a href="#五、修改服务器默认登录端口-未进行实战" class="headerlink" title="五、修改服务器默认登录端口[未进行实战]"></a>五、修改服务器默认登录端口[未进行实战]</h3><blockquote><p>Linux默认登录的端口是22[0-65536],0-1024端口尽量不使用，可能会被系统占用<br>更改端口，输入：<code>vi /etc/ssh/sshd_config</code><br>修改端口Port字段即可，也可以修改 PermitRootLogin(是否允许root登录)。  </p></blockquote><h3 id="六、配置iptables和Fail2Ban增强安全防护-未进行实战"><a href="#六、配置iptables和Fail2Ban增强安全防护-未进行实战" class="headerlink" title="六、配置iptables和Fail2Ban增强安全防护[未进行实战]"></a>六、配置iptables和Fail2Ban增强安全防护[未进行实战]</h3><blockquote><p>暂不总结。</p></blockquote><h3 id="七、ECS服务器是否设置连接超时时间"><a href="#七、ECS服务器是否设置连接超时时间" class="headerlink" title="七、ECS服务器是否设置连接超时时间"></a>七、ECS服务器是否设置连接超时时间</h3><blockquote><p>用SSH客户端连接linux服务器时，经常会出现与服务器会话连接中断现象，造成这个问题的原因便是SSH服务有自己独特的会话连接机制。<br>解决方案：<br>1、设置服务器向SSH客户端连接会话发送频率和时间<br><code>#vi /etc/ssh/sshd_config，添加如下两行</code><br><code>ClientAliveInterval 60</code><br><code>ClientAliveCountMax 86400</code><br>注：ClientAliveInterval选项定义了每隔多少秒给SSH客户端发送一次信号；ClientAliveCountMax选项定义了超过多少秒后断开与ssh客户端连接<br>2、重新启动系统SSH服务<br><del><code>service sshd restart</code></del><br>云服务器 ECS Linux CentOS 7 下重启服务不再通过 service 操作，而是通过 systemctl 操作。    </p><ul><li>查看：systemctl status sshd.service     </li><li>启动：systemctl start sshd.service      </li><li>重启：systemctl restart sshd.service    </li><li>自启：systemctl enable sshd.service  </li></ul></blockquote><h3 id="八、借助pm2让nodejs服务常驻"><a href="#八、借助pm2让nodejs服务常驻" class="headerlink" title="八、借助pm2让nodejs服务常驻"></a>八、借助pm2让nodejs服务常驻</h3><blockquote><p>服务器下载pm2后，如果要启动一个app.js的项目(该文件内为一个连接http服务的段代码);<br>如果使用<code>node app.js</code>，退出文件或者关闭终端，则该文件就不能访问了，这个时候可以使用pm2.<br>启动项目：<code>pm2 start app.js</code><br>pm2启动列表：<code>pm2 list</code><br>pm2查看某信息：<code>pm2 show app</code><br>查看pm2在线日志：<code>pm2 logs</code><br>关闭服务：<code>pm2 stop app</code><br>删除服务：<code>pm2 delete app</code></p></blockquote><h3 id="九、利用SCP-远程上传下载文件-文件夹"><a href="#九、利用SCP-远程上传下载文件-文件夹" class="headerlink" title="九、利用SCP 远程上传下载文件/文件夹"></a>九、利用SCP 远程上传下载文件/文件夹</h3><blockquote><p>向目标服务器的/home/liugezhou/test文件夹下上传一个本地压缩文件[实战命令]。<br><code>scp [-P 22] /Users/liumingzhou/Desktop/demo/test  username@XX.XXX.XX.XXX:/home/liugezhou/test</code> </p><p>从目标服务器下载某一文件到本地：<br><code>scp username@servername:/path/filename /tmp/local_destination</code></p><p>向目标服务器上传本地一文件夹[实战命令]：<br><code>scp -r /Users/liumingzhou/Desktop/demo/test username@XX.XXX.XX.XXX:/home/liugezhou/test</code><br>从目标服务器下载某一文件夹到本地：<br><code>scp -r username@servername:/path/filename /tmp/local_destination</code>    </p></blockquote><h5 id="小技巧"><a href="#小技巧" class="headerlink" title="小技巧"></a>小技巧</h5><blockquote><ul><li>在终端下或者VSCode中，或者idea中，如果想让光标回到行首，可以使用 ctrl + a，回到行尾，使用ctrl + e。 </li><li>vi文件时，我们可以通过:set number显示行号，为了每次直接打开就显示行号，我们可以通过修改<code>vi ~/.vimrc</code>文件，添加<code>set number</code>. </li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> 服务端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> zsh </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mac下使用brew安装mongodb</title>
      <link href="/2020/02/17/Mac%E4%B8%8B%E4%BD%BF%E7%94%A8brew%E5%AE%89%E8%A3%85mongodb/"/>
      <url>/2020/02/17/Mac%E4%B8%8B%E4%BD%BF%E7%94%A8brew%E5%AE%89%E8%A3%85mongodb/</url>
      
        <content type="html"><![CDATA[<h3 id="brew"><a href="#brew" class="headerlink" title="brew"></a>brew</h3><blockquote><p>brew又叫Homebrew，是Mac OSX上的软件包管理工具，能在Mac中方便的安装软件或者卸载软件， 只需要一个命令， 非常方便</p></blockquote><p><img src="https://ss1.bdstatic.com/70cFuXSh_Q1YnxGkpoWK1HF6hhy/it/u=1544185681,4222822592&fm=26&gp=0.jpg" alt="mongodb"></p><a id="more"></a><blockquote><p>brew类似ubuntu系统下的apt-get的功能</p><p>安装：<code>/usr/bin/ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;</code></p><ul><li>brew list           列出已安装的软件</li><li>brew update     更新brew</li><li>brew home       用浏览器打开brew的官方网站</li><li>brew info         显示软件信息</li><li>brew deps        显示包依赖</li></ul></blockquote><h3 id="安装mongodb"><a href="#安装mongodb" class="headerlink" title="安装mongodb"></a>安装mongodb</h3><blockquote><p>如果你用 brew install mongodb，可能会报错：<br><code>No available formula with the name &quot;mongodb&quot;</code></p><p>然后你需要的操作是：  </p><ul><li><code>brew services stop mongodb</code></li><li><code>brew uninstall mongodb</code></li><li><code>brew tap mongodb/brew</code></li><li><code>brew install mongodb-community</code></li><li><code>brew services start mongodb-community</code></li></ul></blockquote><blockquote><p>查看mongodb版本：mongo。<br>接着在终端中输入 <code>mongod</code>,新建终端接着输入<code>mongo</code>，连接成功。</p></blockquote><h3 id="文件路径"><a href="#文件路径" class="headerlink" title="文件路径"></a>文件路径</h3><blockquote><p>配置文件：/usr/local/etc/mongod.conf<br>日志目录路径：/usr/local/var/log/mongodb<br>数据目录路径：/usr/local/var/mongodb</p></blockquote><h3 id="启动-amp-amp-停止-mongodb-community服务器"><a href="#启动-amp-amp-停止-mongodb-community服务器" class="headerlink" title="启动 &amp;&amp; 停止 mongodb-community服务器"></a>启动 &amp;&amp; 停止 mongodb-community服务器</h3><h4 id="mongod作为服务运行"><a href="#mongod作为服务运行" class="headerlink" title="mongod作为服务运行"></a>mongod作为服务运行</h4><blockquote><p><code>brew services start mongodb-community</code><br><code>brew services stop mongodb-community</code></p></blockquote><h4 id="手动启动-mongod"><a href="#手动启动-mongod" class="headerlink" title="手动启动 mongod"></a>手动启动 mongod</h4><blockquote><p><code>mongod --config /usr/local/etc/mongod.conf</code><br>注意：如果您不包含–config带有配置文件路径的选项，则MongoDB服务器没有默认配置文件或日志目录路径，并将使用数据目录路径/data/db。<br>要mongod手动关闭，请使用admin数据库并运行db.shutdownServer()：<br><code>mongo admin --eval &quot;db.shutdownServer()&quot;</code></p></blockquote><h5 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a><a href="https://segmentfault.com/a/1190000020400235" target="_blank" rel="noopener">参考文章</a></h5>]]></content>
      
      
      <categories>
          
          <category> Mac </category>
          
      </categories>
      
      
        <tags>
            
            <tag> brew </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>每周总结第三十期</title>
      <link href="/2020/02/10/issue-30/"/>
      <url>/2020/02/10/issue-30/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本周是2020年的第七个周末。<br>这里记录过去一周，我的一些总结。<br><img src="http://img.liugezhou.online/weekly30.png" alt="weekly-30"></p></blockquote><a id="more"></a><h3 id="Feeling"><a href="#Feeling" class="headerlink" title="Feeling"></a>Feeling</h3><blockquote><p>关注什么就看到什么。自己却还是不知道要干什么。  </p></blockquote><h3 id="一个武汉女生的真实日记"><a href="#一个武汉女生的真实日记" class="headerlink" title="一个武汉女生的真实日记"></a>一个武汉女生的真实日记</h3><blockquote><p>2020年2月11日周一早晨在阅读一篇来自微信公众号”先生手账”的一篇文章时，转瞬被和谐。<br>再次进去时显示：“此内容被投诉且经审核涉嫌侵权，无法查看”，投诉类型为：侵犯知识产权。  </p><p>第一次心理变化是又删文？  </p><p>于是紧接着是去豆瓣查看主人公的日记，发现近期日记只剩下一篇2月3日的。</p><p>第二次心理变化是：豆瓣也删？(之后感觉可能是作者本人删除了)      </p><p>于是接着去微信搜一搜，搜索相关信息，发现好多个转载、摘抄”先生手账”的那篇文章都还在。<br>同时也发现，痛斥这篇文章的文章也好多。<br>痛斥文章的核心论点是：通过检索主人公日记可发现，小杭早已在1月31日的豆瓣广播中做出两点声明：一是不要未经允许使用作者信息公开，自媒体不要未经沟通就自行写此事。二为已发的请撤下删除。<br>第三次心理变化是这个”先生手账”公众号真无良，封的好。  </p><p>结论：真真假假，假假真，一些事情还是搞清楚些，心里边比较舒服一些。</p></blockquote><h3 id="傅颖当场站起来反驳佩洛西，现场响起掌声"><a href="#傅颖当场站起来反驳佩洛西，现场响起掌声" class="headerlink" title="傅颖当场站起来反驳佩洛西，现场响起掌声"></a><a href="https://mp.weixin.qq.com/s/QBOtcSyCtu1o_bJqXEKx9w" target="_blank" rel="noopener">傅颖当场站起来反驳佩洛西，现场响起掌声</a></h3><blockquote><p>上述链接，是2月16日，来自人民日报的一则报道。<br>比较好奇的是佩洛西到底说了什么？</p></blockquote><h3 id="沉默的大多数"><a href="#沉默的大多数" class="headerlink" title="沉默的大多数"></a>沉默的大多数</h3><blockquote><p>本周通读了一遍王小波的《沉默的大多数》，对一些句子做个记录。  </p><ul><li><p>我们这个民族总是有很多的理由封锁知识、钳制思想、灌输善良，因此有很多有才智之士在其一生中丧失了学习、交流、建树的机会，没有得到思想的乐趣就死掉了。  </p></li><li><p>在一切价值判断之中，最坏的一种是：想得太多、太深奥、超过了某些人的理解程度是一种罪恶。我们在体验思想的快乐时，并没有伤害到任何人；不幸的是，总有人觉得自己受了伤害。诚然，这种快乐不是每一个人都能体验到的，但我们不该对此负责任。我看不出有什么理由要取消这种快乐，除非把卑鄙的嫉妒计算在内——这世界上有人喜欢丰富，有人喜欢单纯；我未见过喜欢丰富的人妒恨、伤害喜欢单纯的人，我见到的情形总是相反。    </p></li><li><p>作为一个有过幸福和痛苦两种经历的人，我期望下一代人能在思想方面有些空间来感到幸福，而且这种空间比给我的大得多。而这些呼吁当然是对那些立志要当军代表和道德教师的人而发的。</p></li><li><p>对于学者来说，研究的结论会不会累及自身，是个带有根本性的问题。这主要取决于在学者周围有没有花剌子模君王类的人。  </p></li><li><p>东西方精神的最大区别在于西方人沉迷于物欲，而东方人精于人与人的关系；前者从征服中得到满足，后者从人与人的相亲相爱中汲取幸福. </p></li><li><p>人得到自己希求的东西就是幸福，那就言之成理。倘若说因为某件事是幸福的，所以我们就希求它，那就是错误的.   </p></li></ul></blockquote><h3 id="Chorme-80发布"><a href="#Chorme-80发布" class="headerlink" title="Chorme 80发布"></a>Chorme 80发布</h3><blockquote><p>2020年2月6日，Chrome 80 稳定版（版本号v80.0.3987.87）已正式面向 Windows、macOS、Linux、Android 和 iOS 全平台推送。<br>Chrome 80 值得关注的主要更新如下：</p><ul><li>引入全新的 cookie 分类模型 SameSite</li><li>静默通知</li><li>将所有混合音频和视频资源自动升级为 HTTPS</li><li>移除对 FTP 的支持</li><li>标签分组，每组可配置个性化颜色</li><li>支持 SVG 格式的图像，进一步降低站点资源占用</li><li>上线联系人选取和内容索引 API</li></ul></blockquote><h3 id="codecanyon-net"><a href="#codecanyon-net" class="headerlink" title="codecanyon.net"></a><a href="https://codecanyon.net/" target="_blank" rel="noopener">codecanyon.net</a></h3><blockquote><p>一个代码可以售卖的网站。<br>很多coder上传了各种代码，每个代码都明码标价。</p></blockquote><h3 id="一份炫酷的前端简历"><a href="#一份炫酷的前端简历" class="headerlink" title="一份炫酷的前端简历"></a><a href="https://www.strml.net/?source=imaring.com" target="_blank" rel="noopener">一份炫酷的前端简历</a></h3><blockquote><p>这个网站真酷。</p></blockquote><h3 id="一本全面的node入门文章"><a href="#一本全面的node入门文章" class="headerlink" title="一本全面的node入门文章"></a><a href="https://www.nodebeginner.org/index-zh-cn.html" target="_blank" rel="noopener">一本全面的node入门文章</a></h3><blockquote><p>学习node的启蒙文章。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 每周分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 每周分享 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>每周总结第二十九期</title>
      <link href="/2020/02/08/issue-29/"/>
      <url>/2020/02/08/issue-29/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本周是2020年的第六个周末。<br>这里记录过去一周，我的一些总结。<br><img src="http://img.liugezhou.online/weekly29.png" alt="weekly-29"></p></blockquote><a id="more"></a><h3 id="Feeling"><a href="#Feeling" class="headerlink" title="Feeling"></a>Feeling</h3><blockquote><p>整个新年笼罩在新冠肺炎的乌云下，且尚未出现停止的迹象。<br>期间的突发公共事件让在家安然度过的我们即感动又可恨，即悲伤又愤慨。</p><p>千千万万医务者、奋而往前的共产党官员、奔波在路上的外卖大哥等等等等。<br>这些依然奉献在一线岗位的工作者们令人可敬可佩。</p><p>愿这个病毒尽早被扼杀，愿中华大地早日回归平静，中华民族伟大复兴的口号不仅只是喊响亮，还要一往无前的走下去。    </p></blockquote><h3 id="疫情进展的时间线"><a href="#疫情进展的时间线" class="headerlink" title="疫情进展的时间线"></a><a href="https://github.com/Pratitya/wuhan2020-timeline" target="_blank" rel="noopener">疫情进展的时间线</a></h3><blockquote><p>该项目记录了自2019年12月1日开始，每一天发生的疫情大事记。</p></blockquote><h3 id="新冠肺炎记忆"><a href="#新冠肺炎记忆" class="headerlink" title="新冠肺炎记忆"></a><a href="https://github.com/2019ncovmemory/nCovMemory" target="_blank" rel="noopener">新冠肺炎记忆</a></h3><blockquote><p>报道、非虚构与个人叙述（持续更新）.<br>此处收集内地各类传媒和公众号发布（原创或转载）的有关新型冠状病毒感染的肺炎(2019-nCoV)的深度报道、非虚构作品及亲历者个人叙述.</p></blockquote><h3 id="新冠肺炎传播途径含气溶胶传播"><a href="#新冠肺炎传播途径含气溶胶传播" class="headerlink" title="新冠肺炎传播途径含气溶胶传播"></a>新冠肺炎传播途径含气溶胶传播</h3><blockquote><p>目前可以确定的新冠肺炎传播途径主要为直接传播、气溶胶传播和接触传播。<br>气溶胶传播是指飞沫混合在空气中，形成气溶胶，吸入后导致感染。<br>气溶胶传播是目前人类已知的最顶级的传播方式，尤其在封闭空间，堪称大杀器。  </p><p>随后<a href="https://mp.weixin.qq.com/s/0M0rXT2lYYIAJAKXSqE3Yg" target="_blank" rel="noopener">该文</a>被企鹅辟谣。</p></blockquote><h3 id="实时更新：你的定制防疫地图"><a href="#实时更新：你的定制防疫地图" class="headerlink" title="实时更新：你的定制防疫地图"></a><a href="https://z.cbndata.com/2019-nCoV/index.html?from=groupmessage&isappinstalled=0" target="_blank" rel="noopener">实时更新：你的定制防疫地图</a></h3><blockquote><p>输入地址查看周边疫情。</p></blockquote><h3 id="天通系统"><a href="#天通系统" class="headerlink" title="天通系统"></a><a href="https://toutiao.china.com/t_5Y2r5pif55S16K-dfOWkqemAmuezu-e7nw.html" target="_blank" rel="noopener">天通系统</a></h3><blockquote><p>2020年1月10日，由我国自主建设的第一个卫星移动通信系统——天通系统，正式面向全社会提供服务。<br>目前，天通卫星移动通信系统已经实现对我国领土、领海的全面覆盖，可广泛应用于海洋渔业、应急救援等多个场景。在服务区内，用户可以使用话音、短信、数据通信及位置服务。<br>该系统由中国电信独家运营，号段为1740.</p></blockquote><h3 id="从零开始学K线：新手入门、洞悉K线、股市获利之道-唐韩"><a href="#从零开始学K线：新手入门、洞悉K线、股市获利之道-唐韩" class="headerlink" title="从零开始学K线：新手入门、洞悉K线、股市获利之道(唐韩)"></a>从零开始学K线：新手入门、洞悉K线、股市获利之道(唐韩)</h3><blockquote><p>微信读书上一本关于K线入门的书籍。</p><p>以下是书中关于多方占优型给出的一些名词或口诀：<br>“阴后收阳，次日逞强”这一口诀是对好友反攻、曙光初现、旭日东升、阳吞阴这4种图形的归纳总结。<br>多方炮，架的高，股价只是半山腰。<br>红三兵、三个白武士、连续跳空三阳线。  </p></blockquote><h3 id="反思"><a href="#反思" class="headerlink" title="反思"></a>反思</h3><blockquote><p> 如果尖锐的批评完全消失，温和的批评将会变得刺耳。如果温和的批评也不被允许，沉默将被认为居心叵测。如果沉默也不再允许，赞扬不够卖力将是一种罪行。如果只允许一种声音存在，那么，唯一存在的那个声音就是谎言。<br><cite>——柏拉图</cite> </p><p>真的猛士，敢于直面惨淡的人生，敢于正视淋漓的鲜血。这是怎样的哀痛者和幸福者？然而造化又常常为庸人设计，以时间的流逝，来洗涤旧迹，仅使留下淡红的血色和微漠的悲哀。在这淡红的血色和微漠的悲哀中，又给人暂得偷生，维持着这似人非人的世界。我不知道这样的世界何时是一个尽头！<br><cite>——纪念刘和珍君</cite> </p></blockquote><h3 id="undraw"><a href="#undraw" class="headerlink" title="undraw"></a><a href="https://undraw.co/illustrations" target="_blank" rel="noopener">undraw</a></h3><blockquote><p>一个免费的插图网站，可以在上面寻找合适的插图，用于商业用途</p></blockquote><h3 id="微信公号一家独大"><a href="#微信公号一家独大" class="headerlink" title="微信公号一家独大"></a>微信公号一家独大</h3><blockquote><p>实在想不明白到底是什么原因，上述文章在公众平台就发不出去，里面的内容究竟是什么不可言说的？没有反动，没有传播谣言，没有负能量，没有说那些不能说的，究竟是什么审查机制，让我纯纯的记录一下周总结都这么困难。</p></blockquote><blockquote><p>自六个周公号被封后，我深知不能谈论政治，不能写不让人关注的东西，基本上不写自己的想法。我着眼于小小的记录，也是为了每周给自己一个交代，可以每天去关注一些东西。</p></blockquote><blockquote><p>即使经常看到各种删文，也还在将心中的愤恨慢慢淡化，可是这种互联网环境真的是一次次的让人失望。</p></blockquote><blockquote><p>左耳朵耗子在他的一篇关于科学上网的博文中写的一段话，真是越来越深有感触：</p></blockquote><blockquote><p>是的，我的互联网不是——全是骗子的百度、充满广告的微信朋友圈、质量低下的公众号、娱乐至死的新浪微博、只有抖机灵和“怎么看XX”的知乎、毫无营养的今日头条…… 在这样的网络空间里，我真的无法生存…… 这根本不是互联网，不是为我服务的互联网，而是在消费我的互联网，是让我变傻变笨的互联网…… 我不能忍，因为它影响到了我的生存……</p></blockquote><blockquote><p> 删文与我而言并没有什么,仅仅是一篇记录发送不出去而已。</p></blockquote><blockquote><p>但对那些靠写作为生的人们，删文不仅仅是声誉的受损，也是对他们价值观、生活观的显性否定，一个人究竟有多恶毒或者给社会带来多么恶劣的影响，才会被封杀、删文。</p></blockquote><blockquote><p>进入21世纪，除了每天的经济高速发展，是否能给人们一点精神生活的安慰？再不见文学大家，再没有思想家。</p></blockquote><blockquote><p>李文亮医师的事情才刚刚发生，背后的映射是什么？网警们、网络审查官们、互联网封锁者，你们都不反思的吗？</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 每周分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 每周分享 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>每周总结第二十八期</title>
      <link href="/2020/01/16/issue-28/"/>
      <url>/2020/01/16/issue-28/</url>
      
        <content type="html"><![CDATA[<blockquote><p>这里记录过去一周，我的一些总结。<br><img src="http://img.liugezhou.online/weekly28.jpeg" alt="weekly-28"></p></blockquote><a id="more"></a><h3 id="Feeling"><a href="#Feeling" class="headerlink" title="Feeling"></a>Feeling</h3><blockquote><p>在追随心中mentor的脚步前，要先找到他。    </p></blockquote><h3 id="龙头白马股"><a href="#龙头白马股" class="headerlink" title="龙头白马股"></a>龙头白马股</h3><blockquote><p>一位财经大V准备了一份名单，筛选了12个龙头白马股，是白的不能再白的那种，业内公认的超级行业龙头，每一个股票，你一听名字，就知道它肯定是白马股，因为如雷贯耳。<br>按这位大V的介绍，这12个龙头白马股，稳定的如老狗，很适合定投，常年锁定不动。下面为这12支股票代码以及截止本周的数据：   </p><table><thead><tr><th align="left">股票名称、代码</th><th align="left">现价</th></tr></thead><tbody><tr><td align="left">贵州茅台(600519)</td><td align="left">1107.50</td></tr><tr><td align="left">五粮液(000858)</td><td align="left">138.55</td></tr><tr><td align="left">工商银行(601398)</td><td align="left">5.82</td></tr><tr><td align="left">中国平安(601318)</td><td align="left">86.25</td></tr><tr><td align="left">格力电器(000651)</td><td align="left">167.91</td></tr><tr><td align="left">美的集团(000333)</td><td align="left">60.31</td></tr><tr><td align="left">云南白药(000538)</td><td align="left">87.16</td></tr><tr><td align="left">片仔癀(6005436)</td><td align="left">123.38</td></tr><tr><td align="left">伊利股份(600887)</td><td align="left">32.88</td></tr><tr><td align="left">海螺水泥(600585)</td><td align="left">52.13</td></tr><tr><td align="left">海康威视(002415)</td><td align="left">35.67</td></tr><tr><td align="left">恒瑞医药(600276)</td><td align="left">90.66</td></tr></tbody></table></blockquote><h3 id="Think-Different"><a href="#Think-Different" class="headerlink" title="Think Different"></a>Think Different</h3><blockquote><p>Think Different（非同凡想）是广告公司TBWA\Chiat\Day纽约分支办公室于1997年后期为苹果公司创作的广告口号，曾用于知名的电视广告、数个广告印刷品以及数个苹果公司产品的电视广告与广告印刷品中。苹果公司在2002年的Switch广告活动开始后停止使用这个口号。 </p><iframe height="498" width="510" src="https://v.qq.com/x/page/g0183nh7j59.html" frameborder="0" allowfullscreen></iframe></blockquote><h3 id="我对中国科技行业的看法-译文"><a href="#我对中国科技行业的看法-译文" class="headerlink" title="我对中国科技行业的看法(译文)"></a><a href="http://www.ruanyifeng.com/blog/2020/01/china-technology-review.html" target="_blank" rel="noopener">我对中国科技行业的看法(译文)</a></h3><blockquote><p><a href="https://twitter.com/danwwang" target="_blank" rel="noopener">@danwwang</a> 是彭博社的一个技术分析师，写了一篇2019年回顾，详细谈了他对中国科技行业、中美贸易战的看法。<br>这篇文章总体比较客观，中国的劣势和优势都谈到了。这篇文章是阮一峰老师翻译的主要部分。</p></blockquote><h3 id="网站挂了吗"><a href="#网站挂了吗" class="headerlink" title="网站挂了吗"></a><a href="https://gualemang.com/" target="_blank" rel="noopener">网站挂了吗</a></h3><blockquote><p>该网站检测网站是否运正常。<br><img src="http://img.liugezhou.online/weekly28gualema.png" alt="gualema"></p></blockquote><h3 id="Shadowsocks"><a href="#Shadowsocks" class="headerlink" title="Shadowsocks"></a><a href="https://vc2tea.com/whats-shadowsocks/" target="_blank" rel="noopener">Shadowsocks</a></h3><blockquote><p>写给非专业人士看的 Shadowsocks 简介.</p></blockquote><h3 id="你真的会高效的在GitHub搜索开源项目吗"><a href="#你真的会高效的在GitHub搜索开源项目吗" class="headerlink" title="你真的会高效的在GitHub搜索开源项目吗?"></a><a href="https://mp.weixin.qq.com/s/YM4Zy-GJFsS_fgLogZdRfg" target="_blank" rel="noopener">你真的会高效的在GitHub搜索开源项目吗?</a></h3><blockquote><p>做为一个为万千工程师提供服务的网站,这篇文章介绍了如何高效在Github上搜索项目。 </p><ul><li>in:name liugezhou —- 查找仓库名称包含 liugezhou 的仓库. </li><li>in:descripton node —- 搜索项目描述包含node的内容。    </li><li>in:readme 关键词    </li><li>stars(fork):&gt;10000 Vue —- 搜索 star 数大于 10000 的 Vue仓库.    </li><li>size:&gt;=5000 node  </li><li>pushed:&gt;2020-01-15 Vue —- 指定更新时间在哪个时间前或后在提交的项目。<br>等等。</li></ul></blockquote><h3 id="Github粉丝排行榜"><a href="#Github粉丝排行榜" class="headerlink" title="Github粉丝排行榜"></a><a href="https://wangchujiang.com/github-rank/index.html" target="_blank" rel="noopener">Github粉丝排行榜</a></h3><blockquote><p>Github粉丝排行榜，目前来说，从全球来看，超过三千粉丝可以排名500位以内。</p></blockquote><h3 id="VS-Code-自带神器插件–替代Postman"><a href="#VS-Code-自带神器插件–替代Postman" class="headerlink" title="VS Code 自带神器插件–替代Postman"></a><a href="https://juejin.im/post/5e2067f7f265da3e405028fb?from=timeline&isappinstalled=0&scene=2&clicktime=1579229784&enterid=1579229784" target="_blank" rel="noopener">VS Code 自带神器插件–替代Postman</a></h3><blockquote><p>接口调试是每一个软件开发从业者必不可少的一项技能，一个项目的完成必然经过大量的接口测试，实际开发过程中，接口调试的时间不比实际开发所用的时间少。<br>作为前端开发人员，我们通常使用 Postman（或 PostWoman 等 ） 工具来进行REST API调用。<br><code>REST Client</code> 是一个 VS Code 扩展插件，它允许你发送 HTTP 请求并直接在 VS Code 上查看响应结果。    </p><p>这篇文章对比了Postman与该插件的优劣，并总结了一些使用方法。   </p></blockquote><h3 id="Node-js-colors包"><a href="#Node-js-colors包" class="headerlink" title="Node.js colors包"></a>Node.js colors包</h3><blockquote><p>语法高亮可帮助我们管理代码的复杂性。<br>colors包(npm install colors)为控制台输出带来了类似的好处，使得我们更容了解发生了什么。<br>它也是最常用的NPM包之一。<br>它向本地JavaScript字符串添加函数，以便可以执行诸如“some string”.red之类的操作。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 每周分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 每周分享 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>browserslist</title>
      <link href="/2020/01/13/browserslist/"/>
      <url>/2020/01/13/browserslist/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本博文是翻译：<a href="https://github.com/browserslist/browserslist的内容。" target="_blank" rel="noopener">https://github.com/browserslist/browserslist的内容。</a></p><a id="more"></a></blockquote><h5 id="Vue-cli官方文档开发模块的浏览器兼容这一块，提到了browserslist，原文如下："><a href="#Vue-cli官方文档开发模块的浏览器兼容这一块，提到了browserslist，原文如下：" class="headerlink" title="Vue-cli官方文档开发模块的浏览器兼容这一块，提到了browserslist，原文如下："></a>Vue-cli官方文档开发模块的浏览器兼容这一块，提到了browserslist，原文如下：</h5><blockquote><p>你会发现有 <code>package.json</code> 文件里的 <code>browserslist</code> 字段 (或一个单独的 <code>.browserslistrc</code> 文件)，指定了项目的目标浏览器的范围。这个值会被 <a href="https://new.babeljs.io/docs/en/next/babel-preset-env.html" target="_blank" rel="noopener">@babel/preset-env</a> 和 <a href="https://github.com/postcss/autoprefixer" target="_blank" rel="noopener">Autoprefixer</a> 用来确定需要转译的 JavaScript 特性和需要添加的 CSS 浏览器前缀。</p><p>现在查阅<a href="https://github.com/ai/browserslist" target="_blank" rel="noopener">这里</a>了解如何指定浏览器范围。</p></blockquote><h6 id="下面是来自：https-github-com-ai-browserslist的官方文档翻译的内容："><a href="#下面是来自：https-github-com-ai-browserslist的官方文档翻译的内容：" class="headerlink" title="下面是来自：https://github.com/ai/browserslist的官方文档翻译的内容："></a>下面是来自：<a href="https://github.com/ai/browserslist的官方文档翻译的内容：" target="_blank" rel="noopener">https://github.com/ai/browserslist的官方文档翻译的内容：</a></h6><hr><h2 id="Browserslist"><a href="#Browserslist" class="headerlink" title="Browserslist"></a>Browserslist</h2><blockquote><p>在不同的前端工具之间共享目标浏览器和Node.js版本的配置。它用于:</p><ul><li><a href="https://github.com/postcss/autoprefixer" target="_blank" rel="noopener">Autoprefixer</a></li><li><a href="https://github.com/babel/babel/tree/master/packages/babel-preset-env" target="_blank" rel="noopener">Babel</a></li><li><a href="https://github.com/jonathantneal/postcss-preset-env" target="_blank" rel="noopener">postcss-preset-env</a></li><li><a href="https://github.com/amilajack/eslint-plugin-compat" target="_blank" rel="noopener">eslint-plugin-compat</a></li><li><a href="https://github.com/ismay/stylelint-no-unsupported-browser-features" target="_blank" rel="noopener">stylelint-no-unsupported-browser-features</a></li><li><a href="https://github.com/jonathantneal/postcss-normalize" target="_blank" rel="noopener">postcss-normalize</a></li><li><a href="https://github.com/ElemeFE/obsolete-webpack-plugin" target="_blank" rel="noopener">obsolete-webpack-plugin</a></li></ul></blockquote><blockquote><p>当您将以下内容添加到package.json文件中时，所有工具都会自动找到目标浏览器:</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&quot;browserslist&quot;: [</span><br><span class="line">  &quot;defaults&quot;,</span><br><span class="line">  &quot;not IE 11&quot;,</span><br><span class="line">  &quot;not IE_Mob 11&quot;,</span><br><span class="line">  &quot;maintained node versions&quot;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><blockquote><p>或者在 .browserslistrc 配置文件中配置：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># Browsers that we support</span><br><span class="line"></span><br><span class="line">defaults</span><br><span class="line">not IE 11</span><br><span class="line">not IE_Mob 11</span><br><span class="line">maintained node versions</span><br></pre></td></tr></table></figure><blockquote><p>开发人员在设置版本列表后，比如设置了<code>last 2 version</code>(最后2个版本)，可以避免手动更新版本.<br>Browserslist将从配置文件中去查找：browserslist配置文件，.browserslistrc配置文件，或者package.json文件中的browserslist字段，或者各种环境配置等。<br><a href="https://github.com/browserslist/browserslist-example" target="_blank" rel="noopener">Browserslist Example</a>这个仓库显示了各个工具如何使用Browserslist。</p></blockquote><h3 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h3><blockquote><ol><li>工具   </li><li>最佳实践   </li><li>查询指令   </li><li>配置文件   </li><li>可共享的配置   </li><li>不同环境下的配置</li><li>自定义使用数据 </li><li>JS API</li><li>环境变量   </li><li>缓存  </li></ol></blockquote><h3 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h3><blockquote><ul><li><a href="https://browserl.ist/" target="_blank" rel="noopener">browserl.ist</a> 是用于检查某些查询将选择哪些浏览器的在线工具.     </li><li><code>browserslist-ga</code> and <code>browserslist-ga-export</code> download your website browsers statistics to use it in &gt; 0.5% in my stats query. </li><li>browserslist-useragent-regexp将Browserslist查询编译到RegExp以测试浏览器useragent。  </li><li>browserslist-useragent-ruby是一个Ruby库，用于按用户代理字符串检查浏览器是否与Browserslist相匹配。   </li><li>browserslist-browserstack为Browserslist配置中的所有浏览器运行BrowserStack测试。 </li><li>caniuse-api返回支持某些特定功能的浏览器.<br>在项目目录中运行<code>npx browserslist</code>以查看项目的目标浏览器。 此CLI工具是内置的，可在具有Autoprefixer的任何项目中使用.</li></ul></blockquote><h3 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h3><blockquote><ul><li>下面是一个默认查询，它为大多数用户提供了合理的配置：  </li></ul></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&quot;browserslist&quot;:&#123;</span><br><span class="line">    defaults</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><ul><li>如果要更改我们推荐的默认浏览器集，请将 <code>last 2 versions</code>、<code>not dead</code> 与使用编号（如 <code>&gt;0.2%</code>）合并。这是因为  <code>last n versions</code> 本身不会添加流行的旧版本，而只使用高于 0.2% 的百分比，从长远来看，会使流行的浏览器更受欢迎。就像我们使用Internet Explorer 6一样，我们可能会陷入垄断和停滞状态。请谨慎使用此设置。    </li><li>仅当您使用一个浏览器为信息资讯制作网络应用程序时，才直接选择浏览器（最近2个Chrome版本）。 市场上有很多浏览器。 如果您要制作通用的Web应用程序，则应尊重浏览器的多样性。  </li><li>不要因为不了解浏览器就删除它们。Opera Mini在非洲拥有1亿用户，在全球市场上比微软Edge更受欢迎。中国QQ浏览器的市场份额比Firefox和Safari加起来还要大。</li></ul></blockquote><h3 id="查询指令"><a href="#查询指令" class="headerlink" title="查询指令"></a>查询指令</h3><blockquote><p>Browserslist将使用来自以下来源之一的浏览器和Node.js版本查询:  </p><ul><li>当前目录或父目录中package.json文件中的<code>browserslist</code>字段配置。 我们建议采用这种方式。   </li><li>在<code>.browserslistrc</code>或者<code>browserslist</code>配置文件中配置。 </li><li>BROWSERSLIST环境变量中配置。    </li><li>如果以上方法未产生有效结果，则Browserslist将使用默认值:<code>&gt;0.5%,last 2 versions,Firefox ESR,not dead</code>.    </li></ul></blockquote><h3 id="组合查询"><a href="#组合查询" class="headerlink" title="组合查询"></a>组合查询</h3><blockquote><p>or组合器可以使用关键字<code>or</code>或者使用<code>,</code>,<code>last 1 version or &gt;1%</code>与<code>last 1 version , &gt;1%</code>的表示方式是一样的。<br><code>and</code>支持查询组合来执行前一个查询的交集:<code>last 1 version and &gt;1%</code><br>如下所示，有3种不同的方法来组合查询。首先，您从单个查询开始，然后我们将这些查询组合起来以得到最终的列表:<br>显然，您不能从<code>not</code>组合器开始，因为没有左侧查询可以将其与之合并。</p></blockquote><table><thead><tr><th align="left">查询组合器类型</th><th align="left">图表表示</th><th align="left">示例</th></tr></thead><tbody><tr><td align="left">or/, combiner (union)</td><td align="left">并集</td><td align="left">&gt; .5% or last 2 versions /  &gt; .5%, last 2 versions</td></tr><tr><td align="left">and combiner (intersection)</td><td align="left">交集</td><td align="left">&gt; .5% and last 2 versions</td></tr><tr><td align="left">not combiner (relative complement)</td><td align="left">not</td><td align="left">&gt; .5% and not last 2 versions /    .5% or not last 2 versions /   .5%, not last 2 versions</td></tr></tbody></table><blockquote><p>测试查询的一种快速方法是在终端中执行<code>npx browserslist &#39;&gt; 0.5%, not IE 11&#39;</code>。</p></blockquote><h4 id="全部列表"><a href="#全部列表" class="headerlink" title="全部列表"></a>全部列表</h4><blockquote><p>可以通过查询指定浏览器和Node.js版本(不区分大小写):    </p><ul><li>defaults: Browserslist’s default browsers (&gt; 0.5%, last 2 versions, Firefox ESR, not dead). </li><li><code>&gt;</code> 5%: browsers versions selected by global usage statistics. &gt;=, &lt; and &lt;= work too.</li></ul></blockquote><h3 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h3><blockquote><p>在终端中运行<code>npx browserslist</code>命令，查看您的查询选择了哪些浏览器：    </p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">and_chr 78</span><br><span class="line">and_ff 68</span><br><span class="line">and_qq 1.2</span><br><span class="line">and_uc 12.12</span><br><span class="line">android 76</span><br><span class="line">baidu 7.12</span><br><span class="line">chrome 79</span><br><span class="line">chrome 78</span><br><span class="line">chrome 77</span><br><span class="line">chrome 49</span><br><span class="line">edge 18</span><br><span class="line">edge 17</span><br><span class="line">firefox 71</span><br><span class="line">firefox 70</span><br><span class="line">firefox 68</span><br><span class="line">ie 11</span><br><span class="line">ie_mob 11</span><br><span class="line">ios_saf 13.3</span><br><span class="line">ios_saf 13.2</span><br><span class="line">ios_saf 13.0-13.1</span><br><span class="line">ios_saf 12.2-12.4</span><br><span class="line">kaios 2.5</span><br><span class="line">op_mini all</span><br><span class="line">op_mob 46</span><br><span class="line">opera 64</span><br><span class="line">opera 63</span><br><span class="line">safari 13</span><br><span class="line">safari 12.1</span><br><span class="line">safari 5.1</span><br><span class="line">samsung 10.1</span><br><span class="line">samsung 9.2</span><br></pre></td></tr></table></figure><h3 id="浏览器"><a href="#浏览器" class="headerlink" title="浏览器"></a>浏览器</h3><blockquote><p>名称不区分大小写：    </p><ul><li>Android for Android WebView.</li><li>Baidu for Baidu Browser.</li><li>BlackBerry or bb for Blackberry browser.</li><li>Chrome for Google Chrome.</li><li>ChromeAndroid or and_chr for Chrome for Android</li><li>Edge for Microsoft Edge.</li><li>Electron for Electron framework. It will be converted to Chrome version.</li><li>Explorer or ie for Internet Explorer.</li><li>ExplorerMobile or ie_mob for Internet Explorer Mobile.</li><li>Firefox or ff for Mozilla Firefox.</li><li>FirefoxAndroid or and_ff for Firefox for Android.</li><li>iOS or ios_saf for iOS Safari.</li><li>Node for Node.js.</li><li>Opera for Opera.</li><li>OperaMini or op_mini for Opera Mini.</li><li>OperaMobile or op_mob for Opera Mobile.</li><li>QQAndroid or and_qq for QQ Browser for Android.</li><li>Safari for desktop Safari.</li><li>Samsung for Samsung Internet.</li><li>UCAndroid or and_uc for UC Browser for Android.</li><li>kaios for KaiOS Browser.</li></ul></blockquote><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><h5 id="package-json"><a href="#package-json" class="headerlink" title="package.json"></a>package.json</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;private&quot;: true,</span><br><span class="line">  &quot;dependencies&quot;: &#123;</span><br><span class="line">    &quot;autoprefixer&quot;: &quot;^6.5.4&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;browserslist&quot;: [</span><br><span class="line">    &quot;last 1 version&quot;,</span><br><span class="line">    &quot;&gt; 1%&quot;,</span><br><span class="line">    &quot;IE 10&quot;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="browserslistrc"><a href="#browserslistrc" class="headerlink" title=".browserslistrc"></a>.browserslistrc</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># Browsers that we support</span><br><span class="line"></span><br><span class="line">last 1 version</span><br><span class="line">&gt; 1%</span><br><span class="line">IE 10 # sorry</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 文档翻译 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> browserslist </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>每周总结第二十七期</title>
      <link href="/2020/01/10/issue-27/"/>
      <url>/2020/01/10/issue-27/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本周是2020年的第二个周末。<br>这里记录过去一周，我的一些总结。  </p><p><img src="http://img.liugezhou.online/weekly27.jpeg" alt="weekly-27">       </p><center>小狗钱钱</center></blockquote><a id="more"></a><h3 id="Feeling"><a href="#Feeling" class="headerlink" title="Feeling"></a>Feeling</h3><blockquote><p>《小狗钱钱》是由四川少年儿童出版社出版的一本图书。<br>由王钟欣、余茜合译的一部来自德国作家博多～舍费尔(Bodo Schaffer)的作品。 </p><p>这是一部很有意思的理财启蒙书籍，短小精悍，很值得花几个小时一看。<br>我跟着书中的思路游走，发现了一件特别有意思的事：</p><p>开始小狗钱钱让我们的小女主人公列出十个愿望。<br>于是,我也随之去想我的十个愿望，想了很长时间，天马行空扯开的去做梦，最后也才想到八个。<br>这其中很有韵味、很有意思的一件事就是去想这十个愿望的过程。  </p><p>在每想一个愿望的历程中，都在无比的考验你对这个世界、对自己的一些认知，发散思维激发想象力。</p><p>书中讲到的愿望相册、成功日记、理财的一些小知识、一些鸡汤等等都非常的耐人寻味。    </p><p>推荐我的朋友们读一读。</p></blockquote><h3 id="vlog达人张子贺"><a href="#vlog达人张子贺" class="headerlink" title="vlog达人张子贺"></a><a href="https://space.bilibili.com/89944567?spm_id_from=333.788.b_765f7570696e666f.1" target="_blank" rel="noopener">vlog达人张子贺</a></h3><blockquote><p>「每30天学会一个新技能、新知识，并用文字和视频分享教程和指南。」   </p><p>本周看了这个vlog博主的几个视频，里面讲到Rap、冥想、谷歌面试、远离手机等等挑战以及他之前的一些分享。<br>获益匪浅，很是漂亮。期待下一个30天挑战。<br><cite>公众号《张子贺》</cite></p></blockquote><h3 id="北京公积金提取申请人可以网上办理"><a href="#北京公积金提取申请人可以网上办理" class="headerlink" title="北京公积金提取申请人可以网上办理"></a><a href="http://www.gov.cn/xinwen/2020-01/09/content_5467875.htm" target="_blank" rel="noopener">北京公积金提取申请人可以网上办理</a></h3><blockquote><p>2020年1月10日起，北京公积金提取申请人可以网上办理。<br>北京住房公积金网：<a href="http://gjj.beijing.gov.cn/" target="_blank" rel="noopener">http://gjj.beijing.gov.cn/</a>  </p><p><cite> <a href="http://gjj.beijing.gov.cn/web/zwgk/_300583/zxzysx/675803/index.html" target="_blank" rel="noopener">官网公告</a></cite></p></blockquote><h3 id="2020微信公开课PRO"><a href="#2020微信公开课PRO" class="headerlink" title="2020微信公开课PRO"></a><a href="https://baijiahao.baidu.com/s?id=1655219878385555103&wfr=spider&for=pc" target="_blank" rel="noopener">2020微信公开课PRO</a></h3><blockquote><p>1月9日，2020微信公开课PRO在广州举行。</p><ul><li>2020年1月9日，小程序框架正式开放，可支持小程序在硬件运行. </li><li>2020年1月10日，小程序“订阅消息”能力上线，</li></ul></blockquote><h3 id="深海网站"><a href="#深海网站" class="headerlink" title="深海网站"></a><a href="https://neal.fun/deep-sea/" target="_blank" rel="noopener">深海网站</a></h3><blockquote><p>这个网站可以不停往下拉，看看每个深度的海底都有些什么生物,可以一直拉到10000多一点米。<br>对于海洋、水下世界感兴趣的人儿来说，这真是一个不错的网站。      </p></blockquote><h3 id="isometric-Contributions"><a href="#isometric-Contributions" class="headerlink" title="isometric Contributions"></a>isometric Contributions</h3><blockquote><p>这个插件有点酷 ，Isometric Contributions：它可以让我们 Github 的贡献图变成 3D 效果：</p><p><img src="http://img.liugezhou.online/weekly27Github.png" alt="浏览器插件"></p></blockquote><h3 id="zsh-和-bash的区别-以及切换"><a href="#zsh-和-bash的区别-以及切换" class="headerlink" title="zsh 和 bash的区别 以及切换"></a>zsh 和 bash的区别 以及切换</h3><blockquote><p>从 macOS Catalina Beta 版开始，zsh (Z shell) 是所有新建用户帐户的默认 Shell。<br>zsh完美兼容bash，并且有比bash更强大的功能，用起来也比bash更优雅。</p><p>切换bash与zsh命令，在终端中输入：<code>chsh -s /bin/zsh</code>或者<code>chsh -s /bin/bash</code>。    </p><p>切换zsh后，shell由原来的bash变成了zsh，打开终端，发现终端中名字重复显示、或者其他异常显示情况，修改为： </p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">touch ~/.zshrc</span><br><span class="line">echo &quot;export PS1=&apos;%n %c $&apos;&quot; &gt;&gt; ~/.zshrc</span><br><span class="line">source ~/.zshrc</span><br></pre></td></tr></table></figure><blockquote><p>最后，如果你在bash命令行下的<code>.bash_profile</code>文件中有maven等的配置，需要添加至<code>.zshrc</code>中。</p></blockquote><h3 id="Mithril框架入门"><a href="#Mithril框架入门" class="headerlink" title="Mithril框架入门"></a><a href="https://mithril.js.org/" target="_blank" rel="noopener">Mithril框架入门</a></h3><blockquote><p>Mithril 是一个前端 JS 框架，只有 9.5KB，如果你感到 React 或 Vue 太重，应该看看这个框架。<br>Github Star数：11930.</p><p>周末在家花了一些时间，翻译了一下官方文档的介绍和安装使用模块，提交至:<a href="https://github.com/liugezhou/Mithril" target="_blank" rel="noopener">https://github.com/liugezhou/Mithril</a></p></blockquote><h3 id="npm-init-–yes"><a href="#npm-init-–yes" class="headerlink" title="npm init –yes"></a>npm init –yes</h3><blockquote><p>npm init 命令用来初始化一个简单的 package.json 文件。<br>而如果想要偷懒步免去一直按 enter，在命令后追加 –yes 参数即可，其作用与一路下一步相同。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm init --yes</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 每周分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 每周分享 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>每周总结第二十六期</title>
      <link href="/2020/01/05/issue-26/"/>
      <url>/2020/01/05/issue-26/</url>
      
        <content type="html"><![CDATA[<blockquote><p>这里记录过去一周，我的一些总结。<br><img src="http://img.liugezhou.online/weekly26.png" alt="weekly-26"></p></blockquote><a id="more"></a><h3 id="Feeling"><a href="#Feeling" class="headerlink" title="Feeling"></a>Feeling</h3><blockquote><p>2019年年初定了些目标，下面是一些可以量化的年初计划以及完成情况：</p><table><thead><tr><th align="left">19年年初目标</th><th align="center">完成情况</th><th align="center">完成占比</th></tr></thead><tbody><tr><td align="left">学完Vue.js开发音乐WebAPP</td><td align="center">粗略勉强学完</td><td align="center">70%</td></tr><tr><td align="left">简书粉丝达到300</td><td align="center">粉丝198</td><td align="center">66%</td></tr><tr><td align="left">简书获得2500个喜欢</td><td align="center">获得1212个喜欢</td><td align="center">49%</td></tr><tr><td align="left">简书文章目标200篇</td><td align="center">完成44篇</td><td align="center">22%</td></tr><tr><td align="left">读书清单</td><td align="center">乱七八糟</td><td align="center">10%</td></tr><tr><td align="left">学习Python,完成Python两个专题的文章</td><td align="center">未学习</td><td align="center">0%</td></tr><tr><td align="left">学完Vue.js源码</td><td align="center">未学习</td><td align="center">0%</td></tr><tr><td align="left">整理100个前端方面的知识</td><td align="center">未开始</td><td align="center">0%</td></tr></tbody></table><p>下面是2019年可以量化的额外收获：    </p><table><thead><tr><th align="left">内容</th><th align="center">量化</th></tr></thead><tbody><tr><td align="left">重新搭建 个人博客</td><td align="center">完成日志61篇</td></tr><tr><td align="left">英语百词斩背单词</td><td align="center">坚持天数187天</td></tr><tr><td align="left">【六个周】公众号被封，转战【Dangerous Wakaka】</td><td align="center">18篇周总结，与个人博客冲突</td></tr><tr><td align="left">Github代码提交天数</td><td align="center">231Day</td></tr></tbody></table><p>总结：2019年是初尝试的一年，不禁感觉时间飞快，年初稀里糊涂定的小目标早已遗忘，每天在坚持做的一些事情，也是缺少动力激情下在苟延残喘。但即使做的不好，也要继续坚持做下去，除了更加用心以外，也希望量变可以引起质变，下面是刚刚想到的2020年的一些小目标。    </p><table><thead><tr><th align="left">新年目标</th><th align="center">量化标准</th></tr></thead><tbody><tr><td align="left">Github代码提交全绿</td><td align="center">完成天数/总天数为完成比率</td></tr><tr><td align="left">英语百词斩每日背一会单词</td><td align="center">总天数/打卡天数</td></tr><tr><td align="left">每周总结</td><td align="center">总周数/完成周数</td></tr><tr><td align="left">优化博客</td><td align="center">博客的重新搭建或者继续构建</td></tr><tr><td align="left">Node.js技术栈</td><td align="center">有关node的技术文章、项目等数据</td></tr><tr><td align="left">Vue.js基础到源码再深入</td><td align="center">源码视频学习、英文文档学习</td></tr></tbody></table></blockquote><h3 id="曼德拉效应"><a href="#曼德拉效应" class="headerlink" title="曼德拉效应"></a>曼德拉效应</h3><blockquote><p>2010年，美国作家菲安娜·布梅（Fiona Broome）惊奇地发现，有“南非国父”之称的南非政治家纳尔逊·曼德拉（Nelson Mandela）竟然还存于人世。而她记得明明在上世纪八十年代，曼德拉就死于狱中。她问过身边的人，也有不少人记得曼德拉早已逝世。</p><p>当2013年12月5日曼德拉因肺部感染去世时，疑惑与惊异再次出现：他不是早就死了吗?<br>这种记忆与现实的割裂，由此得名“曼德拉效应”（Mandela Effect）。</p><p>简单说来，“曼德拉效应”是指集体性的记忆与事实不符的现象。</p><p><cite><a href="https://zhuanlan.zhihu.com/p/55874734" target="_blank" rel="noopener">相关阅读*曼德拉效应背后的时间重置——世界的真相还是伪科学？</a></cite></p></blockquote><h3 id="农村土地确权"><a href="#农村土地确权" class="headerlink" title="农村土地确权"></a>农村土地确权</h3><blockquote><p>土地所有权、土地使用权和他项权利的确认、确定，简称确权。是依照法律、政策的规定确定某一范围内的土地（或称一宗地）的所有权、使用权的隶属关系和他项权利的内容。<br>每宗地的土地权属要经过土地登记申请、地籍调查、核属审核、登记注册、颁发土地证书等土地登记程序，才能得到最后的确认和确定。2013年1月31日下发的中央一号文件提出，全面开展农村土地确权登记颁证工作。<br>2018年3月，我国正式启动农村房屋不动产登记发证试点工作。<br><cite><a href="https://mp.weixin.qq.com/s/9YTzzn1Se8Fzs76HGnlpHg" target="_blank" rel="noopener">相关阅读*武安老家有房的快瞧瞧吧！这6种宅基地将不再属于自己，也无法继承</a></cite></p></blockquote><h3 id="京张高铁2019年12月30日开通运营"><a href="#京张高铁2019年12月30日开通运营" class="headerlink" title="京张高铁2019年12月30日开通运营"></a><a href="http://www.beijing.gov.cn/fuwu/bmfw/jtcx/ggts/t1611464.htm" target="_blank" rel="noopener">京张高铁2019年12月30日开通运营</a></h3><blockquote><p>12月30日，北京至张家口高速铁路(京张高铁)开通运营，崇礼铁路同步建成投用。<br>京张高铁全长174公里，最高设计时速350公里，全线设北京北、清河、沙河(不办理客运)、昌平、八达岭长城、东花园北、怀来、下花园北、宣化北、张家口10座车站。崇礼铁路自京张高铁下花园北站引出，至崇礼区太子城奥运村，线路全长53公里，设计时速250公里。</p></blockquote><h3 id="特斯拉Model3"><a href="#特斯拉Model3" class="headerlink" title="特斯拉Model3"></a>特斯拉Model3</h3><blockquote><p>特斯拉宣布，即日起，特斯拉调整全系Model 3销售政策：中国制造Model 3基础车价从35.58万元下调至32.38万元（包含基础版辅助驾驶功能）。</p><p>同时，根据国家政策，全系Model 3可以享受免征购置税政策，以及2.475万元的新能源补贴金额，中国制造Model 3补贴后售价为29.905万元。</p><p>1月7日，中国制造Model 3将正式对外交付。</p></blockquote><h3 id="gitignore"><a href="#gitignore" class="headerlink" title=".gitignore"></a><a href="https://github.com/github/gitignore" target="_blank" rel="noopener">.gitignore</a></h3><blockquote><p>GitHub 有一个十分详细的针对数十种项目及语言的 .gitignore 文件列表，你可以在 <a href="https://github.com/github/gitignore" target="_blank" rel="noopener">https://github.com/github/gitignore</a> 找到它.</p></blockquote><h3 id="推荐一些-Mac-上比较好用的软件"><a href="#推荐一些-Mac-上比较好用的软件" class="headerlink" title="推荐一些 Mac 上比较好用的软件"></a><a href="https://mp.weixin.qq.com/s/Sgk1f_xgFXphQfGdNAlypw" target="_blank" rel="noopener">推荐一些 Mac 上比较好用的软件</a></h3><blockquote><p>一篇推荐Mac上比较好用的一些工具。</p></blockquote><h3 id="2019年前端大事件回顾：流年笑掷，未来可期"><a href="#2019年前端大事件回顾：流年笑掷，未来可期" class="headerlink" title="2019年前端大事件回顾：流年笑掷，未来可期"></a><a href="https://juejin.im/post/5def782ce51d4558181d27ce" target="_blank" rel="noopener">2019年前端大事件回顾：流年笑掷，未来可期</a></h3><blockquote><p>回顾2019年前端和Web开发的主要事件，新闻和趋势.</p></blockquote><h3 id="CODEOWNERS"><a href="#CODEOWNERS" class="headerlink" title="CODEOWNERS"></a>CODEOWNERS</h3><blockquote><p>提交Github文件时，如果你想让自己提交的每一个文件都有一个owner的标识，可以在项目根目录下添加 CODEOWNERS文件。</p></blockquote><h3 id="2020"><a href="#2020" class="headerlink" title="2020"></a>2020</h3><blockquote><p>2020 = 404 + 404 + 404 + 404+ 404<br>2020 = 1024 + 996</p></blockquote><h3 id="node-js入门"><a href="#node-js入门" class="headerlink" title="node.js入门"></a><a href="https://www.liugezhou.online/2020/01/03/node%E5%85%A5%E9%97%A8/" target="_blank" rel="noopener">node.js入门</a></h3><blockquote><p>最近有一个node服务的项目需要去接手，于是在阅读学习各种有关node的文章，零零总总的看了一些文章，感觉还是一团浆糊，遂整理总结出此文。<br>此文并未加入自己的理解，主要是从网上查阅资料看到的一些入门教程，将教程中的讲解进行重点知识的记录、梳理。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 每周分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 每周分享 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Node入门</title>
      <link href="/2020/01/03/node%E5%85%A5%E9%97%A8/"/>
      <url>/2020/01/03/node%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><hr><blockquote><p>最近有一个node服务的项目需要去接手，于是在阅读学习各种有关node的文章，零零总总的看了一些文章，感觉还是一团浆糊，遂整理总结出此文。<br>此文并未加入自己的理解，主要是从网上查阅资料看到的一些入门教程，将教程中的讲解进行重点知识的记录、梳理。</p></blockquote><a id="more"></a><h3 id="廖雪峰官网的Node-js"><a href="#廖雪峰官网的Node-js" class="headerlink" title="廖雪峰官网的Node.js"></a><a href="https://www.liaoxuefeng.com/wiki/1022910821149312/1023025235359040" target="_blank" rel="noopener">廖雪峰官网的Node.js</a></h3><h4 id="Node-js"><a href="#Node-js" class="headerlink" title="Node.js"></a>Node.js</h4><hr><blockquote><p>在2009年，Ryan正式推出了基于JavaScript语言和V8引擎的开源Web服务器项目，命名为Node.js。虽然名字很土，但是，Node第一次把JavaScript带入到后端服务器开发，加上世界上已经有无数的JavaScript开发人员，所以Node一下子就火了起来。    </p></blockquote><blockquote><p>由于一群开发者对Joyent公司的策略不满(Node幕后一直由Joyent公司资助)，于2014年从Node.js项目fork出了io.js项目，决定单独发展，但两者实际上是兼容的。  </p></blockquote><blockquote><p>“分久必合，合久必分”,Joyent公司表示要和解,io.js项目又决定回归Node.js。    </p></blockquote><blockquote><p>将来io.js将首先添加新的特性，如果大家测试用得爽，就把新特性加入Node.js。io.js是“尝鲜版”，而Node.js是线上稳定版，</p></blockquote><h4 id="安装node-js和npm"><a href="#安装node-js和npm" class="headerlink" title="安装node.js和npm"></a>安装node.js和npm</h4><hr><blockquote><p>首先，从Node.js官网下载对应平台的安装程序.<br>安装完成后，在终端中输出：<code>node -v</code>,显示版本号，说明安装成功。</p></blockquote><blockquote><p>npm是Node.js的包管理工具（package manager）。<br>npm已经在Node.js安装的时候顺带装好了。我们在命令提示符或者终端输入<code>npm -v</code>,显示版本号。</p></blockquote><h4 id="第一个Node程序"><a href="#第一个Node程序" class="headerlink" title="第一个Node程序"></a>第一个Node程序</h4><hr><blockquote><p>命令行模式下，输入<code>node</code>回车，进入Node交互式环境。<br>或者也可以直接<code>node hello.js</code>运行一个.js文件。</p></blockquote><h4 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h4><hr><blockquote><p>在Node环境中，一个.js文件就称之为一个模块（module）。<br>使用模块可以避免函数名和变量名冲突。这是因为：JavaScript是一种<code>函数式编程语言</code>，它支持闭包。如果我们把一段JavaScript代码用一个函数包装起来，这段代码的所有“全局”变量就变成了函数内部的局部变量。而Node加载一个模块，其实就是对代码进行了一层包装。</p></blockquote><blockquote><p>要在模块中对外输出变量，用：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">module.exports = variable;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>输出的变量可以是任意对象、函数、数组等等。<br>要引入其他模块输出的对象，用：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var foo = require(&apos;other_module&apos;);</span><br></pre></td></tr></table></figure></blockquote><blockquote><p> 引入的对象具体是什么，取决于引入模块输出的对象。</p></blockquote><blockquote><p>关于Node.js的模块原理：<br>JavaScript语言本身并没有一种模块机制来保证不同模块可以使用相同的变量名。而是因为由于JavaScript是一种函数式编程语言，它支持闭包，Node加载一个js文件，就相当于把代码包装了一下，原来代码中的全局变量变成了函数内部的局部变量，因此每个模块中定义的全局变量并不会相互干扰。</p></blockquote><h4 id="基本模块"><a href="#基本模块" class="headerlink" title="基本模块"></a>基本模块</h4><hr><blockquote><p>Node.js内置的常用模块是为了实现基本的服务器功能，这些模块在浏览器环境中是无法执行的，因为它们的底层代码是用C/C++在Node.js运行环境中实现的。   </p></blockquote><blockquote><ul><li>global:相当于浏览器环境中的window。<br>在终端中输入node进入node环境，然后输入：<code>for (var k of Object.keys(global)) { console.log(k);}</code>,可以查看输出的结果，以更好理解global。</li></ul></blockquote><blockquote><ul><li>process: 是Node.js提供的一个对象，它代表当前Node.js进程。<br>如果我们想要在下一次事件响应中执行代码，可以调用process.nextTick().</li></ul></blockquote><h4 id="fs"><a href="#fs" class="headerlink" title="fs"></a>fs</h4><hr><blockquote><p>Node.js内置的fs模块是文件系统模块，负责读写文件。<br>fs模块同时提供了异步和同步的方法。 </p></blockquote><h5 id="异步读取文件"><a href="#异步读取文件" class="headerlink" title="异步读取文件"></a>异步读取文件</h5><blockquote><p>异步读取一个文件的代码如下： <code>fs.readFile(&#39;sample.txt&#39;,&#39;utf-8&#39;,function(err, data){})</code><br>异步读取时，传入的回调函数接受两个参数，当正常读取时，err参数为null，data参数为读取到的string。当读取发生错误时，err参数代表一个错误对象，data为undefined。<br>这也是Node.js标准的回调函数：第一个参数代表错误信息，第二个参数代表结果。后面我们会经常用到这种回调函数。 </p></blockquote><blockquote><p>读取二进制文件时，<code>fs.readFile(&#39;demo.png&#39;,function(err, data){}</code><br>不传入文件编码时，回调函数的data返回的是一个Buffer对象。在Node中，Buffer对象就是一个包含零个或任意个字节数的数组(与Array不同)。<br>Buffer对象转换为String：<code>data.toString(&#39;utf-8&#39;)</code>;<br>String对象转换为Buffer：<code>Buffer.from(data,&#39;utf-8&#39;)</code>;  </p></blockquote><h5 id="同步读取文件"><a href="#同步读取文件" class="headerlink" title="同步读取文件"></a>同步读取文件</h5><blockquote><p><code>fs.readFileSync()</code>;</p></blockquote><h5 id="写文件"><a href="#写文件" class="headerlink" title="写文件"></a>写文件</h5><blockquote><p><code>fs.writeFile(&#39;output.txt&#39;,data, function(err){}</code>;<br>writeFile()的参数依次为文件名、数据和回调函数。<br>和readFileSync()类似，写入文件也有一个同步方法：writeFileSync();  </p></blockquote><h5 id="stat"><a href="#stat" class="headerlink" title="stat"></a>stat</h5><blockquote><p>如果我们要获取文件大小、创建时间等信息，可以使用fs.stat()方法，此方法返回一个stat对象，能告诉我们目录文件详细信息。<br>是否是文件：<code>stat.isFile()</code>;<br>是否是目录：<code>stat.isDirectory()</code>;<br>若是文件，文件大小： <code>stat.size</code>;<br>若是文件，文件创建时间：<code>stat.birthtime</code>;<br>若是文件，文件修改时间：<code>stat.mtime</code>; </p></blockquote><blockquote><p><code>stat()</code>也有一个对应的同步方法：<code>statSync()</code>;</p></blockquote><h4 id="stream"><a href="#stream" class="headerlink" title="stream"></a>stream</h4><hr><blockquote><p>stream是Node.js提供的又一个仅在服务端可用的模块，目的是支持“流”这种数据结构。<br>流分为：stain(标准输入流)、staout(标准输出流)。   </p></blockquote><blockquote><p>读取文件流的核心语法是： <code>fs.createReadStream()</code>,代码见：<a href="https://github.com/liugezhou/koa/blob/master/basic/steam/%E6%96%87%E4%BB%B6%E8%AF%BB%E5%8F%96%E6%96%87%E6%9C%AC.js" target="_blank" rel="noopener">文件读取文本</a>  </p></blockquote><blockquote><p>以流的形式写入文件，只有不断调用write()方法，代码见：<a href="https://github.com/liugezhou/koa/blob/master/basic/steam/%E6%96%87%E4%BB%B6%E5%86%99%E5%85%A5%E6%96%87%E4%BB%B6.js" target="_blank" rel="noopener">文本写入文件</a></p></blockquote><blockquote><p>将Readable流和Writable流串起来，所有的数据从Readable流进入Writable流，这种操作叫做pipe。在Node.js中，Readable流有一个pipe()方法，就是用来干这件事的。代码见：<a href="https://github.com/liugezhou/koa/blob/master/basic/steam/pipe.js" target="_blank" rel="noopener">pipe</a></p></blockquote><h4 id="http"><a href="#http" class="headerlink" title="http"></a>http</h4><hr><blockquote><p>要开发HTTP服务器程序，从头处理TCP连接，解析HTTP是不现实的。这些工作实际上已经由Node.js自带的http模块完成了。应用程序并不直接和HTTP协议打交道，而是操作http模块提供的request和response对象。</p></blockquote><blockquote><p>request对象封装了HTTP请求，我们调用request对象的属性和方法就可以拿到所有HTTP请求的信息；</p></blockquote><blockquote><p>response对象封装了HTTP响应，我们操作response对象的方法，就可以把HTTP响应返回给浏览器。</p></blockquote><h4 id="crypto"><a href="#crypto" class="headerlink" title="crypto"></a>crypto</h4><hr><blockquote><p>crypto模块的目的是为了提供通用的加密和哈希算法。用纯JavaScript代码实现这些功能不是不可能，但速度会非常慢。Nodejs用C/C++实现这些算法后，通过crypto这个模块暴露为JavaScript接口，这样用起来方便，速度也快。 </p></blockquote><blockquote><ul><li>MD5和SHA1是常用的哈希算法，用于给任意数据一个“签名”，这个签名通常用一个十六进制的字符串表示。   </li><li>Hmac算法：也是一种哈希算法，不同的是，它还需要加一个密钥。  </li><li>AES算法：是一种常用的对称加密算法，加解密都用同一个密钥。   </li><li>Diffie-Hellman：DH算法是一种密钥交换协议。  </li><li>RAS：RAS算法是一种对称加密算法</li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> Node.js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> node </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>每周总结第二十五期</title>
      <link href="/2019/12/29/issue-25/"/>
      <url>/2019/12/29/issue-25/</url>
      
        <content type="html"><![CDATA[<blockquote><p>这里记录过去一周，我的一些小总结。<br> <img src="http://img.liugezhou.online/weekly25.jpeg" alt="weekly-25"></p></blockquote><a id="more"></a><h3 id="Feeling"><a href="#Feeling" class="headerlink" title="Feeling"></a>Feeling</h3><blockquote><p>何谓朋友？ </p><p>我曾以狭隘的思考巴拉巴拉的说道：</p><p>其实朋友这个词的出现，是因为身为有意识的个体在这个世界出现后.<br>多数时间的独处.<br>可能因为害怕孤单、可能因为享受快乐，也可能因为骄傲，等等的一些生活感受.<br>而使得想要有所依靠、分享、诉说，因而有了朋友。  </p><p>其实朋友这个名词不重要。<br>还在乎朋友是因为自己内心不够平静.<br>而且你没有发现，很多所谓朋友的交流:<br>在漫漫、而浮于表面—-没有内涵。<br>而且加上因为个体自我的期望没有实现，<br>因此才想要在社交中与他人的交流中去给予自我一些宽慰，这种心理的深处、<br>可能就是不自信、不充实。<br>而朋友出现了，一次次的缓解你这个感触，直到你没有这个感触。</p><p>aliya告诉我说： </p><p>因为你有我.<br>所以可能你会暂时天真的以为没有朋友也没事，<br>你也可以天真的这么突然自以为。<br>但是有的人不是啊，没对象没家庭，那怎么证明自己还活着？<br>就是朋友啊。<br>什么平静、自信、充实，也不过是活着的附加品。<br>朋友的存在就是证明着你还活着。<br>朋友的意义对于一些人来说，对于大多数还没找寻到人生的目标前，朋友是他们生命中一部分的意义。</p></blockquote><h3 id="重磅文件！中国户籍制度大变局"><a href="#重磅文件！中国户籍制度大变局" class="headerlink" title="重磅文件！中国户籍制度大变局"></a><a href="https://mp.weixin.qq.com/s/L4LLwv1Q5SLLqkuU66bLMA" target="_blank" rel="noopener">重磅文件！中国户籍制度大变局</a></h3><blockquote><p>2019年12月25日(本周三)，中共中央办公厅 国务院办公厅印发《关于促进劳动力和人才社会性流动体制机制改革的意见》，详见<a href="http://www.gov.cn/zhengce/2019-12/25/content_5463978.htm" target="_blank" rel="noopener">这里</a>.    </p><p>以下内容来自公众号《最爱大北京》的一些内容摘要，文章链接<a href="https://mp.weixin.qq.com/s/L4LLwv1Q5SLLqkuU66bLMA" target="_blank" rel="noopener">点击这里</a> </p><p><code>全面取消</code>城区常住人口300万以下的城市落户限制，<code>全面放宽</code>城区常住人口300万至500万的大城市落户条件。</p><p><code>完善</code>城区常住人口500万以上的超大特大城市<code>积分落户政策</code>，精简积分项目，确保社会保险缴纳年限和居住年限分数占主要比例。<br>以合肥、昆明、苏州、大连、南宁为代表的I型大城市将全面放宽落户条件，石家庄、南昌、无锡、珠海、常州等II型大城市，以及所有的三四线中小城市，都会<code>全面取消落户限制</code>。</p></blockquote><h3 id="一锤定音，70年产权到期后可续期，房产税要加速来了？"><a href="#一锤定音，70年产权到期后可续期，房产税要加速来了？" class="headerlink" title="一锤定音，70年产权到期后可续期，房产税要加速来了？"></a><a href="https://36kr.com/p/5152186?ktm_source=feed" target="_blank" rel="noopener">一锤定音，70年产权到期后可续期，房产税要加速来了？</a></h3><blockquote><p>70年产权的计算是从开发商拿地开始起计，不是从你买房或拿到房产证那一刻开始算的。<br>世界上其他国家的房产基本都是永久产权，为什么我们国家只有70年的产权呢？<br>产权到期了该怎么办？<br>房产税会怎么征收？</p><p>这是一篇来自2018年9月17日的一篇资讯。<a href="https://36kr.com/p/5152186?ktm_source=feed" target="_blank" rel="noopener">文章来源</a></p></blockquote><h3 id="问医生"><a href="#问医生" class="headerlink" title="问医生"></a>问医生</h3><blockquote><p>微信搜一搜上线健康搜索服务，其中，健康搜索服务中主要分为三方面：健康信息查询、在线问医生，和预约挂号。</p><p>在微信搜一搜中输入病的症状（“头疼”、“发烧”等），搜索结果将展示：病因、就医方法、治疗等说明和建议。</p><p>内容来源包含众多实名医生背书的权威医疗内容、和由权威医学专家团编写的常见疾病及药品百科词条的专业解读。</p></blockquote><h3 id="北京7号线双井站开通"><a href="#北京7号线双井站开通" class="headerlink" title="北京7号线双井站开通"></a><a href="http://www.bjnews.com.cn/news/2019/12/26/666505.html" target="_blank" rel="noopener">北京7号线双井站开通</a></h3><blockquote><p>昨日(周六)，北京7号线东延、八通线南延开通试运营。<br>7号线双井站开通使用，换乘通道将同步开通，不过工作日自首班车至上午10时，7号线和10号线双井站分别独立开放运营，其他时段可以在双井站换乘。</p></blockquote><h3 id="北京新能源指标申请数已超45万！新申请或等9年才有资购车"><a href="#北京新能源指标申请数已超45万！新申请或等9年才有资购车" class="headerlink" title="北京新能源指标申请数已超45万！新申请或等9年才有资购车"></a><a href="https://news.mydrivers.com/1/664/664083.htm" target="_blank" rel="noopener">北京新能源指标申请数已超45万！新申请或等9年才有资购车</a></h3><blockquote><p>12月25日，北京小客车指标办公发布了今年最后一期指标配置数据。新能源小客车指标申请个人共有458673个，单位共有11263家，本期申请人数增加1万人左右。<br>按照每年5.4万个新能源指标计算，且今年的指标已完全用尽。所以，如果按照现行规则不变，新能源指标新申请者或将等待9年，也就是2028年才能获得指标。<br><cite><a href="https://news.mydrivers.com/1/664/664083.htm" target="_blank" rel="noopener">文章来源</a></cite></p></blockquote><h3 id="牙医"><a href="#牙医" class="headerlink" title="牙医"></a>牙医</h3><blockquote><p>美国教育部公布官方数据，美国大学毕业生第一年收入最高的各校专业排名，前十名里面有九个是牙医专业.<br><cite>阮一峰的网络日志</cite></p></blockquote><h3 id="腾讯会议APP"><a href="#腾讯会议APP" class="headerlink" title="腾讯会议APP"></a>腾讯会议APP</h3><blockquote><p>腾讯推出的一块开会APP。<br>全平台运行，手机、电脑、平板、Web一键入会。小程序打开即用，不需要下载任何插件或客户端。支持手机录屏等功能。</p></blockquote><h3 id="圣诞节前成功断网！俄罗斯举行首次国家级断网演习引热议"><a href="#圣诞节前成功断网！俄罗斯举行首次国家级断网演习引热议" class="headerlink" title="圣诞节前成功断网！俄罗斯举行首次国家级断网演习引热议"></a><a href="https://mp.weixin.qq.com/s/XfJvYuMb-M3-kHpibPsOTg" target="_blank" rel="noopener">圣诞节前成功断网！俄罗斯举行首次国家级断网演习引热议</a></h3><blockquote><p>俄罗斯政府宣布，已完成一系列测试，成功地使该国脱离了全球互联网，从而使俄罗斯的RuNet成为全球最大的内部网。此举引发专家担忧和网友热议：这意味着人们将无法就本国正在发生的事情进行对话，而陷入自己的泡沫中。<br><cite><a href="https://mp.weixin.qq.com/s/XfJvYuMb-M3-kHpibPsOTg" target="_blank" rel="noopener">文章来源</a></cite></p></blockquote><h3 id="Tiobe"><a href="#Tiobe" class="headerlink" title="Tiobe"></a>Tiobe</h3><blockquote><p>TIOBE排行榜是根据互联网上有经验的程序员、<code>课程</code>和第三方厂商的数量，并使用搜索引擎（如Google、Bing、Yahoo!）以及Wikipedia、Amazon、YouTube统计出排名数据，只是反映某个编程语言的热门程度，并不能说明一门编程语言好不好，或者一门语言所编写的代码数量多少。<br>2019年12月编程语言排行榜,前十名依次为：<br>Java、C、Python、C++、c#、Visual Basic .NET、JavaScript、PHP、SQL、Swift。<br><cite><a href="https://hellogithub.com/report/tiobe/" target="_blank" rel="noopener">排名来源</a></cite></p></blockquote><h3 id="node入门"><a href="#node入门" class="headerlink" title="node入门"></a>node入门</h3><blockquote><p>这是一篇短小精悍的node入门教程。<br>为了更彻底、清楚的学习本教程，我在Github上整理了一个<a href="https://github.com/liugezhou/nodejs_getting_started" target="_blank" rel="noopener">仓库</a>。</p><p>这篇文章关于JavaScript的一点描述说道：<br>“尽管当想要增强页面的时候，使用jQuery总让你觉得很爽，但到最后，你顶多是个JavaScript用户，而非JavaScript开发者。”  </p><p>于是勉励自己，对JS的掌握，慢慢能成为其开发者，而不仅仅是其用户。</p></blockquote><h3 id="浏览器工作原理与实践"><a href="#浏览器工作原理与实践" class="headerlink" title="浏览器工作原理与实践"></a><a href="https://liugezhou.gitbook.io/liugezhou/" target="_blank" rel="noopener">浏览器工作原理与实践</a></h3><blockquote><p>历时两个月将《极客时间》上的一个专栏进行了通篇学习。并且整理自<a href="https://liugezhou.gitbook.io/liugezhou/" target="_blank" rel="noopener">Gitbook</a>.     </p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 每周分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 每周分享 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>每周总结第二十四期</title>
      <link href="/2019/12/22/issue-24/"/>
      <url>/2019/12/22/issue-24/</url>
      
        <content type="html"><![CDATA[<blockquote><p>这里记录过去一周，我的一些小总结。<br> <img src="http://img.liugezhou.online/weekly24.jpeg" alt="weekly-24"></p></blockquote><a id="more"></a><h4 id="Feeling"><a href="#Feeling" class="headerlink" title="Feeling"></a>Feeling</h4><blockquote><p>最近几年喝酒好似没有了年轻时的浪荡不羁。<br>每次喝毕总有一些稀奇古怪的感受，第二天醒来一阵落幕感袭来。<br>就立个flag：以后不喝酒了，Quit Drinking。  </p></blockquote><h4 id="羞愧"><a href="#羞愧" class="headerlink" title="羞愧"></a>羞愧</h4><blockquote><p>当aliya问我什么是车厘子的时候，我说不知道。<br>她说：你应该问此而羞愧，我说的羞愧指的并不是你不知道这个东西 而是你知道你不知道后还不知道。   </p></blockquote><h4 id="关于侵害用户权益行为的APP（第一批）通报"><a href="#关于侵害用户权益行为的APP（第一批）通报" class="headerlink" title="关于侵害用户权益行为的APP（第一批）通报"></a><a href="http://www.miit.gov.cn/n1146290/n1146402/n1146440/c7575066/content.html?tsrrbdcdnht=" target="_blank" rel="noopener">关于侵害用户权益行为的APP（第一批）通报</a></h4><blockquote><p>工业和信息化部信息通信管理局关于侵害用户权益行为的APP通报。   </p></blockquote><h4 id="Maskbook"><a href="#Maskbook" class="headerlink" title="Maskbook"></a><a href="https://mp.weixin.qq.com/s/ZQSy8JdFdoAPug2rJ7ZmJg" target="_blank" rel="noopener">Maskbook</a></h4><blockquote><p>【 Maskbook 给了我一个最直观的感受。这款产品以浏览器插件的形式，把 Facebook 网站变成了一个无法监视的大广场。你依然使用以前的身份账号在这个广场上玩耍 —— 认识新的人、发布自己的动态、交新的朋友 —— 但不同的是，你所发布的数据将被加密成一串串乱码，只有你指定的好友能解读出其中正确的含义。】</p></blockquote><h4 id="图表制作可以很简单-图表魔方-ChartCube"><a href="#图表制作可以很简单-图表魔方-ChartCube" class="headerlink" title="图表制作可以很简单 - 图表魔方 ChartCube"></a><a href="https://chartcube.alipay.com/" target="_blank" rel="noopener">图表制作可以很简单 - 图表魔方 ChartCube</a></h4><blockquote><p>ChartCube 针对快速图表制作的场景，只要有浏览器就可以使用。<br>无论你是谁，都可以用它。你可以完全不懂如何处理数据，你可以没听说过任何图表类库，你也不需要写一行代码。通过最直观的交互，谁都能制作出所需的图表。<br>利用 ChartCube 制作图表，过程非常简单。通常你需要三步：选择图表、配置图表、导出图表。</p></blockquote><h4 id="教育部关于同意某大学章程部分条款修改的批复"><a href="#教育部关于同意某大学章程部分条款修改的批复" class="headerlink" title="教育部关于同意某大学章程部分条款修改的批复"></a><a href="http://www.moe.gov.cn/srcsite/A02/zfs_gdxxzc/201912/t20191216_412276.html" target="_blank" rel="noopener">教育部关于同意某大学章程部分条款修改的批复</a></h4><blockquote><p>以上为教育部网站原文链接。</p></blockquote><h4 id="和“内存杀手”-Chrome-说再见-新版-Edge-即将发布"><a href="#和“内存杀手”-Chrome-说再见-新版-Edge-即将发布" class="headerlink" title="和“内存杀手” Chrome 说再见? 新版 Edge 即将发布"></a><a href="https://mp.weixin.qq.com/s/g9WlXAjw0gPWzjfw0cgGPA" target="_blank" rel="noopener">和“内存杀手” Chrome 说再见? 新版 Edge 即将发布</a></h4><blockquote><p>近日，有不少外媒表示，微软计划于 2020 年 1 月 15 日正式发布基于 Chromium 的 Edge 浏览器，该浏览器支持 Windows 10、Windows 7、Windows 8 和 macOS 等操作系统。同时，更有网友通过对 Edge Chromium Beta 实测后，称新版 Edge 比 Chrome 更好用，比 Firefox 的功能更完善.<br>微软还为 Edge 引入新的 logo 和图<br><img src="https://mmbiz.qpic.cn/mmbiz_gif/Pn4Sm0RsAujIolbibsroulrun7rebicTT0mfUoWsWyQYZJ8j6IGjhhd3aqx5SC9ibDVQ2wN4NvCZajCjf25p5b5Dg/640?wx_fmt=gif&wxfrom=5&wx_lazy=1" alt="logo"></p></blockquote><h4 id="文言文编程语言，可谓年度最骚语言"><a href="#文言文编程语言，可谓年度最骚语言" class="headerlink" title="文言文编程语言，可谓年度最骚语言"></a><a href="https://github.com/LingDong-/wenyan-lang" target="_blank" rel="noopener">文言文编程语言，可谓年度最骚语言</a></h4><blockquote><p>Github上一周左右斩获一万多星的项目。<br>这是一位卡内基梅隆大学（CMU）的大四学生开发。利用 NLP 的一些技术，将文言文程序语法转换到 JavaScript 或 Python 运行，并不是简单的将程序中的英文字符换成了中文。</p></blockquote><h4 id="浏览器安全"><a href="#浏览器安全" class="headerlink" title="浏览器安全"></a><a href="https://www.liugezhou.online/2019/12/16/No7.%E6%B5%8F%E8%A7%88%E5%99%A8%E5%AE%89%E5%85%A8/" target="_blank" rel="noopener">浏览器安全</a></h4><blockquote><p>前段时间在《极客时间》上学了一个专栏，通篇略过，干货不少，但理解相当不够透彻，于是计划用几周的时间，对本专栏内容用作者的总结以及自己的相对逐字理解，来个通篇的文字记录学习，书读百遍，其义自现。<br>本篇是这个专栏的第七章，也是最后一章：<a href="https://www.liugezhou.online/2019/12/16/No7.%E6%B5%8F%E8%A7%88%E5%99%A8%E5%AE%89%E5%85%A8/" target="_blank" rel="noopener">浏览器安全</a>。本章分为六讲。    </p><p>本章主要从Web页面安全、浏览器系统安全、浏览器网络安全三块内容展开。   </p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 每周分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 每周分享 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>No7.浏览器安全</title>
      <link href="/2019/12/16/No7.%E6%B5%8F%E8%A7%88%E5%99%A8%E5%AE%89%E5%85%A8/"/>
      <url>/2019/12/16/No7.%E6%B5%8F%E8%A7%88%E5%99%A8%E5%AE%89%E5%85%A8/</url>
      
        <content type="html"><![CDATA[<h6 id="前段时间在《极客时间》上学了一个专栏，通篇略过，干货不少，但理解相当不够透彻，于是计划用几周的时间，对本专栏内容用作者的总结以及自己的相对逐字理解，来个通篇的文字记录学习，书读百遍，其义自现。"><a href="#前段时间在《极客时间》上学了一个专栏，通篇略过，干货不少，但理解相当不够透彻，于是计划用几周的时间，对本专栏内容用作者的总结以及自己的相对逐字理解，来个通篇的文字记录学习，书读百遍，其义自现。" class="headerlink" title="前段时间在《极客时间》上学了一个专栏，通篇略过，干货不少，但理解相当不够透彻，于是计划用几周的时间，对本专栏内容用作者的总结以及自己的相对逐字理解，来个通篇的文字记录学习，书读百遍，其义自现。"></a>前段时间在《极客时间》上学了一个专栏，通篇略过，干货不少，但理解相当不够透彻，于是计划用几周的时间，对本专栏内容用作者的总结以及自己的相对逐字理解，来个通篇的文字记录学习，书读百遍，其义自现。</h6><h6 id="本篇是这个专栏的最后一章：《浏览器安全》。本章分为六节。"><a href="#本篇是这个专栏的最后一章：《浏览器安全》。本章分为六节。" class="headerlink" title="本篇是这个专栏的最后一章：《浏览器安全》。本章分为六节。"></a>本篇是这个专栏的最后一章：《浏览器安全》。本章分为六节。</h6><a id="more"></a><h4 id="32-同源策略：为什么XMLHttpRequest不能跨域请求资源？"><a href="#32-同源策略：为什么XMLHttpRequest不能跨域请求资源？" class="headerlink" title="32 | 同源策略：为什么XMLHttpRequest不能跨域请求资源？"></a>32 | 同源策略：为什么XMLHttpRequest不能跨域请求资源？</h4><blockquote><p>浏览器安全可以分为三大块–Web页面安全、浏览器网络安全、浏览器系统安全。<br>本节来分析页面中的安全策略。  </p><p>在没有安全保障的 Web 世界中，我们是没有隐私的，因此需要安全策略来保障我们的隐私和数据的安全。这就引出了页面中最基础、最核心的安全策略：<code>同源策略（Same-origin policy）</code>。</p></blockquote><h5 id="什么是同源策略"><a href="#什么是同源策略" class="headerlink" title="什么是同源策略"></a>什么是同源策略</h5><blockquote><p>如果两个 URL 的协议、域名和端口都相同，我们就称这两个 URL 同源.<br>浏览器默认两个相同的源之间是可以相互访问资源和操作 DOM 的。两个不同的源之间若想要相互访问资源或者操作 DOM，那么会有一套基础的安全策略的制约，我们把这称为同源策略。<br>具体来讲，同源策略主要表现在 DOM、Web 数据和网络这三个层面。  </p><ul><li>第一个：DOM层面。同源策略限制了来自不同源的 JavaScript 脚本对当前 DOM 对象读和写的操作。    </li><li>第二个：数据层面。同源策略限制了不同源的站点读取当前站点的 Cookie、IndexDB、LocalStorage 等数据。   </li><li>第三个，网络层面。同源策略限制了通过 XMLHttpRequest 等方式将站点的数据发送给不同源的站点。</li></ul></blockquote><h5 id="安全和便利性的权衡"><a href="#安全和便利性的权衡" class="headerlink" title="安全和便利性的权衡"></a>安全和便利性的权衡</h5><blockquote><p>浏览器出让了同源策略的一些安全性。    </p></blockquote><h6 id="1-页面中可以嵌入第三方资源"><a href="#1-页面中可以嵌入第三方资源" class="headerlink" title="1. 页面中可以嵌入第三方资源"></a>1. 页面中可以嵌入第三方资源</h6><blockquote><p>页面中可以嵌入第三方资源，但是却有可能嵌入的是恶意代码，恶意读取Cookie等数据，于是浏览器中引入了内容安全策略，称为CSP。<br>CSP 的核心思想是让服务器决定浏览器能够加载哪些资源，让服务器决定浏览器是否能够执行内联 JavaScript 代码。</p></blockquote><h6 id="2-跨域资源共享和跨文档消息机制"><a href="#2-跨域资源共享和跨文档消息机制" class="headerlink" title="2. 跨域资源共享和跨文档消息机制"></a>2. 跨域资源共享和跨文档消息机制</h6><blockquote><p>为了解决不同源的资源不能共享问题，引入了<code>跨域资源共享(CORS)</code>，使用该机制可以进行跨域访问控制，从而使跨域数据传输得以安全进行。<br>在介绍同源策略时，我们说明了如果两个页面不是同源的，则无法相互操纵 DOM。不过在实际应用中，经常需要两个不同源的 DOM 之间进行通信，于是浏览器中又引入了跨文档消息机制，可以通过 window.postMessage 的 JavaScript 接口来和不同源的 DOM 进行通信。    </p></blockquote><h4 id="33-跨站脚本攻击-XSS-为什么Cookie中有HttpOnly属性？"><a href="#33-跨站脚本攻击-XSS-为什么Cookie中有HttpOnly属性？" class="headerlink" title="33 | 跨站脚本攻击(XSS):为什么Cookie中有HttpOnly属性？"></a>33 | 跨站脚本攻击(XSS):为什么Cookie中有HttpOnly属性？</h4><blockquote><p>通过上一节我们知道：同源策略可以隔离各个站点之间的 DOM 交互、页面数据和网络通信，虽然严格的同源策略会带来更多的安全，但是也束缚了 Web。这就需要在安全和自由之间找到一个平衡点，所以我们默认页面中可以引用任意第三方资源，然后又引入 CSP 策略来加以限制；默认 XMLHttpRequest 和 Fetch 不能跨站请求资源，然后又通过 CORS 策略来支持其跨域。不过支持页面中的第三方资源引用和 CORS 也带来了很多安全问题，其中最典型的就是 XSS 攻击。  </p></blockquote><h5 id="什么是XSS攻击"><a href="#什么是XSS攻击" class="headerlink" title="什么是XSS攻击"></a>什么是XSS攻击</h5><blockquote><p>XSS 全称是 Cross Site Scripting，为了与“CSS”区分开来，故简称 XSS，翻译过来就是“跨站脚本”。XSS 攻击是指黑客往 HTML 文件中或者 DOM 中注入恶意脚本，从而在用户浏览页面时利用注入的恶意脚本对用户实施攻击的一种手段。<br>恶意脚本可以做哪些事情呢？    </p><ul><li>可以获取Cookie消息。    </li><li>可以监听用户行为。  </li><li>可以通过修改DOM伪造假的登录窗口，用来欺骗用户输入用户名和密码等信息。   </li><li>还可以在页面内生成浮窗广告。    </li></ul></blockquote><h5 id="恶意脚本是怎么注入的"><a href="#恶意脚本是怎么注入的" class="headerlink" title="恶意脚本是怎么注入的"></a>恶意脚本是怎么注入的</h5><blockquote><p>常见的注入方式有：存储型XSS攻击、反射型XSS攻击、基于DOM的XSS攻击。    </p></blockquote><h5 id="如何阻止XSS攻击"><a href="#如何阻止XSS攻击" class="headerlink" title="如何阻止XSS攻击"></a>如何阻止XSS攻击</h5><blockquote><ol><li>服务器对输入脚本进行过滤或转码。   </li><li>充分利用CSP。  </li><li>使用 HttpOnly 属性。   </li></ol></blockquote><h4 id="34-CSRF攻击：陌生链接不要点"><a href="#34-CSRF攻击：陌生链接不要点" class="headerlink" title="34 | CSRF攻击：陌生链接不要点"></a>34 | CSRF攻击：陌生链接不要点</h4><blockquote><p>在上一节中我们简单了解了 XSS 攻击，XSS 的攻击方式是黑客往用户的页面中注入恶意脚本，然后再通过恶意脚本将用户页面的数据上传到黑客的服务器上，最后黑客再利用这些数据进行一些恶意操作。XSS 攻击能够带来很大的破坏性，不过另外一种类型的攻击也不容忽视，它就是 CSRF 攻击。 </p></blockquote><h5 id="什么是CSRF攻击"><a href="#什么是CSRF攻击" class="headerlink" title="什么是CSRF攻击"></a>什么是CSRF攻击</h5><blockquote><p>CSRF 英文全称是 Cross-site request forgery，所以又称为“跨站请求伪造”，是指黑客引诱用户打开黑客的网站，在黑客的网站中，利用用户的登录状态发起的跨站请求。简单来讲，CSRF 攻击就是黑客利用了用户的登录状态，并通过第三方的站点来做一些坏事。     </p><p>黑客有三种方式实施CSRF攻击：  </p><ul><li>自动发起Get请求。   </li><li>自动发起POST请求。  </li><li>引诱用户点击链接。  </li></ul><p>和 XSS 不同的是，CSRF 攻击不需要将恶意代码注入用户的页面，仅仅是利用服务器的漏洞和用户的登录状态来实施攻击。</p></blockquote><h5 id="如何防止CSRF攻击"><a href="#如何防止CSRF攻击" class="headerlink" title="如何防止CSRF攻击"></a>如何防止CSRF攻击</h5><blockquote><p>发起 CSRF 攻击的三个必要条件：    </p><ul><li>第一个，目标站点一定要有 CSRF 漏洞；    </li><li>第二个，用户要登录过目标站点，并且在浏览器上保持有该站点的登录状态；    </li><li>第三个，需要用户打开一个第三方站点，可以是黑客的站点，也可以是一些论坛。    </li></ul><p>要让服务器避免遭受到 CSRF 攻击，通常有以下几种途径:   </p><ol><li>充分利用好Cookie的SameSite属性。SameSite选项通常有Strict、Lax、None三个值。    </li></ol><ul><li>Strict最为严格，举个例子，黑客从他的网站去去访问你网站的资源，如果你的网站的某些Cookie设置了SamteSite = Strict，那么在黑客网站上的Cookie是不会发送到你的网站上的，只有你从你的站点去请求你站点的资源，才会带上这些Cookie。  </li><li>Lax相对宽松，在跨站点的情况下，从第三方站点的链接打开和从第三方站点提交 Get 方式的表单这两种方式都会携带 Cookie。但如果在第三方站点中使用 Post 方法，或者通过 img、iframe 等标签加载的 URL，这些场景都不会携带 Cookie。 </li><li>而如果使用 None 的话，在任何情况下都会发送 Cookie 数据。</li></ul><ol start="2"><li><p>验证请求的来源站点<br>服务器可以禁止来自第三方站点的请求。那么该怎么判断请求是否来自第三方站点呢？这里介绍的是HTTP请求头中的Referer和Origin属性。<br><code>Referer</code>是HTTP请求头中的一个字段，记录了该HTTP请求的来源地址,会包含具体的 URL 路径。<br>虽然可以通过 Referer 告诉服务器 HTTP 请求的来源，但是有一些场景是不适合将来源 URL 暴露给服务器的，因此浏览器提供给开发者一个选项，可以不用上传 Referer 值，具体可参考 Referrer Policy。<br>但在服务器端验证请求头中的 Referer 并不是太可靠，因此标准委员会又制定了 <code>Origin</code>属性，在一些重要的场合，比如通过 XMLHttpRequest、Fecth 发起跨站请求或者通过 Post 方法发送请求时，都会带上 Origin 属性.<br>Origin 属性只包含了域名信息，并没有包含具体的 URL 路径.   </p></li><li><p>CSRF Token<br>第一步，在浏览器向服务器发起请求时，服务器生成一个 CSRF Token。CSRF Token 其实就是服务器生成的字符串，然后将该字符串植入到返回的页面中。<br>第二步，在浏览器端如果要发起转账的请求，那么需要带上页面中的 CSRF Token，然后服务器会验证该 Token 是否合法。如果是从第三方站点发出的请求，那么将无法获取到 CSRF Token 的值，所以即使发出了请求，服务器也会因为 CSRF Token 不正确而拒绝请求。  </p></li></ol></blockquote><h4 id="35-安全沙箱：页面和系统之间的隔离墙"><a href="#35-安全沙箱：页面和系统之间的隔离墙" class="headerlink" title="35 | 安全沙箱：页面和系统之间的隔离墙"></a>35 | 安全沙箱：页面和系统之间的隔离墙</h4><h5 id="安全视角下的多进程架构"><a href="#安全视角下的多进程架构" class="headerlink" title="安全视角下的多进程架构"></a>安全视角下的多进程架构</h5><blockquote><p>我们通过学习第一节《宏观视角下的浏览器》，了解了浏览器的发展史以及架构的演变，这节是从操作系统安全的视角来看浏览器的多进程架构的。<br>浏览器是被划分为<code>浏览器内核</code>和<code>渲染内核</code>两个核心模块，其中浏览器内核是由网络进程、浏览器主进程和GPU主进程组成的。渲染内核就是渲染进程。这两个模块通过IPC来通信。<br>浏览器多进程架构的设计不单单是为了增加其稳定性，重要的一点也是因为从安全角度去考虑、设计的。   </p></blockquote><h5 id="安全沙箱"><a href="#安全沙箱" class="headerlink" title="安全沙箱"></a>安全沙箱</h5><blockquote><p>基于安全原因(主要是为防止危险资源获取系统权限)，在渲染进程和操作系统之间建了一道墙，即便渲染进程由于存在漏洞被黑客攻击，但由于这道墙，黑客就获取不到渲染进程之外的任何操作权限。将渲染进程和操作系统隔离的这道墙就是安全沙箱。<br>浏览器中的安全沙箱是利用操作系统提供的安全技术，让渲染进程在执行过程中无法访问或者修改操作系统中的数据，在渲染进程需要访问系统资源的时候，需要通过浏览器内核来实现，然后将访问的结果通过 IPC 转发给渲染进程。<br>安全沙箱最小的保护单位是进程。因为单进程浏览器需要频繁访问或者修改操作系统的数据，所以单进程浏览器是无法被安全沙箱保护的，而现代浏览器采用的多进程架构使得安全沙箱可以发挥作用。  </p></blockquote><h4 id="36-｜-HTTPS：让数据传输更安全"><a href="#36-｜-HTTPS：让数据传输更安全" class="headerlink" title="36 ｜ HTTPS：让数据传输更安全"></a>36 ｜ HTTPS：让数据传输更安全</h4><blockquote><p>浏览器安全主要分为三大块内容：页面安全、系统安全、网络完全，本节主要学习网络安全。</p><p>我们使用 HTTP 传输的内容很容易被中间人窃取、伪造和篡改，通常我们把这种攻击方式称为中间人攻击。<br>具体来讲，在将HTTP数据提交给TCP后，数据会经过用户电脑、WIFI路由器、运营商和目标服务器，在这中间的每个环节中，数据都有可能被窃取或篡改。</p></blockquote><h5 id="在HTTP协议栈中引入安全层"><a href="#在HTTP协议栈中引入安全层" class="headerlink" title="在HTTP协议栈中引入安全层"></a>在HTTP协议栈中引入安全层</h5><blockquote><p><img src="https://static001.geekbang.org/resource/image/9e/cf/9e99f797de30a15a11b0e4b4c8f810cf.png" alt="HTTP VS HTTPS"><br>安全层有两个主要的职责：对发起 HTTP 请求的数据进行加密操作和对接收到 HTTP 的内容进行解密操作.<br>我们知道了安全层最重要的就是加解密，那么接下来我们就利用这个安全层，一步一步实现一个从简单到复杂的 HTTPS 协议。  </p><h6 id="第一版-使用对称加密"><a href="#第一版-使用对称加密" class="headerlink" title="第一版:使用对称加密"></a>第一版:使用对称加密</h6><p>提到加密，最简单的方式是使用对称加密。所谓对称加密是指加密和解密都使用的是相同的密钥。<br>将对称加密加到安全层后，实现了第一版的对称加密，但是其中传输的client-random和server-client的过程都是明文，所以黑客其实也是可以拿到并篡改的，因此此数据依然可以破解。  </p><h6 id="第二版：使用非对称加密"><a href="#第二版：使用非对称加密" class="headerlink" title="第二版：使用非对称加密"></a>第二版：使用非对称加密</h6><p>含义：和对称加密只有一个密钥不同，非对称加密算法有 A、B 两把密钥，如果你用 A 密钥来加密，那么只能使用 B 密钥来解密；反过来，如果你要 B 密钥来加密，那么只能用 A 密钥来解密。</p><h6 id="第三版：对称加密和非对称加密搭配使用"><a href="#第三版：对称加密和非对称加密搭配使用" class="headerlink" title="第三版：对称加密和非对称加密搭配使用"></a>第三版：对称加密和非对称加密搭配使用</h6><p>最终选择了一个更加完美的方案，那就是在传输数据阶段依然使用对称加密，但是对称加密的密钥我们采用非对称加密来传输.   </p><h6 id="第四版：添加数字证书"><a href="#第四版：添加数字证书" class="headerlink" title="第四版：添加数字证书"></a>第四版：添加数字证书</h6><p>为了防止黑客通过DNS劫持将用户目标官网的IP地址进行更换，而需添加数字证书，该证书是服务器向浏览器证明“我”就是“我”。 </p></blockquote><h5 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h5><blockquote><p>由于 HTTP 的明文传输特性，在传输过程中的每一个环节，数据都有可能被窃取或者篡改，这倒逼着我们需要引入加密机制。<br>于是我们在 HTTP 协议栈的 TCP 和 HTTP 层之间插入了一个安全层，负责数据的加密和解密操作。<br>我们使用对称加密实现了安全层，但是由于对称加密的密钥需要明文传输，所以我们又将对称加密改造成了非对称加密。<br>但是非对称加密效率低且不能加密服务器到浏览器端的数据，于是我们又继续改在安全层，采用对称加密的方式加密传输数据和非对称加密的方式来传输密钥，这样我们就解决传输效率和两端数据安全传输的问题。<br>采用这种方式虽然能保证数据的安全传输，但是依然没办法证明服务器是可靠的，于是又引入了数字证书，数字证书是由 CA 签名过的，所以浏览器能够验证该证书的可靠性。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 浏览器工作原理与实践 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 浏览器工作原理与实践 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>每周总结第二十三期</title>
      <link href="/2019/12/15/issue-23/"/>
      <url>/2019/12/15/issue-23/</url>
      
        <content type="html"><![CDATA[<blockquote><p>这里记录过去一周，我的一些小总结。<br> <img src="http://img.liugezhou.online/weekly23.jpeg" alt="weekly-23"></p></blockquote><a id="more"></a><h4 id="Feeling"><a href="#Feeling" class="headerlink" title="Feeling"></a>Feeling</h4><blockquote><p>周末去参加了两个群体聚会，本来是有很多的感受的，但是由于本性是善于遗忘，这篇周总结拖沓了一些，什么感受不感受的也都忘光了。  </p></blockquote><h4 id="普法-如果你被裁员，赔偿金是N、N-1、2N呢？"><a href="#普法-如果你被裁员，赔偿金是N、N-1、2N呢？" class="headerlink" title="普法 | 如果你被裁员，赔偿金是N、N+1、2N呢？"></a><a href="https://mp.weixin.qq.com/s/uFUhMlittAbNDcHWjLeZLA" target="_blank" rel="noopener">普法 | 如果你被裁员，赔偿金是N、N+1、2N呢？</a></h4><blockquote><p>最近几个大厂闹了不少事情，各家对裁员的赔偿金额不尽相同，导致很多朋友有所疑惑：到底裁员应该赔偿多少？又一波科普《劳动合同法》的。</p></blockquote><h4 id="二师兄法力无边–CPI破4"><a href="#二师兄法力无边–CPI破4" class="headerlink" title="二师兄法力无边–CPI破4"></a><a href="https://mp.weixin.qq.com/s/DIxLlp9cbrcKm47WQX6oyQ" target="_blank" rel="noopener">二师兄法力无边–CPI破4</a></h4><blockquote><p>据国家统计局发布的数据，11月份全国CPI（居民消费价格指数）同比上涨4.5%，连续9个月涨幅扩大.上一次CPI处在4%以上的高位，还是7年多前.那一轮通胀周期始于2010年下半年，直到2012年初才缓解.<br>猪肉是测算CPI的一篮子商品中权重最大的单品（约占2.5%），对CPI的拉动效果极为明显。</p></blockquote><h4 id="Chrome79发布"><a href="#Chrome79发布" class="headerlink" title="Chrome79发布"></a><a href="https://mp.weixin.qq.com/s/MEV6YhBUcpT82VryKsezgg" target="_blank" rel="noopener">Chrome79发布</a></h4><blockquote><p>Google 发布了适用于 Windows、Mac、Linux、Chrome OS、Android 和 iOS 用户的 Chrome 79。</p><p>Chrome 79 是 2019 年最后一次特性更新。自今年秋天初以来，Chrome 79 一直处在开发中，并于 10 月底进入 Beta 测试。Chrome 79 的更改主要面向开发人员，但安全浏览和内置密码检查工具方面也已有一些改进。</p></blockquote><h4 id="WebAssembly"><a href="#WebAssembly" class="headerlink" title="WebAssembly"></a><a href="https://mp.weixin.qq.com/s/XxdrxkU5ZZKX4kcqIIXIQw" target="_blank" rel="noopener">WebAssembly</a></h4><blockquote><p>2019年的12月5日，WebAssembly(简称WASM) ，被W3C推荐为正式标准，这是继html、css、javascript之后的第4门web语言，同时为Web带来一种支持代码在浏览器中运行的新语言.<br>通过即时编译或解析，WebAssembly引擎可以接近原生平台的速度执行代码编译。   </p><p>关于明年的前端发展趋势，该作者给出以下几点的预测:</p><ol><li>WebAssembly变得越来越普遍，得到了实际采用，并被用于产品中。        </li><li>GraphQL在新的创业公司和新项目上超过了REST，而老牌公司则向其迁移。      </li><li>TypeScript成为创业公司和新项目的默认选择。           </li><li>CSS-in-JS可能会成为默认的样式设置方法，而不是普通的CSS。     </li><li>Flutter可能会取代React Native成为构建跨平台移动应用的最佳方式。 </li></ol></blockquote><h4 id="themostdangerouswritingapp"><a href="#themostdangerouswritingapp" class="headerlink" title="themostdangerouswritingapp"></a><a href="https://github.com/maebert/themostdangerouswritingapp" target="_blank" rel="noopener">themostdangerouswritingapp</a></h4><blockquote><p>最危险的应用写作程序。<br>一旦你开始写作，那就不要停，必须时刻不停的打字。一旦停下（5秒倒计时），便立刻把先前写的所有内容删得一干二净。</p><p>体验地址：<a href="http://www.themostdangerouswritingapp.com" target="_blank" rel="noopener">http://www.themostdangerouswritingapp.com</a></p></blockquote><h4 id="Github或正式登录中国"><a href="#Github或正式登录中国" class="headerlink" title="Github或正式登录中国"></a>Github或正式登录中国</h4><blockquote><p>2019年12月10日，据英国《金融时报》报道， 全球最大程序员交友平台 GitHub <code>渴望</code>在中国开子公司。</p></blockquote><h4 id="力扣"><a href="#力扣" class="headerlink" title="力扣"></a><a href="https://leetcode-cn.com/" target="_blank" rel="noopener">力扣</a></h4><blockquote><p>力扣（LeetCode）上的题目已经有 1000+ 了。一目了然的题目分类力扣的题覆盖面极大，目前已有 1000+ 公开题目资源，涉及了许多算法与数据结构，有贪心，搜索，动态规划，链表，二叉树，哈希表等。<br>如果你是一名程序员，力扣一定要提前准备起来。</p></blockquote><h4 id="浏览器中的网络"><a href="#浏览器中的网络" class="headerlink" title="浏览器中的网络"></a><a href="https://www.liugezhou.online/2019/12/10/No6.%E6%B5%8F%E8%A7%88%E5%99%A8%E4%B8%AD%E7%9A%84%E7%BD%91%E7%BB%9C/" target="_blank" rel="noopener">浏览器中的网络</a></h4><blockquote><p>前段时间在《极客时间》上学了一个专栏，通篇略过，干货不少，但理解相当不够透彻，于是计划用几周的时间，对本专栏内容用作者的总结以及自己的相对逐字理解，来个通篇的文字记录学习，书读百遍，其义自现。<br>本篇是这个专栏的第六章：<a href="https://www.liugezhou.online/2019/12/10/No6.%E6%B5%8F%E8%A7%88%E5%99%A8%E4%B8%AD%E7%9A%84%E7%BD%91%E7%BB%9C/" target="_blank" rel="noopener">浏览器中的网络</a>。本章分为三讲。    </p><p>这三讲从浏览器的视角对HTTP的历史演进，进行了整体介绍，分别是即将完成使命的HTTP/1，正在我们走向的HTTP/2，以及未来的HTTP/3.</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 每周分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 每周分享 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>No6.浏览器中的网络</title>
      <link href="/2019/12/10/No6.%E6%B5%8F%E8%A7%88%E5%99%A8%E4%B8%AD%E7%9A%84%E7%BD%91%E7%BB%9C/"/>
      <url>/2019/12/10/No6.%E6%B5%8F%E8%A7%88%E5%99%A8%E4%B8%AD%E7%9A%84%E7%BD%91%E7%BB%9C/</url>
      
        <content type="html"><![CDATA[<h6 id="谈及浏览器中的网络，就避不开-HTTP。我们知道-HTTP-是浏览器中最重要且使用最多的协议，是浏览器和服务器之间的通信语言，也是互联网的基石。而随着浏览器的发展，HTTP-为了能适应新的形式也在持续进化，学习-HTTP-的最佳途径就是了解其发展史，所以在接下来的三节文章中，从浏览器发展的视角来学习-HTTP-演进。这三节分别是即将完成使命的-HTTP-1、正在向我们走来的-HTTP-2，以及未来的-HTTP-3。"><a href="#谈及浏览器中的网络，就避不开-HTTP。我们知道-HTTP-是浏览器中最重要且使用最多的协议，是浏览器和服务器之间的通信语言，也是互联网的基石。而随着浏览器的发展，HTTP-为了能适应新的形式也在持续进化，学习-HTTP-的最佳途径就是了解其发展史，所以在接下来的三节文章中，从浏览器发展的视角来学习-HTTP-演进。这三节分别是即将完成使命的-HTTP-1、正在向我们走来的-HTTP-2，以及未来的-HTTP-3。" class="headerlink" title="谈及浏览器中的网络，就避不开 HTTP。我们知道 HTTP 是浏览器中最重要且使用最多的协议，是浏览器和服务器之间的通信语言，也是互联网的基石。而随着浏览器的发展，HTTP 为了能适应新的形式也在持续进化，学习 HTTP 的最佳途径就是了解其发展史，所以在接下来的三节文章中，从浏览器发展的视角来学习 HTTP 演进。这三节分别是即将完成使命的 HTTP/1、正在向我们走来的 HTTP/2，以及未来的 HTTP/3。"></a>谈及浏览器中的网络，就避不开 HTTP。我们知道 HTTP 是浏览器中最重要且使用最多的协议，是浏览器和服务器之间的通信语言，也是互联网的基石。而随着浏览器的发展，HTTP 为了能适应新的形式也在持续进化，学习 HTTP 的最佳途径就是了解其发展史，所以在接下来的三节文章中，从浏览器发展的视角来学习 HTTP 演进。这三节分别是即将完成使命的 HTTP/1、正在向我们走来的 HTTP/2，以及未来的 HTTP/3。</h6><a id="more"></a><h4 id="29-HTTP-1：HTTP性能优化"><a href="#29-HTTP-1：HTTP性能优化" class="headerlink" title="29 | HTTP/1：HTTP性能优化"></a>29 | HTTP/1：HTTP性能优化</h4><blockquote><p>本文主要介绍的是 HTTP/1.1，我们先来学习下 HTTP/1.1 的进化史，然后再介绍在进化过程中所遇到的各种瓶颈，以及对应的解决方法。 </p></blockquote><h5 id="超文本传输协议HTTP-0-9"><a href="#超文本传输协议HTTP-0-9" class="headerlink" title="超文本传输协议HTTP/0.9"></a>超文本传输协议HTTP/0.9</h5><blockquote><p>HTTP/0.9 是于 1991 年提出的，主要用于学术交流，需求很简单——用来在网络之间传递<code>HTML 超文本</code>的内容，所以被称为<code>超文本传输协议</code>。<br>HTTP/0.9 的实现有以下三个特点:    </p><ul><li>第一个是只有一个请求行，并没有 HTTP 请求头和请求体，因为只需要一个请求行就可以完整表达客户端的需求了。  </li><li>第二个是服务器也没有返回头信息，这是因为服务器端并不需要告诉客户端太多信息，只需要返回数据就可以了。    </li><li>第三个是返回的文件内容是以 ASCII 字符流来传输的，因为都是 HTML 格式的文件，所以使用 ASCII 字节码来传输是最合适的。  </li></ul></blockquote><h5 id="被浏览器推动的HTTP-1-0"><a href="#被浏览器推动的HTTP-1-0" class="headerlink" title="被浏览器推动的HTTP/1.0"></a>被浏览器推动的HTTP/1.0</h5><blockquote><p>变化是这个世界永恒不变的主旋律，1994 年底出现了拨号上网服务，同年网景又推出一款浏览器，从此万维网就不局限于学术交流了，而是进入了高速的发展阶段。<br>万维网的高速发展带来了很多新的需求，而 HTTP/0.9 已经不能适用新兴网络的发展，所以这时就需要一个新的协议来支撑新兴网络，这就是 HTTP/1.0 诞生的原因。</p></blockquote><blockquote><p>新兴网络带来了新的需求：首先在浏览器中展示的不单是 HTML 文件了，还包括了 JavaScript、CSS、图片、音频、视频等不同类型的文件。因此支持多种类型的文件下载是 HTTP/1.0 的一个核心诉求，而且文件格式不仅仅局限于 ASCII 编码，还有很多其他类型编码的文件。   </p></blockquote><blockquote><p>为了让客户端和服务器能更深入地交流，HTTP/1.0 引入了<code>请求头</code>和<code>响应头</code>，它们都是以为 Key-Value 形式保存的，在 HTTP 发送请求时，会带上请求头信息，服务器返回数据时，会先返回响应头信息。<br>HTTP/1.0 的方案是通过请求头和响应头来进行协商，在发起请求时候会通过 HTTP 请求头告诉服务器它期待服务器返回什么类型的文件、采取什么形式的压缩、提供什么语言的文件以及文件的具体编码。</p></blockquote><h5 id="缝缝补补的HTTP-1-1"><a href="#缝缝补补的HTTP-1-1" class="headerlink" title="缝缝补补的HTTP/1.1"></a>缝缝补补的HTTP/1.1</h5><blockquote><p>技术继续发展、需求不断迭代更新，HTTP/1.0也不能满足需求了，HTTP/1.1又在HTTP/1.0上继续更新：</p></blockquote><h6 id="改进持久连接"><a href="#改进持久连接" class="headerlink" title="改进持久连接"></a>改进持久连接</h6><blockquote><p>HTTP/1.1 中增加了持久连接的方法，它的特点是在一个 TCP 连接上可以传输多个 HTTP 请求，只要浏览器或者服务器没有明确断开连接，那么该 TCP 连接会一直保持。<br>HTTP 的持久连接可以有效减少 TCP 建立连接和断开连接的次数，这样的好处是减少了服务器额外的负担，并提升整体 HTTP 的请求时长。<br>持久连接在 HTTP/1.1 中是默认开启的，所以你不需要专门为了持久连接去 HTTP 请求头设置信息，如果你不想要采用持久连接，可以在 HTTP 请求头中加上Connection: close。目前浏览器中对于同一个域名，默认允许同时建立 6 个 TCP 持久连接.  </p></blockquote><h6 id="不成熟的HTTP管线化"><a href="#不成熟的HTTP管线化" class="headerlink" title="不成熟的HTTP管线化"></a>不成熟的HTTP管线化</h6><blockquote><p>如果 TCP 通道中的某个请求因为某些原因没有及时返回，那么就会阻塞后面的所有请求，这就是著名的队头阻塞的问题。<br>HTTP/1.1 中试图通过管线化的技术来解决队头阻塞的问题。HTTP/1.1 中的管线化是指将多个 HTTP 请求整批提交给服务器的技术，虽然可以整批发送请求，不过服务器依然需要根据请求顺序来回复浏览器的请求。<br>FireFox、Chrome 都做过管线化的试验，但是由于各种原因，它们最终都放弃了管线化技术. </p></blockquote><h6 id="提供虚拟主机的支持"><a href="#提供虚拟主机的支持" class="headerlink" title="提供虚拟主机的支持"></a>提供虚拟主机的支持</h6><blockquote><p>在 HTTP/1.0 中，每个域名绑定了一个唯一的 IP 地址，因此一个服务器只能支持一个域名。<br>但是随着虚拟主机技术的发展，需要实现在一台物理主机上绑定多个虚拟主机，每个虚拟主机都有自己的单独的域名，这些单独的域名都公用同一个 IP 地址。<br>因此，HTTP/1.1 的请求头中增加了 Host 字段，用来表示当前的域名地址，这样服务器就可以根据不同的 Host 值做不同的处理。</p></blockquote><h6 id="对动态生成的内容提供了完美的支持"><a href="#对动态生成的内容提供了完美的支持" class="headerlink" title="对动态生成的内容提供了完美的支持"></a>对动态生成的内容提供了完美的支持</h6><blockquote><p>在设计 HTTP/1.0 时，需要在响应头中设置完整的数据大小，如Content-Length: 901，这样浏览器就可以根据设置的数据大小来接收数据。<br>不过随着服务器端的技术发展，很多页面的内容都是动态生成的，因此在传输数据之前并不知道最终的数据大小，这就导致了浏览器不知道何时会接收完所有的文件数据。<br>HTTP/1.1 通过引入 Chunk transfer 机制来解决这个问题，服务器会将数据分割成若干个任意大小的数据块，每个数据块发送时会附上上个数据块的长度，最后使用一个零长度的块作为发送数据完成的标志。这样就提供了对动态内容的支持。</p></blockquote><h6 id="客户端Cookie、安全机制"><a href="#客户端Cookie、安全机制" class="headerlink" title="客户端Cookie、安全机制"></a>客户端Cookie、安全机制</h6><blockquote><p>除此之外，HTTP/1.1 还引入了客户端 Cookie 机制和安全机制。</p></blockquote><h4 id="30-｜-HTTP-2：如何提升网络速度？"><a href="#30-｜-HTTP-2：如何提升网络速度？" class="headerlink" title="30 ｜ HTTP/2：如何提升网络速度？"></a>30 ｜ HTTP/2：如何提升网络速度？</h4><blockquote><p>HTTP/1.1为网络效率做了大量的优化，最核心的三种方式为：    </p><ul><li>增加了持久连接。    </li><li>浏览器为每个域名最多同时支持6个TCP持久连接。    </li><li>使用CDN的实现域名分片机制。 </li></ul></blockquote><h5 id="HTTP-1-1的主要问题"><a href="#HTTP-1-1的主要问题" class="headerlink" title="HTTP/1.1的主要问题"></a>HTTP/1.1的主要问题</h5><blockquote><p>HTTP/1.1对带宽的利用率却并不理想，这也是 HTTP/1.1 的一个核心问题.<br>带宽是指每秒最大能发送或者接收的字节数。我们把每秒能发送的最大字节数称为上行带宽，每秒能够接收的最大字节数称为下行带宽。  </p></blockquote><blockquote><p>出现宽带利用率不理想的原因，主要为：  </p><ul><li>第一个原因，TCP的慢启动。   </li><li>第二个原因，同时开启了多条TCP连接，那么这些连接会竞争固定的宽带。   </li><li>第三个原因，HTTP/1.1队头阻塞的问题。</li></ul></blockquote><h5 id="HTTP-2的多路复用"><a href="#HTTP-2的多路复用" class="headerlink" title="HTTP/2的多路复用"></a>HTTP/2的多路复用</h5><blockquote><p>HTTP/2 的解决方案可以总结为：一个域名只使用一个 TCP 长连接和消除队头阻塞问题.<br>具体实现就是：通过引入二进制分帧层，实现 HTTP 的多路复用技术。</p></blockquote><h5 id="HTTP-2其他特性"><a href="#HTTP-2其他特性" class="headerlink" title="HTTP/2其他特性"></a>HTTP/2其他特性</h5><blockquote><ul><li>可以设置请求的优先级。  </li><li>服务器推送。    </li><li>头部压缩。  </li></ul></blockquote><blockquote><p>HTTP/2 协议规范于 2015 年 5 月正式发布，在那之后，该协议已在互联网和万维网上得到了广泛的实现和部署。从目前的情况来看，国内外一些排名靠前的站点基本都实现了 HTTP/2 的部署。使用 HTTP/2 能带来 20%～60% 的效率提升，至于 20% 还是 60% 要看优化的程度。总之，我们也应该与时俱进，放弃 HTTP/1.1 和其性能优化方法，去“拥抱”HTTP/2</p></blockquote><h4 id="31-HTTP-3-0-甩掉TCP、TLS的包袱，构建高效网络"><a href="#31-HTTP-3-0-甩掉TCP、TLS的包袱，构建高效网络" class="headerlink" title="31 | HTTP/3.0:甩掉TCP、TLS的包袱，构建高效网络"></a>31 | HTTP/3.0:甩掉TCP、TLS的包袱，构建高效网络</h4><blockquote><p>和通常一样，介绍 HTTP/3 之前，我们先来看看 HTTP/2 到底有什么缺陷。    </p></blockquote><h5 id="1-TCP的队头阻塞"><a href="#1-TCP的队头阻塞" class="headerlink" title="1.TCP的队头阻塞"></a>1.TCP的队头阻塞</h5><blockquote><p>在 TCP 传输过程中，由于单个数据包的丢失而造成的阻塞称为 TCP 上的队头阻塞。<br>有测试数据表明，当系统达到了 2% 的丢包率时，HTTP/1.1 的传输效率反而比 HTTP/2 表现得更好。 </p></blockquote><h5 id="2-TCP建立连接的延时"><a href="#2-TCP建立连接的延时" class="headerlink" title="2.TCP建立连接的延时"></a>2.TCP建立连接的延时</h5><blockquote><p>网络延迟又称为 RTT（Round Trip Time）。我们把从浏览器发送一个数据包到服务器，再从服务器返回数据包到浏览器的整个往返时间称为 RTT。RTT 是反映网络性能的一个重要指标。 </p></blockquote><h5 id="3-TCP协议僵化"><a href="#3-TCP协议僵化" class="headerlink" title="3.TCP协议僵化"></a>3.TCP协议僵化</h5><blockquote><p>虽然我们知道了TCP的队头阻塞和建立连接延时等缺点，但是通过改进TCP协议来解决这些问题非常困难，这里说的非常困难就是指TCP协议僵化。<br>TCP协议僵化体现在两个方面：第一个是中间设备的僵化；除中间设备的僵化外，操作系统也是导致TCP协议僵化的另外一个原因。    </p></blockquote><h5 id="QUIC协议"><a href="#QUIC协议" class="headerlink" title="QUIC协议"></a>QUIC协议</h5><blockquote><p>HTTP/3 选择了一个折衷的方法——UDP 协议，基于 UDP 实现了类似于 TCP 的多路数据流、传输可靠性等功能，我们把这套功能称为 QUIC 协议。<br>HTTP/3 中的 QUIC 协议集合了以下几点功能:</p></blockquote><blockquote><ul><li>实现了类似 TCP 的流量控制、传输可靠性的功能。虽然 UDP 不提供可靠性的传输，但 QUIC 在 UDP 的基础之上增加了一层来保证数据可靠性传输。它提供了数据包重传、拥塞控制以及其他一些 TCP 中存在的特性。  </li><li>集成了 TLS 加密功能。   </li><li>实现了 HTTP/2 中的多路复用功能。  </li><li>实现了快速握手功能。    </li></ul></blockquote><h5 id="HTTP-3的挑战"><a href="#HTTP-3的挑战" class="headerlink" title="HTTP/3的挑战"></a>HTTP/3的挑战</h5><blockquote><p>通过上面的分析，我们相信在技术层面，HTTP/3 是个完美的协议。不过要将 HTTP/3 应用到实际环境中依然面临着诸多严峻的挑战，这些挑战主要来自于以下三个方面:  </p><ul><li>第一，从目前的情况来看，服务器和浏览器端都没有对 HTTP/3 提供比较完整的支持。Chrome 虽然在数年前就开始支持 Google 版本的 QUIC，但是这个版本的 QUIC 和官方的 QUIC 存在着非常大的差异。    </li><li>第二，部署 HTTP/3 也存在着非常大的问题。因为系统内核对 UDP 的优化远远没有达到 TCP 的优化程度，这也是阻碍 QUIC 的一个重要原因。  </li><li>第三，中间设备僵化的问题。这些设备对 UDP 的优化程度远远低于 TCP，据统计使用 QUIC 协议时，大约有 3%～7% 的丢包率。</li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> 浏览器工作原理与实践 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 浏览器工作原理与实践 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>每周总结第二十二期</title>
      <link href="/2019/12/07/issue-22/"/>
      <url>/2019/12/07/issue-22/</url>
      
        <content type="html"><![CDATA[<blockquote><p>这里记录过去一周，我的一些小总结。<br><img src="http://img.liugezhou.online/20191206weekly.jpeg" alt="weekly-22"></p></blockquote><a id="more"></a><h4 id="Feeling"><a href="#Feeling" class="headerlink" title="Feeling"></a>Feeling</h4><blockquote><p>推出一个新产品很难，组建一个能够持续推出新产品的团队更难。<br>我最引以为傲的产品，就是苹果公司和我在苹果公司建立的团队。<br><cite>史蒂夫·乔布斯</cite></p></blockquote><h4 id="消费者办手机号全面开启人脸比对"><a href="#消费者办手机号全面开启人脸比对" class="headerlink" title="消费者办手机号全面开启人脸比对"></a>消费者办手机号全面开启人脸比对</h4><blockquote><p>据工信部的相关规定，自12月1日起，电信企业需在实体渠道全面实施人像比对技术措施，人像比对一致方可办理入网手续。<br>这意味着，今后，中国所有注册新SIM卡的手机用户都必须接受面部识别扫描。同时，规定要求电信企业部署“人工智能和其他技术方法”以检查注册SIM卡的人员的身份。<br>今年以来，人脸识别技术在国内出现了一系列的负面新闻，比如曾红极一时的换脸软件——ZAO，还有一位大学教授起诉动物园违规采集面部信息的“中国人脸识别第一案”。这些事件背后，说明中国人脸识别行业缺乏统一标准，管理仍然比较混乱，对用户的隐私保护做得不到位。就像“办手机卡”这件事，已经有一些声音开始担心：电信运营商真的能保证我们的人脸数据不外泄吗,不会用于其他的某方面用途吗？</p></blockquote><h4 id="华为作过的恶"><a href="#华为作过的恶" class="headerlink" title="华为作过的恶"></a><a href="https://github.com/evil-huawei/evil-huawei" target="_blank" rel="noopener">华为作过的恶</a></h4><blockquote><p>Gitub上，本周star数凑凑上涨的一个项目：<br>项目介绍：「由于部分内容被控评和删帖，已经无法在中文互联网搜索到，所以本项目将收集华为作过的恶，记录这些不应该被遗忘的历史。」</p></blockquote><h4 id="一键抠图神器"><a href="#一键抠图神器" class="headerlink" title="一键抠图神器"></a><a href="http://www.picup.ai/#/" target="_blank" rel="noopener">一键抠图神器</a></h4><blockquote><p>识别图像中的人体轮廓，与背景进行分离.有人体抠图和物体抠图。   </p></blockquote><h4 id="沙拉查词"><a href="#沙拉查词" class="headerlink" title="沙拉查词"></a>沙拉查词</h4><blockquote><p>一款浏览器插件，推荐。<br><img src="https://user-gold-cdn.xitu.io/2019/10/21/16dec06bb7790bd3?imageView2/2/w/800/q/85" alt="查词"></p></blockquote><h4 id="Grid-代码生成器"><a href="#Grid-代码生成器" class="headerlink" title="Grid 代码生成器"></a><a href="https://cssgrid-generator.netlify.com/" target="_blank" rel="noopener">Grid 代码生成器</a></h4><blockquote><p>可视化地配置 Grid，你可以设置行与列的个数、指定每个格子的类、长宽占比、行间距与列间距大小等，再一键生成 Grid 的 CSS 代码.<br><img src="https://user-gold-cdn.xitu.io/2019/12/6/16eda0f218272486?imageView2/2/w/800/q/85" alt="演示"></p></blockquote><h4 id="GitHub中文排行榜"><a href="#GitHub中文排行榜" class="headerlink" title="GitHub中文排行榜"></a><a href="https://github.com/kon9chunkit/GitHub-Chinese-Top-Charts" target="_blank" rel="noopener">GitHub中文排行榜</a></h4><blockquote><p>GitHub中文排行榜，帮助你发现高分优秀中文项目、更高效地吸收国人的优秀经验成果；榜单每周更新一次.   </p></blockquote><h4 id="浏览器中的页面"><a href="#浏览器中的页面" class="headerlink" title="浏览器中的页面"></a><a href="https://www.liugezhou.online/2019/12/03/No5.%E6%B5%8F%E8%A7%88%E5%99%A8%E4%B8%AD%E7%9A%84%E9%A1%B5%E9%9D%A2/" target="_blank" rel="noopener">浏览器中的页面</a></h4><blockquote><p>前段时间在《极客时间》上学了一个专栏，通篇略过，干货不少，但理解相当不够透彻，于是计划用几周的时间，对本专栏内容用作者的总结以及自己的相对逐字理解，来个通篇的文字记录学习，书读百遍，其义自现。<br>本篇是这个专栏的第四章：<a href="https://www.liugezhou.online/2019/12/03/No5.%E6%B5%8F%E8%A7%88%E5%99%A8%E4%B8%AD%E7%9A%84%E9%A1%B5%E9%9D%A2/" target="_blank" rel="noopener">浏览器中的页面</a>。本章分为八讲。</p></blockquote><h4 id="HTTP请求中的Form-Data和Request-Payload的区别"><a href="#HTTP请求中的Form-Data和Request-Payload的区别" class="headerlink" title="HTTP请求中的Form Data和Request Payload的区别"></a>HTTP请求中的Form Data和Request Payload的区别</h4><blockquote><p>前端开发中经常会用到AJAX发送异步请求，对于POST类型的请求会附带请求数据。而常用的两种传参方式为：Form Data 和 Request Payload。    </p></blockquote><blockquote><p>方式一： Form Data形式<br>当POST请求的请求头里设置Content-Type: application/x-www-form-urlencoded(默认), 参数在请求体以标准的Form Data的形式提交，以&amp;符号拼接，参数格式为key=value&amp;key=value&amp;key=value…<br>方式二：Request Payload形式<br>如果使用AJAX原生POST请求,请求头里设置Content-Type:application/json，请求的参数会显示在Request Payload中，参数格式为JSON格式：{“key”:”value”,”key”:”value”…}，这种方式可读性会更好. 后端可以使用getRequestPayload方法来获取.<br><code>Form Data 和 Request Payload 区别</code><br>如果请求头里设置Content-Type: application/x-www-form-urlencoded，那么这个请求被认为是表单请求，参数出现在Form Data里，格式为key=value&amp;key=value&amp;key=value…<br>原生的AJAX请求头里设置Content-Type:application/json，或者使用默认的请求头Content-Type:text/plain;参数会显示在Request payload块里提交。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 每周分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 每周分享 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>No5.浏览器中的页面</title>
      <link href="/2019/12/03/No5.%E6%B5%8F%E8%A7%88%E5%99%A8%E4%B8%AD%E7%9A%84%E9%A1%B5%E9%9D%A2/"/>
      <url>/2019/12/03/No5.%E6%B5%8F%E8%A7%88%E5%99%A8%E4%B8%AD%E7%9A%84%E9%A1%B5%E9%9D%A2/</url>
      
        <content type="html"><![CDATA[<h6 id="前段时间在《极客时间》上学了一个专栏，通篇略过，干货不少，但理解相当不够透彻，于是计划用几周的时间，对本专栏内容用作者的总结以及自己的相对逐字理解，来个通篇的文字记录学习，书读百遍，其义自现。"><a href="#前段时间在《极客时间》上学了一个专栏，通篇略过，干货不少，但理解相当不够透彻，于是计划用几周的时间，对本专栏内容用作者的总结以及自己的相对逐字理解，来个通篇的文字记录学习，书读百遍，其义自现。" class="headerlink" title="前段时间在《极客时间》上学了一个专栏，通篇略过，干货不少，但理解相当不够透彻，于是计划用几周的时间，对本专栏内容用作者的总结以及自己的相对逐字理解，来个通篇的文字记录学习，书读百遍，其义自现。"></a>前段时间在《极客时间》上学了一个专栏，通篇略过，干货不少，但理解相当不够透彻，于是计划用几周的时间，对本专栏内容用作者的总结以及自己的相对逐字理解，来个通篇的文字记录学习，书读百遍，其义自现。</h6><h6 id="本篇是这个专栏的第五章：《No5-浏览器中的页面》。本章分为八节。"><a href="#本篇是这个专栏的第五章：《No5-浏览器中的页面》。本章分为八节。" class="headerlink" title="本篇是这个专栏的第五章：《No5.浏览器中的页面》。本章分为八节。"></a>本篇是这个专栏的第五章：《No5.浏览器中的页面》。本章分为八节。</h6><a id="more"></a><h4 id="21-｜-Chrome开发者工具：利用网络面板做性能分析"><a href="#21-｜-Chrome开发者工具：利用网络面板做性能分析" class="headerlink" title="21 ｜ Chrome开发者工具：利用网络面板做性能分析"></a>21 ｜ Chrome开发者工具：利用网络面板做性能分析</h4><blockquote><p>本节首先对开发者工具的各个模块进行了一个简单介绍，然后重点讲解的是NetWork面板。<br>网络面板包括：控制器、过滤器、抓图信息、时间线、详细列表和下载信息概要六个区域构成。    </p></blockquote><h5 id="1-控制器"><a href="#1-控制器" class="headerlink" title="1.控制器"></a>1.控制器</h5><blockquote><ul><li>“开始/暂停”抓包。   </li><li>全局搜索。    </li><li>Disable cache:禁止从Cache中加载资源。</li><li>Online按钮：模拟2G/3G 网络，模拟弱网环境。  </li></ul></blockquote><h5 id="2-过滤器"><a href="#2-过滤器" class="headerlink" title="2.过滤器"></a>2.过滤器</h5><blockquote><p>过滤功能。 </p></blockquote><h5 id="3-抓图信息"><a href="#3-抓图信息" class="headerlink" title="3.抓图信息"></a>3.抓图信息</h5><blockquote><p>抓图信息区域，可以用来分析用户等待页面加载时间内所看到的内容，分析用户实际的体验情况。  </p></blockquote><h5 id="4-时间线"><a href="#4-时间线" class="headerlink" title="4.时间线"></a>4.时间线</h5><blockquote><p>时间线，主要用来展示 HTTP、HTTPS、WebSocket 加载的状态和时间的一个关系，用于直观感受页面的加载过程。</p></blockquote><h5 id="5-详细列表"><a href="#5-详细列表" class="headerlink" title="5.详细列表"></a>5.详细列表</h5><blockquote><p>详细记录了每个资源从发起请求到完成请求这中间所有过程的状态，以及最终请求完成的数据信息.<br>Queuing：当浏览器发起一个请求的时候，会有很多原因导致该请求不能被立即执行，而是需要排队等待。<br>Stalled： 在发起连接之前，还有一些原因可能导致连接过程被推迟，这个推迟就表现在面板中的 Stalled 上。<br>Proxy Negotiation:若使用代理服务器，会增加一个此阶段。<br>Waiting (TTFB):通常也称为“第一字节时间”。 TTFB 是反映服务端响应速度的重要指标，对服务器来说，TTFB 时间越短，就说明服务器响应越快。<br>Content Download :这意味着从第一字节时间到接收到全部响应数据所用的时间。  </p></blockquote><h5 id="6-下载信息概要"><a href="#6-下载信息概要" class="headerlink" title="6.下载信息概要"></a>6.下载信息概要</h5><blockquote><p>重点关注 DOMContentLoaded和Load两个事件。 </p><ul><li>DOMContentLoaded:这个事件发生后，说明页面已经构建好DOM了，即DOM需要的HTML、JavaScript、CSS等文件已下载完成了。  </li><li>Load：说明浏览器已经加载了所有的资源(图像、样式等)。    </li></ul></blockquote><h4 id="22-DOM树：JavaScript是如何影响DOM树构建的？"><a href="#22-DOM树：JavaScript是如何影响DOM树构建的？" class="headerlink" title="22 | DOM树：JavaScript是如何影响DOM树构建的？"></a>22 | DOM树：JavaScript是如何影响DOM树构建的？</h4><h5 id="什么是DOM"><a href="#什么是DOM" class="headerlink" title="什么是DOM"></a>什么是DOM</h5><blockquote><p>DOM 是表述 HTML 的内部数据结构，它会将 Web 页面和 JavaScript 脚本连接起来，并过滤一些不安全的内容。   </p></blockquote><h5 id="DOM树如何生成"><a href="#DOM树如何生成" class="headerlink" title="DOM树如何生成"></a>DOM树如何生成</h5><blockquote><p>在渲染引擎内部，有一个叫 HTML 解析器（HTMLParser）的模块，它的职责就是负责将 HTML 字节流转换为 DOM 结构。<br>HTML解析器过程是：网络进程加载了多少数据，HTML解析器便解析多少数据。  </p></blockquote><h5 id="JavaScript是如何影响DOM生成的"><a href="#JavaScript是如何影响DOM生成的" class="headerlink" title="JavaScript是如何影响DOM生成的"></a>JavaScript是如何影响DOM生成的</h5><blockquote><ul><li>在两段 div 中间插入了一段 JavaScript 脚本：当HTML解析器解析到script标签的时候会暂停DOM解析，去执行这段JS脚本。 </li><li>在页面中引入 JavaScript文件：整个执行流程还是一样的，执行到 JavaScript 标签时，暂停整个 DOM 的解析，执行 JavaScript 代码，不过这里执行 JavaScript 时，需要先<code>下载这段 JavaScript 代码</code>。这里需要重点关注<code>下载环境</code>，因为 JavaScript 文件的下载过程会阻塞 DOM 解析(Chrome浏览器做的一个主要优化是预解析操作)。<br>另外也有一些相关的策略：比如使用 CDN 来加速 JavaScript 文件的加载，压缩 JavaScript 文件的体积。如果 JavaScript 文件中没有操作 DOM 相关代码，就可以将该 JavaScript 脚本设置为<code>异步加载</code>，通过 <code>async</code>或<code>defer</code> 来标记代码.  </li></ul><ol><li>async:使用 async 标志的脚本文件一旦加载完成，会立即执行.    </li><li>defer:使用了 defer 标记的脚本文件，需要在 DOMContentLoaded 事件之前执行.</li></ol></blockquote><blockquote><p>通过上面的分析，我们知道了 JavaScript 会阻塞 DOM 生成，而样式文件又会阻塞 JavaScript 的执行，所以在实际的工程中需要重点关注 JavaScript 文件和样式表文件，使用不当会影响到页面性能的。</p></blockquote><h4 id="23-｜-渲染流水线：CSS如何影响首次加载时的白屏问题"><a href="#23-｜-渲染流水线：CSS如何影响首次加载时的白屏问题" class="headerlink" title="23 ｜ 渲染流水线：CSS如何影响首次加载时的白屏问题"></a>23 ｜ 渲染流水线：CSS如何影响首次加载时的白屏问题</h4><blockquote><p>CSS资源是页面中非常重要的一环，本节首先站在渲染流水线的视角来介绍CSS是如何工作的、然后通过CSS工作流程来分分析性能瓶颈、最后讨论如何减少首次加载时的白屏问题。 </p></blockquote><h5 id="渲染流水线视角下的CSS"><a href="#渲染流水线视角下的CSS" class="headerlink" title="渲染流水线视角下的CSS"></a>渲染流水线视角下的CSS</h5><blockquote><p>首先是发起页面请求，网络进程接收到返回的HTML数据，将其发送给渲染进程，渲染进程解析HTML数据并构建DOM。<br>需要特别注意下，请求 HTML 数据和构建 DOM 中间有一段空闲时间，这个空闲时间有可能成为页面渲染的瓶颈。   </p></blockquote><blockquote><p>前面提到一嘴：Chrome浏览器做的一个主要优化是预解析操作。<br>因此，Chrome开启这个预解析进程后，在遇到JavaScript或CSS文件后，会提前下载这些文件。<br>这里也有一个空闲时间需要注意一下，就是在 DOM 构建结束之后、css 文件还未下载完成的这段时间内，渲染流水线无事可做，因为下一步是合成布局树，而合成布局树需要 CSSOM 和 DOM，所以这里需要等待 CSS 加载结束并解析成 CSSOM。 </p></blockquote><blockquote><p>CSSOM的两个作用： </p><ul><li>提供给 JavaScript 操作样式表的能力. </li><li>为布局树的合成提供基础的样式信息。</li></ul></blockquote><h5 id="影响页面展示的因素以及优化策略"><a href="#影响页面展示的因素以及优化策略" class="headerlink" title="影响页面展示的因素以及优化策略"></a>影响页面展示的因素以及优化策略</h5><blockquote><p>从发起 URL 请求开始，到首次显示页面的内容，在视觉上经历的三个阶段:    </p><ol><li>等请求发出去之后，到提交数据阶段，这时页面展示出来的还是之前页面的内容。   </li><li>提交数据之后渲染进程会创建一个空白页面，我们通常把这段时间称为解析白屏，并等待 CSS 文件和 JavaScript 文件的加载完成，生成 CSSOM 和 DOM，然后合成布局树，最后还要经过一系列的步骤准备首次渲染.  </li><li>等首次渲染完成之后，就开始进入完整页面的生成阶段了，然后页面会一点点被绘制出来。   </li></ol></blockquote><blockquote><p>这里重点关注第二个阶段：<br>该阶段的主要任务包括了：解析 HTML、下载 CSS、下载 JavaScript、生成 CSSOM、执行 JavaScript、生成布局树、绘制页面一系列操作。<br>对应策略：</p><ul><li>通过内联 JavaScript、内联 CSS 来移除这两种类型的文件下载，这样获取到 HTML 文件之后就可以直接开始渲染流程了。    </li><li>但并不是所有的场合都适合内联，那么还可以尽量减少文件大小，比如通过 webpack 等工具移除一些不必要的注释，并压缩 JavaScript 文件。 </li><li>还可以将一些不需要在解析 HTML 阶段使用的 JavaScript 标记上 sync 或者 defer。    </li><li>对于大的 CSS 文件，可以通过媒体查询属性，将其拆分为多个不同用途的 CSS 文件，这样只有在特定的场景下才会加载特定的 CSS 文件。 </li></ul></blockquote><h4 id="24-分层和合成机制：为什么CSS动画比JavaScript高效"><a href="#24-分层和合成机制：为什么CSS动画比JavaScript高效" class="headerlink" title="24 | 分层和合成机制：为什么CSS动画比JavaScript高效"></a>24 | 分层和合成机制：为什么CSS动画比JavaScript高效</h4><blockquote><p>在第五节的时候，我们知道DOM构建成功后还要经历布局、分层、绘制、合成、显示等阶段后才能显示出漂亮的页面。<br>这一节主要讲解的是渲染引擎的分层和合成机制，作者说分层和合成机制代表了浏览器最为先进的合成技术，请注意是<code>最为先进的</code>. </p></blockquote><h5 id="显示器是怎么显示图像的"><a href="#显示器是怎么显示图像的" class="headerlink" title="显示器是怎么显示图像的"></a>显示器是怎么显示图像的</h5><blockquote><p>每个显示器的固定刷新频率通常是60HZ，即每秒更新60张图片，更新的图片都来自显卡中一个叫前缓冲区的地方，，显示器所做的任务很简单，就是每秒固定读取 60 次前缓冲区中的图像，并将读取的图像显示到显示器上。<br>显卡的作用：显卡的职责就是合成新的图像，并将图像保存到后缓冲区中，一旦显卡把合成的图像写到后缓冲区，系统就会让后缓冲区和前缓冲区互换，这样就能保证显示器能读取到最新显卡合成的图像。  </p></blockquote><h5 id="帧-VS-帧率"><a href="#帧-VS-帧率" class="headerlink" title="帧 VS 帧率"></a>帧 VS 帧率</h5><blockquote><p>渲染流水线生成的每一张图片称为一帧，渲染流水线每秒更新了多少帧称为帧率。  </p></blockquote><h5 id="如何生成一帧图像"><a href="#如何生成一帧图像" class="headerlink" title="如何生成一帧图像"></a>如何生成一帧图像</h5><blockquote><p>生成一帧图像有三种方式：重排、重绘、合成。 这三种方式的渲染路径不同，通常渲染路径越长，生成图像花费的时间越久。<br>这里聚焦点在合成上 ，为了提升每帧的渲染效率，Chrome 引入了分层和合成的机制，Chrome的合成技术用三个词来概括：分层、分块、合成。</p></blockquote><h5 id="分层和合成"><a href="#分层和合成" class="headerlink" title="分层和合成"></a>分层和合成</h5><blockquote><p>你可以把一张网页想象成是由很多个图片叠加在一起的，每个图片就对应一个图层，将素材分解为多个图层的操作就称为分层。最后将这些图层合并到一起的操作就称为合成。<br>在Chrome渲染流水线中，分层体现在生成布局树之后，渲染引擎根据布局树的特点将其转化为层树，层树是渲染流水线后续流程的基础结构。<br>需要重点关注的是，合成操作是在合成线程上完成的，这也就意味着在执行合成操作时，是不会影响到主线程执行的。这就是为什么经常主线程卡住了，但是 CSS 动画依然能执行的原因。</p></blockquote><h5 id="分块"><a href="#分块" class="headerlink" title="分块"></a>分块</h5><blockquote><p>如果说分层是从宏观上提升了渲染效率，那么分块则是从微观层面提升了渲染效率。<br>在首次合成图块的时候使用一个低分辨率的图片。</p></blockquote><h5 id="如何利用分层技术优化代码"><a href="#如何利用分层技术优化代码" class="headerlink" title="如何利用分层技术优化代码"></a>如何利用分层技术优化代码</h5><blockquote><p>在写 Web 应用的时候，你可能经常需要对某个元素做几何形状变换、透明度变换或者一些缩放操作，如果使用 JavaScript 来写这些效果，会牵涉到整个渲染流水线，所以 JavaScript 的绘制效率会非常低下.<br>这时你可以使用 will-change 来告诉渲染引擎你会对该元素做一些特效变换，CSS 代码如下：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.box &#123;</span><br><span class="line">    will-change: transform, opacity;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>这段代码就是提前告诉渲染引擎 box 元素将要做几何变换和透明度变换操作，这时候渲染引擎会将该元素单独实现一帧，等这些变换发生时，渲染引擎会通过合成线程直接去处理变换，这些变换并没有涉及到主线程，这样就大大提升了渲染的效率。这也是 CSS 动画比 JavaScript 动画高效的原因.   </p></blockquote><h4 id="25-｜-页面性能：如何系统地优化页面？"><a href="#25-｜-页面性能：如何系统地优化页面？" class="headerlink" title="25 ｜ 页面性能：如何系统地优化页面？"></a>25 ｜ 页面性能：如何系统地优化页面？</h4><blockquote><p>本节所谈论的页面优化，其实就是让页面更快的显示和响应。<br>通常一个页面有三个阶段：加载阶段、交互阶段和关闭阶段。    </p><ul><li>加载阶段，是指从发出请求到渲染出完整页面的过程，影响到这个阶段的主要因素有网络和 JavaScript 脚本。  </li><li>交互阶段，主要是从页面加载完成到用户交互的整合过程，影响到这个阶段的主要因素是 JavaScript 脚本。    </li><li>关闭阶段，主要是用户发出关闭指令后页面所做的一些清理操作。<br>这里我们需要重点关注加载阶段和交互阶段，因为影响到我们体验的因素主要都在这两个阶段.</li></ul></blockquote><h5 id="加载阶段"><a href="#加载阶段" class="headerlink" title="加载阶段"></a>加载阶段</h5><blockquote><p>并非所有的资源都会阻塞页面的首次绘制，比如图片、音频、视频等文件就不会阻塞页面的首次渲染。而JavaScript、首次请求的HTML资源文件、CSS文件是会阻塞首次渲染的。把这些能阻塞页面渲染的称为关键资源。基于关键资源，细化出三个影响页面首次渲染的核心因素：   </p><ul><li>第一个是关键资源个数。  </li><li>第二个是关键资源大小。  </li><li>第三个是请求关键资源需要多少个RTT(Round Trip Time).[通常1个HTTP的数据包在14KB左右，所以0.1M的页面需要拆分成8个包来传输，也就是说需要8个RTT]。   </li></ul></blockquote><blockquote><p>然后针对核心因素，考虑优化方案：总的优化原则就是减少关键资源个数、降低关键资源大小、降低关键资源的RTT次数。</p></blockquote><h5 id="交互阶段"><a href="#交互阶段" class="headerlink" title="交互阶段"></a>交互阶段</h5><blockquote><p>交互阶段的优化，一个大的原则就是让单个帧的生成速度变快。  </p><ol><li>减少JavaScript脚本执行时间。</li><li>避免强制同步布局。【所谓强制同步布局，是指JavaScript强制将计算样式和布局操作提前到当前的任务中。】 </li><li>避免布局抖动。 </li><li>合理利用CSS合成动画。  </li><li>避免频繁的垃圾回收。   </li></ol></blockquote><h4 id="26-｜-虚拟DOM：虚拟DOM和实际的DOM有何不同？"><a href="#26-｜-虚拟DOM：虚拟DOM和实际的DOM有何不同？" class="headerlink" title="26 ｜ 虚拟DOM：虚拟DOM和实际的DOM有何不同？"></a>26 ｜ 虚拟DOM：虚拟DOM和实际的DOM有何不同？</h4><blockquote><p>本节先聊一些DOM的缺陷，然后在此基础上介绍虚拟DOM如何解决这些缺陷，最后站在双缓存和MVC的视角来聊聊虚拟DOM。</p></blockquote><h5 id="DOM的缺陷"><a href="#DOM的缺陷" class="headerlink" title="DOM的缺陷"></a>DOM的缺陷</h5><blockquote><p>通过前面对DOM的学习，我们知道对于一些复杂的页面或者目前使用非常多的单页面应用来说，其DOM结构复杂，每次操作需要去不断修改DOM树，每次操作渲染引擎都需要进行重绘、重排或者合成操作，执行一次重排或者重绘操作是非常耗时的，这样就带来了性能问题。<br>所以就需要一直方式来减少JavaScript对DOM的操作，这时候虚拟DOM就上场了。    </p></blockquote><h5 id="什么是虚拟DOM"><a href="#什么是虚拟DOM" class="headerlink" title="什么是虚拟DOM"></a>什么是虚拟DOM</h5><blockquote><p>虚拟DOM要解决的事情：  </p><ul><li>将页面改变的内容应用到虚拟DOM上，而不是直接应用在DOM上。  </li><li>变化被应用到虚拟DOM上时，虚拟DOM并不急着去渲染页面，而仅仅是调整虚拟DOM的内部状态，这样操作虚拟DOM的代价就变得非常轻了。    </li><li>在虚拟DOM收集到足够的改变时，再把这些变化一次性应用到真实的DOM上。  </li></ul></blockquote><blockquote><p>接下来从双缓存和MVC模型这两个视角来聊聊虚拟DOM：  </p><ul><li><ol><li>双缓存<br>双换粗是一种经典的思路，应用哎很多场合，能解决页面无效刷新和闪屏的问题，虚拟DOM就是双缓存思想的一种实现。<br>使用双缓存，可以先将计算的中间结果存放到另一个缓冲区中，等全部的计算结束，该缓冲区已经存储了完整的图形，这样使得整个图像的输出非常稳定。  </li></ol></li></ul><ol start="2"><li>MVC模式<br>基于MVC的设计思想广泛地渗透到各种场合，且基于MVC又衍生出了很多其他模式(如MVP、MVVM)，不过万变不离其宗，它们的基础框架都是基于MVC而来。站在MVC视角来理解虚拟DOM能让你看到更为“广阔的世界”. </li></ol></blockquote><h4 id="27-渐进式网页应用-PWA-它究竟解决了Web应用的哪些问题？"><a href="#27-渐进式网页应用-PWA-它究竟解决了Web应用的哪些问题？" class="headerlink" title="27 | 渐进式网页应用(PWA):它究竟解决了Web应用的哪些问题？"></a>27 | 渐进式网页应用(PWA):它究竟解决了Web应用的哪些问题？</h4><blockquote><p>PWA,全称是Progressive Web App，渐进式网页应用。   </p></blockquote><blockquote><p>渐进式：</p><ul><li>站在Web应用开发者来说，PWA提供了一个渐进式的过度方案，让普通站点逐步过度到Web应用。采取渐进式可以降低站点改造的代价，使得站点逐步支持各项新技术，而不是一步到位。   </li><li>站在技术角度来说，PWA技术也是一个渐进式的演化过程，在技术层面会一点点演进，比如逐渐提供更好的设备特性支持，不断优化更加流畅的动画效果，不断让页面的加载速度变得更快，不断实现本地应用的特性。<br>可以这么理解：PWA是一套理念，渐进式增强Web的优势，并通过技术手段渐进式缩短和本地应用或者小程序的距离。</li></ul></blockquote><h5 id="Web应用-VS-本地应用"><a href="#Web应用-VS-本地应用" class="headerlink" title="Web应用 VS 本地应用"></a>Web应用 VS 本地应用</h5><blockquote><p>相较于本地应用，Web应用缺陷：   </p><ul><li>首先，Web应用缺少离线使用能力，在离线或者弱网环境下基本上是无法使用的。 </li><li>其次，Web应用还缺少了消息推送的能力。   </li><li>最后，Web缺少一级入口。</li></ul></blockquote><blockquote><p>针对以上缺陷，PWA提出了两种解决方案：通过引入Service Worker来试着解决离线存储和消息推送的问题，通过引入manifest.json来解决一级入口的问题。</p></blockquote><h5 id="Service-Worker"><a href="#Service-Worker" class="headerlink" title="Service Worker"></a>Service Worker</h5><blockquote><p>在2014年的时候，标准委员会就提出来Service Worker的概念，主要思想是在页面和网络之间增加一个拦截器，主要功能就是用来缓存资源和拦截请求。</p></blockquote><blockquote><p>设计思路：<br>为避免JavaScript过多占用页面主线程时长的情况，浏览器实现了Web Worker的功能。Web Worker的目的是让JavaScript能够运行在页面主线程之外，且只能执行一些与DOM无关的JS脚本。在Chrome中，Web Worker其实就是在渲染进程中开启一个新线程，它的生命周期和页面关联。<br>“让其运行在主线程之外”就是Service Worker来自Web Worker的一个核心思想。但需要在Web Worker的基础上加上储存功能。且Service Worker还需要会为多个页面提供服务，所以还不能把Service Worker和单个页面绑定起来。<br>消息推送也是基于Service Worker来实现的。<br>最后，若要使站点支持Service Worker，首先必要的一步就是要将站点升级到HTTPS。</p></blockquote><h4 id="28-｜-WebComponent：像搭积木一样构建Web应用"><a href="#28-｜-WebComponent：像搭积木一样构建Web应用" class="headerlink" title="28 ｜ WebComponent：像搭积木一样构建Web应用"></a>28 ｜ WebComponent：像搭积木一样构建Web应用</h4><blockquote><p>首先，本节介绍了组件化开发是程序员的刚需，所谓组件化就是功能模块要实现高内聚、低耦合的特性。<br>不过由于 DOM 和 CSSOM 都是全局的，所以它们是影响了前端组件化的主要元素。<br>基于这个原因，就出现 WebComponent，它包含自定义元素、影子 DOM 和 HTML 模板三种技术，使得开发者可以隔离 CSS 和 DOM。<br>在此基础上，还重点介绍了影子 DOM 到底是怎么实现的。<br>关于 WebComponent 的未来如何，这里我们不好预测和评判，但是有一点可以肯定，WebComponent 也会采用渐进式迭代的方式向前推进，未来依然有很多坑需要去填。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 浏览器工作原理与实践 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 浏览器工作原理与实践 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>每周总结第二十一期</title>
      <link href="/2019/11/30/issue-21/"/>
      <url>/2019/11/30/issue-21/</url>
      
        <content type="html"><![CDATA[<blockquote><p>这里记录过去一周，我的一些小总结。<br> <img src="http://img.liugezhou.online/20191130No21week.jpeg" alt="weekly-21"></p></blockquote><a id="more"></a><h4 id="Feeling"><a href="#Feeling" class="headerlink" title="Feeling"></a>Feeling</h4><blockquote><p>No Feeling。</p></blockquote><h4 id="携号转网"><a href="#携号转网" class="headerlink" title="携号转网"></a>携号转网</h4><blockquote><p>工信部11月27日(周三)召开携号转网启动仪式，27日起，携号转网正式在全国提供服务。用户号码保持不变，符合条件可自由选择移动、联通、电信等运营商。电信业务经营者不得干涉用户自主选择。</p><p>网上数据：<br>“携号转网”服务正式在全国范围内拓展。此前，天津、海南等五个前期试验省(市)已于9月19日正式提供服务。据工信部数据，截至11月26日，上述五个试验省份完成携号转网用户316万，从前期数据来看，携号转网的人员不到整体的2%。中国电信、中国移动、中国联通转出的用户数占全部转出用户的比例分别是16.3%、57.6%和26.1%，转入的占比是49.3%、28.1%和22.6%。（21世纪经济报道）    </p><p>这次携号转网终于可以让移动这种巨无霸企业有些许收敛。终于让一直存在的最低消费、营业点办理、流量瞎收费等等问题有了一些的缓和。<br>多年来我一直有个心愿，就是将我这半死不活还在用的移动号能有一个最低消费，多次客服无果。在这次浩浩荡荡的携号转网行动中，一个人工电话完成了我的心愿，甚感欣慰。</p></blockquote><h4 id="网易裁员的5点思考"><a href="#网易裁员的5点思考" class="headerlink" title="网易裁员的5点思考"></a><a href="https://mp.weixin.qq.com/s/_qFUhwAZwxJaiPD-EBtDVw" target="_blank" rel="noopener">网易裁员的5点思考</a></h4><blockquote><p>网易裁员、华为前员工被公司起诉敲诈(知乎已删除此相关话题回答)等事件让企业与员工关系推到了一个热度，其实大家心知肚明，这些事情在短期内虽然得到关注，但是这样的事件长期依然不会停止。<br>不管如何，对于职场人来说要做的、可控的首先是关注且做好自己的本职工作，其次当然要了解一些相关法律知识以保障自己权益。这篇文章作者针对此次事件总结了一些《劳动合同法》的基本知识。<br><a href="https://mp.weixin.qq.com/s/_qFUhwAZwxJaiPD-EBtDVw" target="_blank" rel="noopener">网易裁员事件引发的 5 点重要思考</a></p></blockquote><h4 id="欧洲IPv4地址用光"><a href="#欧洲IPv4地址用光" class="headerlink" title="欧洲IPv4地址用光"></a>欧洲IPv4地址用光</h4><blockquote><p>2019年11月25日(周一），欧洲 IP 地址注册机构 RIPE 宣布，欧洲的 IPv4 地址全部分配光了，一个也没剩下，从此没有新的 IP 地址可以分配。</p></blockquote><blockquote><ul><li>IP地址是分配给每个联网设备的一系列号码，每个IP地址都是独一无二的。IPv4地址用光大体意味着2^32-1个联网设备地址分配完了。  </li><li>当全球IPv4地址耗尽的这一刻，IPv6早就已经进入了我们的生活,在很多APP开屏的界面，会标注已经支持IPv6技术。  </li><li>IPv4地址长度是32，支持的物理地址是2^32-1个地址；IPv6地址的长度是128，支持的物理地址是2^128-1个地址。能够对地球上每平方米提供6×1023个网络地址，在可预见的将来是不会耗尽的。 </li><li>IPv4的回路地址为: 127.0.0.1，IPv6的回路地址为 : 000:0000:0000:0000:0000:0000:0000:0001 可以简写为 ::1。 </li><li>全球IPv4地址耗尽对普通用户影响不大，更多是网络技术、运营商，以及互联网应用开发者的事情.     </li></ul></blockquote><h4 id="OffScreen"><a href="#OffScreen" class="headerlink" title="OffScreen"></a>OffScreen</h4><blockquote><p>App store上的一款时间管理软件，它是系统“屏幕使用时间”的最佳伴侣，可以记录更多的信息，还可以提醒你，比如，OffScreen 会在你每次点亮屏幕的时候，用通知提醒，这是今天第几次拿起手机，以及平均查看时长，熬夜提醒，边走边看提醒，等等，帮助你戒除一些错误的生活习惯，如果你觉得有必要管理你的手机使用时长，这款软件可以很轻松的帮助你。</p></blockquote><h4 id="免费版权图片一键搜索"><a href="#免费版权图片一键搜索" class="headerlink" title="免费版权图片一键搜索!"></a><a href="https://www.logosc.cn/so/" target="_blank" rel="noopener">免费版权图片一键搜索!</a></h4><blockquote><p>一键搜索多家免版权图库，可以使用现有模板或者上传模板素材设计图片。    </p></blockquote><h4 id="再次安利vconsole"><a href="#再次安利vconsole" class="headerlink" title="再次安利vconsole"></a>再次安利vconsole</h4><blockquote><p>在开发手机网页应用，在手机真机调试过程中，如果想有类似小程序自带的调试工具，那么可以在你的网页中使用次插件：vconsole。<br>Github仓库搜索：vonsole，对照引入即可快速简单部署。</p></blockquote><h4 id="VSCode插件–import"><a href="#VSCode插件–import" class="headerlink" title="VSCode插件–import"></a>VSCode插件–import</h4><blockquote><p>作用：当你写了一个导入语句时，它会提醒你这个包的大小，如果你发现某个包太大时，就需要考虑一下你是否真的需要引入整个包。效果实例：<br><img src="http://img.liugezhou.online/20191130importcost.png" alt="import"></p></blockquote><h4 id="CSS-Grid网格布局教程"><a href="#CSS-Grid网格布局教程" class="headerlink" title="CSS Grid网格布局教程"></a><a href="http://www.ruanyifeng.com/blog/2019/03/grid-layout-tutorial.html" target="_blank" rel="noopener">CSS Grid网格布局教程</a></h4><blockquote><p>前端非常重要的两大布局分别是：Flex弹性布局和Grid网格布局。<br>Flex 布局是轴线布局，只能指定”项目”针对轴线的位置，可以看作是一维布局。<br>Grid 布局则是将容器划分成”行”和”列”，产生单元格，然后指定”项目所在”的单元格，可以看作是二维布局。<br>Grid 布局远比 Flex 布局强大。<br><img src="https://www.wangbase.com/blogimg/asset/201903/1_bg2019032501.png" alt="Grid"></p></blockquote><h4 id="前端模块化"><a href="#前端模块化" class="headerlink" title="前端模块化"></a><a href="https://www.liugezhou.online/2019/11/27/%E5%89%8D%E7%AB%AF%E6%A8%A1%E5%9D%97%E5%8C%96/" target="_blank" rel="noopener">前端模块化</a></h4><blockquote><p>最近项目在调试微信支付的前端SDK引入的时候，官网文档有一句：“JSSDk的引入，支持使用 AMD/CMD 标准模块加载方法加载”。<br>对CommonJS、AMD、CMD、ES6Module等概念与代码实例的理解甚是混淆，于是查阅资料、总结<a href="https://www.liugezhou.online/2019/11/27/%E5%89%8D%E7%AB%AF%E6%A8%A1%E5%9D%97%E5%8C%96/" target="_blank" rel="noopener">此文</a>。</p></blockquote><h4 id="nginx简单的几个命令"><a href="#nginx简单的几个命令" class="headerlink" title="nginx简单的几个命令"></a>nginx简单的几个命令</h4><blockquote><ul><li>服务端安装nginx：<code>yum install nginx</code>，通过yum安装的程序默认在etc目录下。  </li><li>查看nginx安装路径：<code>which nginx</code>或者<code>whereis nginx</code>.    </li><li>nginx启动：<code>service start nginx</code>,nginx停止：<code>service stop nginx</code>.   </li><li>查看nginx的运行状况：<code>ps -ef | grep nginx</code>. </li><li>nginx的配置主要查看<code>conf</code>文件，包括一些包含配置、域名解析、文件路径、监听端口、转发端口等。<br>nginx重启命令：<code>nginx -s reload</code>或者<code>nginx -c /etc/nginx/nginx.conf</code><br>nginx测试配置文件是否正确：<code>nginx -t</code><br>杀掉所有nginx进程：<code>killall nginx</code>    </li></ul></blockquote><h4 id="浏览器中的页面循环系统"><a href="#浏览器中的页面循环系统" class="headerlink" title="浏览器中的页面循环系统"></a><a href="https://www.liugezhou.online/2019/11/25/No4.%E6%B5%8F%E8%A7%88%E5%99%A8%E4%B8%AD%E7%9A%84%E9%A1%B5%E9%9D%A2%E5%BE%AA%E7%8E%AF%E7%B3%BB%E7%BB%9F/" target="_blank" rel="noopener">浏览器中的页面循环系统</a></h4><blockquote><p>前段时间在《极客时间》上学了一个专栏，通篇略过，干货不少，但理解相当不够透彻，于是计划用几周的时间，对本专栏内容用作者的总结以及自己的相对逐字理解，来个通篇的文字记录学习，书读百遍，其义自现。<br>本篇是这个专栏的第四章：<a href="https://www.liugezhou.online/2019/11/25/No4.%E6%B5%8F%E8%A7%88%E5%99%A8%E4%B8%AD%E7%9A%84%E9%A1%B5%E9%9D%A2%E5%BE%AA%E7%8E%AF%E7%B3%BB%E7%BB%9F/" target="_blank" rel="noopener">浏览器中的页面循环系统</a>。本章分为六讲。   </p></blockquote><blockquote><p><a href="https://liugezhou.gitbook.io/liugezhou/hong-guan-shi-jiao-xia-de-liu-lan-qi/no4.-liu-lan-qi-zhong-de-ye-mian-xun-huan-xi-tong" target="_blank" rel="noopener">Gitbook在线阅读</a></p></blockquote><blockquote><ul><li>本章通过分析线程处理任务的不同方式介绍了事件循环系统、消息队列以及IPC等知识引出微任务的作用。</li><li>介绍了setTimeout和XMLHttpRequest两个WebAPI的实现方式. </li><li>由浅入深讲解微任务：包括微任务的实现原理以及微任务的应用：Promise。   </li><li>最后讲解了比Promise更容易阅读的async/await的原理及用法。</li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> 每周分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 每周分享 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端模块化</title>
      <link href="/2019/11/27/%E5%89%8D%E7%AB%AF%E6%A8%A1%E5%9D%97%E5%8C%96/"/>
      <url>/2019/11/27/%E5%89%8D%E7%AB%AF%E6%A8%A1%E5%9D%97%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h4 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h4><blockquote><p>最近在梳理前端的公众号支付流程，从前端流程微信JSSDK的引入开始查阅文档。<br>在引入JS文件一小段中，文档中备注：“支持使用 AMD/CMD 标准模块加载方法加载”。<br>于是，想到对CommonJS、AMD、CMD、ES6Module等概念与代码实例的理解甚是混淆，于是学习、总结此文。  </p></blockquote><a id="more"></a><h4 id="前端模块化"><a href="#前端模块化" class="headerlink" title="前端模块化"></a>前端模块化</h4><blockquote><p>2009年，美国程序员Ryan Dahl创造了node.js项目，将javascript语言用于服务器端编程。这标志”Javascript模块化编程”正式诞生。<br>因为老实说，在浏览器环境下，没有模块也不是特别大的问题，毕竟网页程序的复杂性有限；但是在服务器端，一定要有模块，与操作系统和其他应用程序互动，否则根本没法编程。NodeJS是CommonJS规范的实现，webpack 也是以CommonJS的形式来书写。</p></blockquote><blockquote><p>为了提高代码的复用率，方便代码进行管理，我也不知先后(应该CommonJS最早吧)的出现了一系列的模块化的规范：CommonJS、AMD、CMD以及（ES6Module）。</p></blockquote><blockquote><p>通常来讲：一个文件就是一个模块，有自己的作用域，只向外暴露特定的变量和函数。</p></blockquote><blockquote><p>这三个规范都是为javascript模块化加载而生的，都是在用到或者预计要用到某些模块时候加载该模块，使得大量的系统巨大的庞杂的代码得以很好的组织和管理。模块化使得我们在使用和管理代码的时候不那么混乱，而且也方便了多人的合作。</p></blockquote><h4 id="CommonJS"><a href="#CommonJS" class="headerlink" title="CommonJS"></a>CommonJS</h4><blockquote><ul><li>CommonJS是一个更偏向于服务端的规范。Node.js就是CommonJS规范的主要实践者。 </li><li>CommonJS不适用浏览器是因为：此规范是同步加载模块，对于服务器端来说，所有的模块都是在本地磁盘，等待模块时间就是硬盘读取文件时间，很小，但对浏览器而言，设计到网速、代理更原因，同步加载会造成阻塞，浏览器处于“假死”状态，所以浏览器端出现了AMD规范。</li></ul></blockquote><blockquote><p>代码实现拓展：<a href="http://javascript.ruanyifeng.com/nodejs/module.html" target="_blank" rel="noopener">CommonJS规范</a></p></blockquote><h4 id="AMD"><a href="#AMD" class="headerlink" title="AMD"></a>AMD</h4><blockquote><ul><li>AMD是<code>Asynchronous Module Definition</code>的缩写，即“异步模块定义”，它采用异步方式加载模块(模块的加载不影响它后面语句的运行),且会提前加载。</li><li>AMD同CommonJS一样也是使用require加载模块，但不同的是，AMD要求两个参数：require([module],callback).  </li></ul></blockquote><p>实例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"> // 定义一个模块--math.js</span><br><span class="line">    define(function() &#123;</span><br><span class="line">    var add = function(x, y) &#123;</span><br><span class="line">        return x + y;</span><br><span class="line">    &#125;</span><br><span class="line">    return  &#123;</span><br><span class="line">        add: add</span><br><span class="line">    &#125;</span><br><span class="line">//加载方法如下</span><br><span class="line">require([&apos;math&apos;], function(math) &#123;</span><br><span class="line">  alert(math.add(1, 1));</span><br><span class="line">&#125;)</span><br><span class="line">//如果math模块还依赖其他模块，写法如下：</span><br><span class="line">define([&apos;dependenceModule&apos;], function(dependenceModule) &#123;</span><br><span class="line">    // todo</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><ul><li>当require()函数加载math模块的时候，就会先加载dependenceModule模块。当有多个依赖时，就将所有的依赖都写在define()函数第一个参数数组中，所以说AMD是依赖前置的。这不同于CMD规范，它是依赖就近的。</li></ul></blockquote><h4 id="CMD"><a href="#CMD" class="headerlink" title="CMD"></a>CMD</h4><blockquote><p>CMD与AMD最大的不同就是：CMD推崇依赖就近，延迟执行。可以在代码的任意一行写入依赖：<br><code>define(factory)</code><br>当factory为函数时，表示是模块的构造方法。<br>执行该构造方法，可以得到模块向外提供的接口。<br>factory 方法在执行时，默认会传入三个参数：require、exports 和 module.</p></blockquote><blockquote><p>AMD与CMD代码对比：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">// CMD</span><br><span class="line">   define(function(require, exports, module) &#123;</span><br><span class="line">   var a = require(&apos;./a&apos;);</span><br><span class="line">   a.doSomething();</span><br><span class="line">   var b = require(&apos;./b&apos;);</span><br><span class="line">   b.doSomething();</span><br><span class="line">   &#125;)</span><br><span class="line">   // AMDdefine([&apos;a&apos;, &apos;b&apos;], function(a, b) &#123;</span><br><span class="line">   a.doSomething();</span><br><span class="line">   b.doSomething();</span><br><span class="line">   &#125;)</span><br></pre></td></tr></table></figure><h4 id="ES6"><a href="#ES6" class="headerlink" title="ES6"></a>ES6</h4><blockquote><p>ES6 在语言标准的层面上，实现了模块功能，而且实现得相当简单，旨在成为浏览器和服务器通用的模块解决方案。其模块功能主要由两个命令构成：export和import.<br>export命令用于规定模块的对外接口，import命令用于输入其他模块提供的功能。<br>ES6还提供了export default命令，为模块指定默认输出，对应的import语句不需要使用大括号.</p></blockquote><h4 id="ES6模块与CommonJS模块差异"><a href="#ES6模块与CommonJS模块差异" class="headerlink" title="ES6模块与CommonJS模块差异"></a>ES6模块与CommonJS模块差异</h4><blockquote><ul><li>CommonJS 模块输出的是一个值的拷贝，ES6 模块输出的是值的引用。  </li><li>CommonJS 模块输出的是一个值的拷贝，ES6 模块输出的是值的引用。</li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> web前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端模块化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>No4.浏览器中的页面循环系统</title>
      <link href="/2019/11/25/No4.%E6%B5%8F%E8%A7%88%E5%99%A8%E4%B8%AD%E7%9A%84%E9%A1%B5%E9%9D%A2%E5%BE%AA%E7%8E%AF%E7%B3%BB%E7%BB%9F/"/>
      <url>/2019/11/25/No4.%E6%B5%8F%E8%A7%88%E5%99%A8%E4%B8%AD%E7%9A%84%E9%A1%B5%E9%9D%A2%E5%BE%AA%E7%8E%AF%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<h6 id="前段时间在《极客时间》上学了一个专栏，通篇略过，干货不少，但理解相当不够透彻，于是计划用几周的时间，对本专栏内容用作者的总结以及自己的相对逐字理解，来个通篇的文字记录学习，书读百遍，其义自现。"><a href="#前段时间在《极客时间》上学了一个专栏，通篇略过，干货不少，但理解相当不够透彻，于是计划用几周的时间，对本专栏内容用作者的总结以及自己的相对逐字理解，来个通篇的文字记录学习，书读百遍，其义自现。" class="headerlink" title="前段时间在《极客时间》上学了一个专栏，通篇略过，干货不少，但理解相当不够透彻，于是计划用几周的时间，对本专栏内容用作者的总结以及自己的相对逐字理解，来个通篇的文字记录学习，书读百遍，其义自现。"></a>前段时间在《极客时间》上学了一个专栏，通篇略过，干货不少，但理解相当不够透彻，于是计划用几周的时间，对本专栏内容用作者的总结以及自己的相对逐字理解，来个通篇的文字记录学习，书读百遍，其义自现。</h6><h6 id="本篇是这个专栏的第四章：《浏览器中的页面循环系统》。本章分为六节。"><a href="#本篇是这个专栏的第四章：《浏览器中的页面循环系统》。本章分为六节。" class="headerlink" title="本篇是这个专栏的第四章：《浏览器中的页面循环系统》。本章分为六节。"></a>本篇是这个专栏的第四章：《浏览器中的页面循环系统》。本章分为六节。</h6><a id="more"></a><h4 id="15｜消息队列和事件循环：页面是怎么“活”起来的？"><a href="#15｜消息队列和事件循环：页面是怎么“活”起来的？" class="headerlink" title="15｜消息队列和事件循环：页面是怎么“活”起来的？"></a>15｜消息队列和事件循环：页面是怎么“活”起来的？</h4><blockquote><p>本节主要专门介绍页面的事件循环系统，希望通过几段总结能对页面的事件循环系统有一个整体上的理解。    </p></blockquote><h5 id="使用单线程处理安排好的任务"><a href="#使用单线程处理安排好的任务" class="headerlink" title="使用单线程处理安排好的任务"></a>使用单线程处理安排好的任务</h5><blockquote><p>单线程处理的流程就是把所有任务代码按照顺序写进主线程里，等线程运行时，这些任务按照顺序在线程中执行，等所有任务执行完成，线程自动退出。        </p></blockquote><h5 id="在线程运行过程中处理任务"><a href="#在线程运行过程中处理任务" class="headerlink" title="在线程运行过程中处理任务"></a>在线程运行过程中处理任务</h5><blockquote><p>当然并非所有任务都可以使用单线程处理，有时我们需要在线程运行的过程中处理任务。<br>那么要想在线程运行过程中，能接受并执行新的任务，就需要采用事件循环机制。<br>相较与单线程处理任务，此线程做了两点改进：  </p><ul><li>引入了循环机制。(比如一个实现方式是添加for循环。线程一直循环执行)。 </li><li>引入了事件。</li></ul></blockquote><h5 id="处理其他线程发送过来的任务"><a href="#处理其他线程发送过来的任务" class="headerlink" title="处理其他线程发送过来的任务"></a>处理其他线程发送过来的任务</h5><blockquote><p>如何设计好一个线程模型，能让其能够接受其他线程发送的消息呢？<br>一个通用的模式是消息队列：「消息队列是一种数据结构、可以存放要执行的任务。它符合队列“先进先出”的特点。」<br>有了队列之后继续改进步骤如下：    </p><ul><li>添加一个消息队列。  </li><li>IO线程中产生的新任务添加进消息队列尾部。    </li><li>渲染主进程会循环地从消息队列头部中读取任务，执行任务。  </li></ul></blockquote><h5 id="处理其他进程发送过来的任务"><a href="#处理其他进程发送过来的任务" class="headerlink" title="处理其他进程发送过来的任务"></a>处理其他进程发送过来的任务</h5><blockquote><p>渲染进程专门有一个 IO 线程用来接收其他进程传进来的消息，接收到消息之后，会将这些消息组装成任务发送给渲染主线程，后续的步骤就和前面的“处理其他线程发送的任务”一样。    </p></blockquote><h5 id="消息队列中的任务类型"><a href="#消息队列中的任务类型" class="headerlink" title="消息队列中的任务类型"></a>消息队列中的任务类型</h5><blockquote><p>消息队列中的任务都有哪些呢？<br>输入事件（鼠标滚动、点击、移动）、微任务、文件读写、WebSocket、JavaScript 定时器等等。除此之外，消息队列中还包含了很多与页面相关的事件，如 JavaScript 执行、解析 DOM、样式计算、布局计算、CSS 动画等。    </p></blockquote><h5 id="页面使用单线程的缺点"><a href="#页面使用单线程的缺点" class="headerlink" title="页面使用单线程的缺点"></a>页面使用单线程的缺点</h5><blockquote><ul><li>第一个问题是如何处理高优先级的任务。<br>由于优先级的问题使得微任务应用而生，微任务是如何权衡效率和实时性的呢?<br>通常我们把消息队列中的任务称为宏任务，每个宏任务中都包含了一个微任务队列，在执行宏任务的过程中，如果 DOM 有变化，那么就会将该变化添加到微任务列表中，这样就不会影响到宏任务的继续执行，因此也就解决了执行效率的问题.等宏任务中的主要功能都直接完成之后，这时候，渲染引擎并不着急去执行下一个宏任务，而是执行当前宏任务中的微任务，因为 DOM 变化的事件都保存在这些微任务队列中，这样也就解决了实时性问题   </li><li>第二个是如何解决单个任务执行时长过久的问题.<br>针对这种情况，JavaScript 可以通过回调功能来规避这种问题，也就是让要执行的 JavaScript 任务滞后执行。  </li></ul></blockquote><h5 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h5><blockquote><p>如果有一些确定好的任务，可以使用一个单线程来按照顺序处理这些任务，这是第一版线程模型。<br>要在线程执行过程中接收并处理新的任务，就需要引入循环语句和事件系统，这是第二版线程模型。<br>如果要接收其他线程发送过来的任务，就需要引入消息队列，这是第三版线程模型。<br>如果其他进程想要发送任务给页面主线程，那么先通过 IPC 把任务发送给渲染进程的 IO 线程，IO 线程再把任务发送给页面主线程。<br>消息队列机制并不是太灵活，为了适应效率和实时性，引入了微任务。</p></blockquote><h4 id="16-｜-WebAPI-setTimeout是如何实现的"><a href="#16-｜-WebAPI-setTimeout是如何实现的" class="headerlink" title="16 ｜ WebAPI : setTimeout是如何实现的"></a>16 ｜ WebAPI : setTimeout是如何实现的</h4><h5 id="浏览器怎么实现setTimeout"><a href="#浏览器怎么实现setTimeout" class="headerlink" title="浏览器怎么实现setTimeout"></a>浏览器怎么实现setTimeout</h5><blockquote><p>通过上一小节的学习，我们知道：对于一些事件执行的过程是：这些事件先被添加到消息队列，然后事件循环系统就会按照消息队列中的顺序来执行事件。也就是说，执行一段异步任务，需要先将任务添加到消息队列中。<br>不过通过定时器设置回调函数有点特别，它们需要在指定的时间间隔内被调用，但消息队列中的任务是按照顺序执行的，所以为了保证回调函数能在指定时间内执行，你不能将定时器的回调函数直接添加到消息队列中。<br>从Chromium队列的部分源码中我们知道，在Chrome中除了正常使用的消息队列外，还有另外一个消息队列，这个队列中维护了<code>需要延迟执行的任务列表</code>，包括了定时器和Chromium内部一些需要延迟执行的任务。<br>由于消息队列排队和一些系统级别的限制，通过setTimeout设置的回调任务并非总是可以实时的执行，这样就不能满足一些实时性要求较高的需求。    </p></blockquote><h5 id="使用setTimeout的一些注意事项"><a href="#使用setTimeout的一些注意事项" class="headerlink" title="使用setTimeout的一些注意事项"></a>使用setTimeout的一些注意事项</h5><blockquote><ul><li>如果当前任务执行时间过久，会影响延迟到期定时器任务的执行。  </li><li>如果 setTimeout 存在嵌套调用，那么系统会设置最短时间间隔为 4 毫秒。 </li><li>未激活的页面，setTimeout 执行最小间隔是 1000 毫秒.  </li><li>延时执行时间有最大值:大约 24.8 天   </li><li>使用 setTimeout 设置的回调函数中的 this 不符合直觉. </li></ul></blockquote><h4 id="17-WebAPI：XMLHttpRequest是怎么实现的"><a href="#17-WebAPI：XMLHttpRequest是怎么实现的" class="headerlink" title="17 | WebAPI：XMLHttpRequest是怎么实现的?"></a>17 | WebAPI：XMLHttpRequest是怎么实现的?</h4><blockquote><p>在深入讲解 XMLHttpRequest 之前，我们得先介绍下<code>同步回调</code>和<code>异步回调</code>这两个概念.   </p></blockquote><h5 id="回调函数-VS-系统调用栈"><a href="#回调函数-VS-系统调用栈" class="headerlink" title="回调函数 VS 系统调用栈"></a>回调函数 VS 系统调用栈</h5><blockquote><p><code>回调函数</code>：将一个函数作为参数传递给另外一个函数，那作为参数的这个函数就是回调函数。</p></blockquote><blockquote><p>同步回调函数代码：  </p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">let callback = function()&#123;</span><br><span class="line">    console.log(&apos;i am do homework&apos;)</span><br><span class="line">&#125;</span><br><span class="line">function doWork(cb) &#123;</span><br><span class="line">    console.log(&apos;start do work&apos;)</span><br><span class="line">    cb()</span><br><span class="line">    console.log(&apos;end do work&apos;)</span><br><span class="line">&#125;</span><br><span class="line">doWork(callback)</span><br><span class="line">//start do work</span><br><span class="line">//i am do homework</span><br><span class="line">//end do work</span><br></pre></td></tr></table></figure><blockquote><p>异步回调函数代码：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">let callback = function()&#123;</span><br><span class="line">    console.log(&apos;i am do homework&apos;)</span><br><span class="line">&#125;</span><br><span class="line">function doWork(cb) &#123;</span><br><span class="line">    console.log(&apos;start do work&apos;)</span><br><span class="line">    setTimeout(cb,1000)   </span><br><span class="line">    console.log(&apos;end do work&apos;)</span><br><span class="line">&#125;</span><br><span class="line">doWork(callback)</span><br></pre></td></tr></table></figure><h5 id="XMLHttpRequest运作机制"><a href="#XMLHttpRequest运作机制" class="headerlink" title="XMLHttpRequest运作机制"></a>XMLHttpRequest运作机制</h5><blockquote><p>对回调函数有了一个认知后，那么接着我们来分析下从发起请求到接收数据的完整流程：    </p></blockquote><blockquote><p>首先从XMLHttpRequest的用法开始：</p><ul><li>第一步：创建XMLHttpRequest对象。  </li><li>第二步：为xhr对象注册回调函数。</li><li>第三步：配置基础的请求信息。    </li><li>第四步：发起请求。  </li></ul></blockquote><h5 id="XMLRequest使用过程中的“坑”"><a href="#XMLRequest使用过程中的“坑”" class="headerlink" title="XMLRequest使用过程中的“坑”"></a>XMLRequest使用过程中的“坑”</h5><blockquote><ul><li>跨域问题    </li><li>HTTPS混合内容的问题：这是指HTTPS页面中包含了不符合HTTPS安全要求的内容，比如包含了HTTP资源。</li></ul></blockquote><h5 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h5><blockquote><p>setTimeout 是直接将延迟任务添加到延迟队列中，而 XMLHttpRequest 发起请求，是由浏览器的其他进程或者线程去执行，然后再将执行结果利用 IPC 的方式通知渲染进程，之后渲染进程再将对应的消息添加到消息队列中。    </p></blockquote><h4 id="18-宏任务和微任务：不是所有的任务都是一个待遇"><a href="#18-宏任务和微任务：不是所有的任务都是一个待遇" class="headerlink" title="18 | 宏任务和微任务：不是所有的任务都是一个待遇"></a>18 | 宏任务和微任务：不是所有的任务都是一个待遇</h4><blockquote><p>前面我们已经知道微任务可以在实时性和效率之间做一个有效的权衡。微任务已被广泛应用，比如Promise以及以Promise为基础开发出来的很多其他的技术。<br>宏任务与微任务的区别：    </p></blockquote><h5 id="宏任务"><a href="#宏任务" class="headerlink" title="宏任务"></a>宏任务</h5><blockquote><p>页面中的大部分任务都是在主线程上执行的。如渲染事件、用户交互事件、JavaScript脚本执行事件、网络请求等等。这些在消息队列中的任务称为宏任务。<br>虽然宏任务可以满足我们大部门的日常需求，但是有时对时间精度要求较高的需求，宏任务就难以胜任了。</p></blockquote><h5 id="微任务"><a href="#微任务" class="headerlink" title="微任务"></a>微任务</h5><blockquote><p>微任务就是一个需要异步执行的函数，执行时机是在主函数执行结束之后、当前宏任务结束之前。<br>产生微任务的两种方式：    </p><ul><li>第一种方式是使用 MutationObserver 监控某个 DOM 节点，然后再通过 JavaScript 来修改这个节点，或者为这个节点添加、删除部分子节点，当 DOM 节点发生变化时，就会产生 DOM 变化记录的微任务。   </li><li>第二种方式是使用 Promise，当调用 Promise.resolve() 或者 Promise.reject() 的时候，也会产生微任务。<br>通过微任务的工作流程，我们可以得出如下结论：  </li><li>微任务和宏任务是绑定的，每个宏任务在执行时，会创建自己的微任务队列。    </li><li>微任务的执行时长会影响到当然宏任务的执行时长，因此写代码的时候一定要注意微任务的执行时长。  </li><li>在一个宏任务中，分别创建一个用于回调的宏任务和微任务，无论什么情况下，微任务早于宏任务执行。</li></ul></blockquote><h5 id="监听DOM变化演变"><a href="#监听DOM变化演变" class="headerlink" title="监听DOM变化演变"></a>监听DOM变化演变</h5><blockquote><p>微任务应用在了<code>MutationObserver</code>中，<code>MutationObserver</code>是用来监听DOM变化的一套方法。 监听DOM变化一直是前端工程师一项非常核心的需求。<br>下面是监听DOM变化演变的简单总结:  </p><ul><li>早起观测DOM变化就是轮询检测。比如使用 setTimeout 或者 setInterval 来定时检测 DOM 是否有改变。无疑这种方式实时性不好，效率还低效。   </li><li>2000年的时候引入了Mutation Event，Mutation Event采用了观察者的设计模式，当DOM有变动时立即出发相应的事件。此方式属于同步回调。虽然这种方式解决了实时性问题，但是因为会产生较大性能开销、导致页面性能出现问题，被反对使用并逐步从web标准事件中删除。  </li><li>MutationObserver替代MutationEvent，相较于Event方式，Observer采用了一次触发异步回调。且采用微任务的处理，使得实时性与性能功能都得到有效提高。</li></ul></blockquote><h4 id="19-｜-Promise：使用Promise，告别回调函数"><a href="#19-｜-Promise：使用Promise，告别回调函数" class="headerlink" title="19 ｜ Promise：使用Promise，告别回调函数"></a>19 ｜ Promise：使用Promise，告别回调函数</h4><blockquote><p>微任务的另一个应用：Promise。<br>本节简单介绍JavaScript引入Promise的动机，以及解决问题的几个核心关键点。<br>讲到动机，也就是说Promise解决了什么问题。众所周知，他解决的是异步编码风格的问题。 </p></blockquote><blockquote><p>页面编程的一大特点就是：异步编程，下面分析异步编程的代码风格进化。    </p><ul><li>之前的代码编码风格，一段代码可能会出现五次回调，这种回调导致代码逻辑不连贯、不连线，不符合人的直觉。  </li><li>然后开发人员们通过封装异步代码，让处理流程变得线性，但是这种处理方式如果嵌套了太多的回调函数就容易陷入回调地狱。</li><li>陷入回调地狱的后代码看上去很乱主要是两点：嵌套调用和任务不确定性(成功或者失败)。于是Promise出现，解决了这两个问题。</li></ul></blockquote><h5 id="Promise：消灭嵌套调用和多次错误处理"><a href="#Promise：消灭嵌套调用和多次错误处理" class="headerlink" title="Promise：消灭嵌套调用和多次错误处理"></a>Promise：消灭嵌套调用和多次错误处理</h5><blockquote><p>Promise通过两步解决嵌套回调问题：</p><ul><li>首先，Promise实现了回调函数的延时绑定（.then）  </li><li>其次，将回调函数返回值穿透到最外层。</li></ul></blockquote><blockquote><p>Promise处理异常：<br>通过最后一个catch，将所有对象合并到一个函数来处理之前的所有异常。</p></blockquote><h5 id="Promise与微任务"><a href="#Promise与微任务" class="headerlink" title="Promise与微任务"></a>Promise与微任务</h5><blockquote><p> Promise 之所以要使用微任务是由 Promise 回调函数延迟绑定技术导致的。</p></blockquote><h4 id="20-｜-async-await：使用同步的方式去写异步代码"><a href="#20-｜-async-await：使用同步的方式去写异步代码" class="headerlink" title="20 ｜ async/await：使用同步的方式去写异步代码"></a>20 ｜ async/await：使用同步的方式去写异步代码</h4><blockquote><p>当Promise解决回调地狱代码风格的同时，我们发现写很多的then函数，还是有些不太容易阅读。<br>基于这个原因，ES7引入了async/await，这是JavaScript异步编程的一个重大改进，提供了在不阻塞主线程的情况下使用同步代码实现异步访问资源的能力。并且使得代码逻辑更加清晰。</p></blockquote><blockquote><p>本节首先介绍生成器(Generator)是如何工作的，接着介绍了Generator的底层实现机制–协程。<br>这是因为async/await使用了Generator和Promise两种技术。所以紧接着通过Generator和Promise来分析async/await到底是如何通过以同步方式来编写异步代码的。  </p></blockquote><h5 id="生成器-VS-协程"><a href="#生成器-VS-协程" class="headerlink" title="生成器 VS 协程"></a>生成器 VS 协程</h5><blockquote><p>生成器函数：生成器函数是一个带星号函数，而且是可以暂停执行和恢复执行的。<br>具体使用方式就是：在生成器函数内部执行一段代码，若遇到yiled关键字，那JS引擎将返回该关键字后面的内容且暂停该函数执行，外部函数通过next方法恢复函数的执行。<br>那么JavaScript引擎V8是如何实现一个函数的暂停和恢复的？    </p></blockquote><blockquote><p>搞懂它的暂停和恢复，需要首先了解协程的概念。协程是一种比线程更加轻量级的存在。可以把协程看作是跑在线程上的任务，一个线程可以存在多个协程。但在线程上同时只能执行一个协程。<br>在JS中，生成器就是协程的一种实现方式。</p></blockquote><h5 id="asnyc-await"><a href="#asnyc-await" class="headerlink" title="asnyc/await"></a>asnyc/await</h5><blockquote><p>为了更近一步改进生成器代码，ES7引入了async/awit，实现了更加直观简洁的代码。<br>async/aswit技术背后的实现就是Promise和生成器应用。往底层说就是微服务和协程应用。</p></blockquote><blockquote><p>async: 是一个通过异步执行并隐式返回Promise作为结果的函数。<br>await: 我们知道了 async 函数返回的是一个 Promise 对象，那下面我们再结合文中这段代码来看看 await 到底是什么。   </p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">async function foo() &#123;</span><br><span class="line">    console.log(1)</span><br><span class="line">    let a = await 100</span><br><span class="line">    console.log(a)</span><br><span class="line">    console.log(2)</span><br><span class="line">&#125;</span><br><span class="line">console.log(0)</span><br><span class="line">foo()</span><br><span class="line">console.log(3)</span><br><span class="line">//输出结果：0 3 100 2</span><br></pre></td></tr></table></figure><blockquote><p>async/await 无疑是异步编程领域非常大的一个革新，也是未来的一个主流的编程风格。其实，除了 JavaScript，Python、Dart、C# 等语言也都引入了 async/await，使用它不仅能让代码更加整洁美观，而且还能确保该函数始终都能返回 Promise。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 浏览器工作原理与实践 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 浏览器工作原理与实践 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>每周总结第二十期</title>
      <link href="/2019/11/24/issue-20/"/>
      <url>/2019/11/24/issue-20/</url>
      
        <content type="html"><![CDATA[<blockquote><p>这里记录过去一周，我的一些小总结。</p></blockquote><a id="more"></a><h4 id="Feeling"><a href="#Feeling" class="headerlink" title="Feeling"></a>Feeling</h4><blockquote><p>本周并没有总结什么。<br>只是最近几周有个感觉，更是事实，那些写技术文章的公号里充满了软文宣传、推广。<br>技术公号的文章凡是过千的便是一个有些影响力的传播媒介了。连阮一峰这种大牛级别的公众号文章的阅读量也不过万。<br>对于商业卖课者来说，公众号的每一个阅读量都代表了那些实打实的目标群体客户都接受到了广告的洗礼，<br>群体性的技术公号集体沦陷开始卖课，这应该就是那种说程序员技术变现的广泛实例。<br>我只是很好奇这种一篇推广文，会给开发者多少广告费用。 </p></blockquote><h4 id="琅琊榜图谱"><a href="#琅琊榜图谱" class="headerlink" title="琅琊榜图谱"></a>琅琊榜图谱</h4><blockquote><p>周末倍速在家刷了一遍琅琊榜，理不清谁的谁是谁的谁：</p><p>梅长苏的爸爸是林燮(xie)。<br>林燮的妹妹是宸妃.<br>宸妃的儿子是祁王–&gt; 祁王的儿子是庭生。<br>宸妃的老公是粱王。</p><p>梅长苏的妈妈是晋阳长公主。<br>晋阳长公主的哥哥是粱王。</p><p>晋阳长公主的妹妹是莅阳长公主.<br>莅阳长公主的丈夫是谢玉。</p><p>莅阳长公主的情人是南楚晟王宇文霖。<br>宇文霖的亲生儿子是萧景睿。</p><p>粱王还有个老婆是静妃，静妃的儿子是靖王。<br>粱王还有个老婆是越贵妃，越贵妃的儿子是太子。<br>粱王还有个老婆是言皇后，言皇后的养子是誉王。 </p><p>梅长苏赤焰军旧部里面有个叫聂峰。<br>聂峰的老婆是夏冬。<br>夏冬的师哥是夏秋。<br>夏冬的师傅是夏江。</p><p>……</p></blockquote><h4 id="网传网易让保安将绝症员工赶出公司"><a href="#网传网易让保安将绝症员工赶出公司" class="headerlink" title="网传网易让保安将绝症员工赶出公司"></a>网传网易让保安将绝症员工赶出公司</h4><blockquote><p>我们大家都知道不应该因为一个员工事件来骂网易云音乐或者任何的网易应用。<br>只是大家需要一个有个官方账号的回应。<br>大家维护的不仅仅是这一起人血馒头事件。<br>更加维护的是自己的生存社会环境。<br>【每个人对于他所处的社会都负有责任，这个社会的弊病需要每一个人去维护】。</p></blockquote><h4 id="曾文正公全集"><a href="#曾文正公全集" class="headerlink" title="曾文正公全集"></a>曾文正公全集</h4><blockquote><p>盖士人读书，第一要有志，第二要有识，第三要有恒。有志则不甘为下流；有识则知学问无尽，不敢以一得自足，如河伯之观海，如井蛙之窥天，皆无识者也；有恒则断无不成之事。此三者缺一不可。诸弟此时惟有识不可以骤几；至于有志，有恒，则诸弟勉之而已。<br>中心思想：要学会读书。<br><cite>引自《曾文正公全集》</cite></p></blockquote><h4 id="CSS定位详解"><a href="#CSS定位详解" class="headerlink" title="CSS定位详解"></a><a href="http://www.ruanyifeng.com/blog/2019/11/css-position.html" target="_blank" rel="noopener">CSS定位详解</a></h4><blockquote><p>CSS 有两个最重要的基本属性，前端开发必须掌握：display 和 position。<br>display属性指定网页的布局。两个重要的布局，弹性布局<code>flex</code>和网格布局<code>grid</code>。<br>本文介绍非常有用的position属性。作者希望通过10分钟的阅读，帮助大家轻松掌握网页定位，说清楚浏览器如何计算网页元素的位置，尤其是新引进的<code>sticky</code>定位.   </p></blockquote><h4 id="Github"><a href="#Github" class="headerlink" title="Github"></a>Github</h4><blockquote><p>iOS APP FOR BETA 版本已经预约两个星期了，还是没有下文，真是让人焦灼。 </p></blockquote><h4 id="No3-V8工作原理"><a href="#No3-V8工作原理" class="headerlink" title="No3.V8工作原理"></a><a href="https://www.liugezhou.online/2019/11/21/No3.V8%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86/" target="_blank" rel="noopener">No3.V8工作原理</a></h4><blockquote><p>前段时间在《极客时间》上学了一个专栏，通篇略过，干货不少，但理解相当不够透彻，于是计划用几周的时间，对本专栏内容用作者的总结以及自己的相对逐字理解，来个通篇的文字记录学习，书读百遍，其义自现。<br>本篇是这个专栏的第三章：<a href="https://www.liugezhou.online/2019/11/21/No3.V8%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86/" target="_blank" rel="noopener">No3.V8工作原理</a>。本章分为三讲。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 每周分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 每周分享 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>No3.V8工作原理</title>
      <link href="/2019/11/21/No3.V8%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86/"/>
      <url>/2019/11/21/No3.V8%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h6 id="前段时间在《极客时间》上学了一个专栏，通篇略过，干货不少，但理解相当不够透彻，于是计划用几周的时间，对本专栏内容用作者的总结以及自己的相对逐字理解，来个通篇的文字记录学习，书读百遍，其义自现。"><a href="#前段时间在《极客时间》上学了一个专栏，通篇略过，干货不少，但理解相当不够透彻，于是计划用几周的时间，对本专栏内容用作者的总结以及自己的相对逐字理解，来个通篇的文字记录学习，书读百遍，其义自现。" class="headerlink" title="前段时间在《极客时间》上学了一个专栏，通篇略过，干货不少，但理解相当不够透彻，于是计划用几周的时间，对本专栏内容用作者的总结以及自己的相对逐字理解，来个通篇的文字记录学习，书读百遍，其义自现。"></a>前段时间在《极客时间》上学了一个专栏，通篇略过，干货不少，但理解相当不够透彻，于是计划用几周的时间，对本专栏内容用作者的总结以及自己的相对逐字理解，来个通篇的文字记录学习，书读百遍，其义自现。</h6><h6 id="本篇是这个专栏的第三章：《V8工作原理》。本章分为三节。"><a href="#本篇是这个专栏的第三章：《V8工作原理》。本章分为三节。" class="headerlink" title="本篇是这个专栏的第三章：《V8工作原理》。本章分为三节。"></a>本篇是这个专栏的第三章：《V8工作原理》。本章分为三节。</h6><a id="more"></a><h4 id="12｜栈空间和堆空间：数据是如何存储的？"><a href="#12｜栈空间和堆空间：数据是如何存储的？" class="headerlink" title="12｜栈空间和堆空间：数据是如何存储的？"></a>12｜栈空间和堆空间：数据是如何存储的？</h4><h5 id="JavaScript是什么类型的语言"><a href="#JavaScript是什么类型的语言" class="headerlink" title="JavaScript是什么类型的语言"></a>JavaScript是什么类型的语言</h5><blockquote><p>在使用之前就需要确认其变量数据类型的语言称为<code>静态语言</code>，相反地，我们把运行过程中需要检查数据类型的语言称为<code>动态语言</code>。<br>我们把变量直接可以偷偷进行转换的操作称为隐式类型转换，支持隐式类型的语言称为<code>弱类型语言</code>，不支持隐式类型转换的语言称为<code>强类型语言</code>。      </p></blockquote><blockquote><p>显然，JavaScript是动态弱类型语言。    </p></blockquote><h5 id="JavaScript的数据类型"><a href="#JavaScript的数据类型" class="headerlink" title="JavaScript的数据类型"></a>JavaScript的数据类型</h5><blockquote><p>JavaScript的数据类型一共有八种：<br>基本数据类型：Boolean、Undefined、Null、String、Number、Bigint、Symbol<br>引用数据类型：Object  </p></blockquote><h5 id="内存空间"><a href="#内存空间" class="headerlink" title="内存空间"></a>内存空间</h5><blockquote><p>在JavaScript的执行过程中，主要有三种类型内存空间：代码空间、栈空间、堆空间。<br>原始类型的数据值都是直接保存在栈中的，引用类型的值都是保存在堆空间中的。<br>通常情况下，栈空间都不会设置太大，主要用来存放一些原始类型的小数据。堆空间很大，能存放很多大的数据。<br>原始类型的赋值会完整复制变量值，而引用类型的赋值是复制引用地址。    </p></blockquote><h5 id="产生闭包的核心"><a href="#产生闭包的核心" class="headerlink" title="产生闭包的核心"></a>产生闭包的核心</h5><blockquote><p>第一步是需要预扫描内部函数。<br>第二步是把内部函数引用的外部变量保存到堆中。  </p></blockquote><h4 id="13-｜-垃圾回收：垃圾数据是如何自动回收的？"><a href="#13-｜-垃圾回收：垃圾数据是如何自动回收的？" class="headerlink" title="13 ｜ 垃圾回收：垃圾数据是如何自动回收的？"></a>13 ｜ 垃圾回收：垃圾数据是如何自动回收的？</h4><hr><blockquote><p>对一些不需要的数据，我们称之为垃圾数据，由于内存是有限的，为了释放内存，我们需要对这么垃圾数据进行回收。  </p></blockquote><h5 id="不同语言的垃圾回收策略"><a href="#不同语言的垃圾回收策略" class="headerlink" title="不同语言的垃圾回收策略"></a>不同语言的垃圾回收策略</h5><blockquote><p>通常情况，垃圾回收分为手动回收到自动回收两种策略。<br>如C/C++C++使用的是手动回收策略，何时分配内存、何时销毁内存都是由代码控制的。<br>如JavaScript、Java、Python等语言使用的是自动回收策略，产生的垃圾数据是由垃圾回收器来释放的。  </p></blockquote><h5 id="调用栈中的数据是如何回收的"><a href="#调用栈中的数据是如何回收的" class="headerlink" title="调用栈中的数据是如何回收的"></a>调用栈中的数据是如何回收的</h5><blockquote><p>栈中的垃圾回收相对比较简单：JavaScript引擎会通过向下移动ESP来销毁该函数保存在栈中的执行上下文。<br>ESP：记录当前执行状态的指针。</p></blockquote><h5 id="堆中的数据是如何回收的"><a href="#堆中的数据是如何回收的" class="headerlink" title="堆中的数据是如何回收的"></a>堆中的数据是如何回收的</h5><blockquote><p>要回收堆中的数据，需要用到JavaScript中的垃圾回收器。</p></blockquote><blockquote><p>在介绍V8如何实现回收之前，首先要了解下<code>代际假说</code>内容。这是垃圾回收领域一个重要的术语，代际假说有两个特点：    </p><ul><li>第一个是大部分对象在内存中存在的时间很短，简单来说，就是很多对象一经分配内存，很快就变得不可访问.  </li><li>第二个是不死的对象，会活得更久.<br>这两个特点不仅仅适用于JavaScript，同样适应于大多数动态语言，如Java、Python等。    </li></ul></blockquote><blockquote><p>在V8中会把堆分为新生代(支持1-8M容量)和老生代(容量大很多)两个区域，新生代中存放的是生存时间短的对象，老生代中存放的是生存时间久的对象。  </p><ul><li>副垃圾回收器，主要负责新生代的垃圾回收。    </li><li>主垃圾回收器，主要负责老生代的垃圾回收。   </li></ul></blockquote><h5 id="垃圾回收器的工作流程"><a href="#垃圾回收器的工作流程" class="headerlink" title="垃圾回收器的工作流程"></a>垃圾回收器的工作流程</h5><blockquote><p>不论是主垃圾回收器还是副垃圾回收器，它们都有一套共同的执行流程。  </p><ul><li>第一步为标记活动对象与非活动对象。活动对象为还在使用的对象，非活动对象为要准备进行垃圾回收的对象。  </li><li>第二步是回收非活动对象所占用的内存。既在标记后统一清理被标记为可回收的对象的内存。    </li><li>第三步是内存整理。这是因为在频繁回收对象后，内存中会存在不连续空间，把这些不连续空间称为内存碎片。因此需要整理这些碎片，这是为了当那些较大连续内存出现时可以方便分配。【这步是可选的，副垃圾回收器不会产生内存碎片】。<br>然后按照上述流程来分析新生代垃圾回收器（副垃圾回收器）和老生代垃圾回收器（主垃圾回收器）是如何处理垃圾回收的。    </li></ul></blockquote><h5 id="副垃圾回收器"><a href="#副垃圾回收器" class="headerlink" title="副垃圾回收器"></a>副垃圾回收器</h5><blockquote><p>副垃圾回收器主要负责新生代区的垃圾回收，虽然老生代区域不大，但是垃圾回收比较频繁。<br>新生代中用Scavenge算法来处理。【Scavenge算法：把新生代空间对半划分为两个区域，一个是对象区域，一个是空闲区域。】<br>过程大概就是：新加入对象放入都对象区域，快写满时进行垃圾清理操作，副垃圾回收器把这些对象复制到空闲区域，复制后的空闲区域没有内存碎片。完成复制后，对象区域与空闲区域角色翻转。角色翻转的操作能让新生代中的两块区域无限重复使用下去。<br>因为新生区的空间不大，所以很容易被存活的对象装满整个区域。为了解决这个问题，JavaScript 引擎采用了对象晋升策略，也就是经过两次垃圾回收依然还存活的对象，会被移动到老生区中。</p></blockquote><h5 id="主垃圾回收器"><a href="#主垃圾回收器" class="headerlink" title="主垃圾回收器"></a>主垃圾回收器</h5><blockquote><p>主垃圾回收器主要负责老生区中的垃圾回收.<br>老生区中对象的两个特点：一是存活时间长，二是对象占用空间大。<br>由特点我们知道采用副垃圾回收器的Scavenge算法显然不满足需求，因此，主垃圾回收器采用的是<code>标记-清除（Mark-Sweep）</code>算法进行垃圾回收。碎片过多会导致大对象无法分配到足够的连续内存，于是又产生了另外一种算法——<code>标记 - 整理（Mark-Compact）</code> .</p></blockquote><h4 id="14-编译器和解释器：V8是如何执行一段JavaScript代码的"><a href="#14-编译器和解释器：V8是如何执行一段JavaScript代码的" class="headerlink" title="14 | 编译器和解释器：V8是如何执行一段JavaScript代码的"></a>14 | 编译器和解释器：V8是如何执行一段JavaScript代码的</h4><hr><blockquote><p>深入了解V8的工作原理，我们需要弄清除一些概念和原理，比如本节要学习的：<code>编译器(Compiler)</code>、<code>解释器(Interpreter)</code>、<code>抽象语法树(AST)</code>、<code>字节码(Bytecode)</code>、<code>即时编译器(JIT)</code>等概念。 </p></blockquote><h5 id="编译器和解释器"><a href="#编译器和解释器" class="headerlink" title="编译器和解释器"></a>编译器和解释器</h5><blockquote><p>编译器和解释器“翻译”代码的流程大致可阐述如下：    </p><ol><li>在编译型语言的编译过程中，编译器首先会依次对源代码进行词法分析、语法分析，生成抽象语法树（AST），然后是优化代码，最后再生成处理器能够理解的机器码。如果编译成功，将会生成一个可执行的文件。但如果编译过程发生了语法或者其他的错误，那么编译器就会抛出异常，最后的二进制文件也不会生成成功。    </li><li>在解释型语言的解释过程中，同样解释器也会对源代码进行词法分析、语法分析，并生成抽象语法树（AST），不过它会再基于抽象语法树生成字节码，最后再根据字节码来执行程序、输出结果。    </li></ol></blockquote><h5 id="V8是如何执行一段JavaScript代码的"><a href="#V8是如何执行一段JavaScript代码的" class="headerlink" title="V8是如何执行一段JavaScript代码的"></a>V8是如何执行一段JavaScript代码的</h5><blockquote><p>V8在执行过程中既有解释器，又有编译器。分解其执行流程如下：    </p></blockquote><h6 id="1-生成抽象语法树-AST-和执行上下文"><a href="#1-生成抽象语法树-AST-和执行上下文" class="headerlink" title="1.生成抽象语法树(AST)和执行上下文"></a>1.生成抽象语法树(AST)和执行上下文</h6><blockquote><p>那么这个抽象语法树AST是什么呢？<br>首先我们知道高级语言只是开发者可以理解的语言，但是让编译器或者解释器来理解就非常困难了。对于编译器或者解释器来说，他可以理解的是AST，所以无论是解释性语言还是编译型语言，在编译过程中，都会生成一个AST。<br>一段代码经过javascript-ast站点处理后，AST的结构和代码结构非常之相似，具体结构就不展示了，类似于DOM树。AST的生成需要经过两个阶段： </p><ul><li>第一阶段是<code>分词</code>，又称为<code>词法分析</code>。其作用是将一行行的源码拆解成一个个 token。所谓 token，指的是语法上不可能再分的、最小的单个字符或字符串。  </li><li>第二阶段是<code>解析</code>,又称为<code>语法分析</code>。其作用是将上一步生成的 token 数据，根据语法规则转为 AST。    </li></ul></blockquote><h6 id="2-生成字节码"><a href="#2-生成字节码" class="headerlink" title="2.生成字节码"></a>2.生成字节码</h6><blockquote><p>有了 AST 和执行上下文后，那接下来的第二步，解释器 Ignition 就登场了，它会根据 AST 生成字节码，并解释执行字节码。<br>字节码就是介于 AST 和机器码之间的一种代码。但是与特定类型的机器码无关，字节码需要通过解释器将其转换为机器码后才能执行.之所以出现字节码，是Chrome团队为了解决内存占用问题而引入的。    </p></blockquote><h6 id="3-执行代码"><a href="#3-执行代码" class="headerlink" title="3.执行代码"></a>3.执行代码</h6><blockquote><p>生成字节码之后，接下来就进入了执行阶段。<br>在执行阶段，通常解释器逐条执行字节码，如果发现有热点代码(一段代码被重复执行多次)，那后台编译器会把该段热点的字节码编译为高效的机器码，然后当再次执行这段被优化的代码时，只需要执行编译后的机器码就可以了。这种字节码配合解释器和编译器的技术就称为<code>即时编译(JIT)</code>.</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 浏览器工作原理与实践 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 浏览器工作原理与实践 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>每周总结第十九期</title>
      <link href="/2019/11/17/issue-19/"/>
      <url>/2019/11/17/issue-19/</url>
      
        <content type="html"><![CDATA[<blockquote><p>这里记录过去一周，我的一些小总结。</p></blockquote><a id="more"></a>。<p><img src="http://img.liugezhou.online/weekly19" alt="weekly-19"></p><h4 id="Feeling"><a href="#Feeling" class="headerlink" title="Feeling"></a>Feeling</h4><blockquote><p>由于自己的职业关系，比较关注一些技术、软件、工具、科技等方面的讯息。<br>这些讯息的爆炸、扩散，让我一次又一次在潜意识里提醒自己：淡定下来，无论窗外之事多么热闹，都不要影响自己的心态，按着自己的节奏去学习、吸收、渗透。</p></blockquote><h4 id="Idea永久激活"><a href="#Idea永久激活" class="headerlink" title="Idea永久激活"></a><a href="https://mp.weixin.qq.com/s/1VBxhZNC4kq2KckT6Jqwfw" target="_blank" rel="noopener">Idea永久激活</a></h4><blockquote><p>Idea工具30天体验结束，找了一些网上的激活方法，大多方法都失效了，最终在这篇文章的指引下，成功激活，推荐推荐。<br>激活传送门：<a href="https://mp.weixin.qq.com/s/1VBxhZNC4kq2KckT6Jqwfw" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/1VBxhZNC4kq2KckT6Jqwfw</a></p></blockquote><h4 id="GitLens"><a href="#GitLens" class="headerlink" title="GitLens"></a>GitLens</h4><blockquote><p>它是 VSCode 中非常令人推荐的一个插件，简直是Git神器，码农必备。 每一行代码旁边都有日志，代码是谁提交的一目了然。   </p></blockquote><h4 id="Gitbook"><a href="#Gitbook" class="headerlink" title="Gitbook"></a>Gitbook</h4><blockquote><p>Gitbook编写在线文档，可以非常方便快速的将自己的md、html、zip、docx等文件倒入，实现快速部署。<br>不需域名、不需其他的任何配置，即可快速实现在线浏览。<br>但是需要<code>过墙</code>。<br>我花了十分钟导入两篇文章后的效果：<a href="https://mingzhou.gitbook.io/liugezhou/" target="_blank" rel="noopener">https://mingzhou.gitbook.io/liugezhou/</a></p></blockquote><h4 id="诺基亚老照片"><a href="#诺基亚老照片" class="headerlink" title="诺基亚老照片"></a>诺基亚老照片</h4><blockquote><p>这个工具可以生成老式诺基亚手机的短信图片。<br>网页版：<a href="https://zzkia.noddl.me:8020" target="_blank" rel="noopener">https://zzkia.noddl.me:8020</a><br>微信小程序：【次元蜜蜂】。  </p></blockquote><h4 id="Github-for-mobile-iOS-beta"><a href="#Github-for-mobile-iOS-beta" class="headerlink" title="Github for mobile iOS beta"></a><a href="https://github.com/mobile" target="_blank" rel="noopener">Github for mobile iOS beta</a></h4><blockquote><p>11 月 13 日，GitHub 年度开发者大会—GitHub Universe 2019 在美国旧金山举行。<br>为改善用户体验，GitHub 在本次大会上宣布推出移动端，即 GitHub App 。<br>目前，官方已经上线 iOS 版，不过，却是 beta（公测版），因此用户暂时无法通过 App Store 下载，可以通过官方渠道下载尝鲜。<br>但是，我等</p></blockquote><h4 id="Bytespider"><a href="#Bytespider" class="headerlink" title="Bytespider"></a>Bytespider</h4><blockquote><p>[很多社区用户纷纷反馈，一种名为 Bytespider 的爬虫爬取他们的网站信息的频率太高，直接把网站搞瘫痪了。大家顺着爬虫的 IP 地址查了一下，发现 Bytespider 应该就是今日头条的搜索爬虫。]<sup><a href="https://mp.weixin.qq.com/s/KXg8xAf_TOAROMhqJVQQBQ" target="_blank" rel="noopener">来源</a></sup>  </p></blockquote><blockquote><p>robots.txt 协议:<br>也称为爬虫协议、爬虫规则、机器人协议等。robots.txt文件是存储在网站根目录下的 txt 文本文档。这是网站和蜘蛛之间的协议。该网站告诉搜索引擎哪些页面可以被抓取，哪些页面不想通过机器人协议被抓取。</p></blockquote><h4 id="浏览器中的JavaScript执行机制"><a href="#浏览器中的JavaScript执行机制" class="headerlink" title="浏览器中的JavaScript执行机制"></a><a href="https://www.liugezhou.online/2019/11/11/No2.%E6%B5%8F%E8%A7%88%E5%99%A8%E4%B8%AD%E7%9A%84JavaScript%E6%89%A7%E8%A1%8C%E6%9C%BA%E5%88%B6/" target="_blank" rel="noopener">浏览器中的JavaScript执行机制</a></h4><blockquote><p>前段时间在《极客时间》上学了一个专栏，通篇略过，干货不少，但理解相当不够透彻，于是计划用几周的时间，对本专栏内容用作者的总结以及自己的相对逐字理解，来个通篇的文字记录学习，书读百遍，其义自现。<br>本篇是这个专栏的第二章：<a href="https://www.liugezhou.online/2019/11/11/No2.%E6%B5%8F%E8%A7%88%E5%99%A8%E4%B8%AD%E7%9A%84JavaScript%E6%89%A7%E8%A1%8C%E6%9C%BA%E5%88%B6/" target="_blank" rel="noopener">浏览器中的JavaScript执行机制</a>。本章分为五讲。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 每周分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 每周分享 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>No2.浏览器中的JavaScript执行机制</title>
      <link href="/2019/11/11/No2.%E6%B5%8F%E8%A7%88%E5%99%A8%E4%B8%AD%E7%9A%84JavaScript%E6%89%A7%E8%A1%8C%E6%9C%BA%E5%88%B6/"/>
      <url>/2019/11/11/No2.%E6%B5%8F%E8%A7%88%E5%99%A8%E4%B8%AD%E7%9A%84JavaScript%E6%89%A7%E8%A1%8C%E6%9C%BA%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<h6 id="前段时间在《极客时间》上学了一个专栏，通篇略过，干货不少，但理解相当不够透彻，于是计划用几周的时间，对本专栏内容用作者的总结以及自己的相对逐字理解，来个通篇的文字记录学习，书读百遍，其义自现。"><a href="#前段时间在《极客时间》上学了一个专栏，通篇略过，干货不少，但理解相当不够透彻，于是计划用几周的时间，对本专栏内容用作者的总结以及自己的相对逐字理解，来个通篇的文字记录学习，书读百遍，其义自现。" class="headerlink" title="前段时间在《极客时间》上学了一个专栏，通篇略过，干货不少，但理解相当不够透彻，于是计划用几周的时间，对本专栏内容用作者的总结以及自己的相对逐字理解，来个通篇的文字记录学习，书读百遍，其义自现。"></a>前段时间在《极客时间》上学了一个专栏，通篇略过，干货不少，但理解相当不够透彻，于是计划用几周的时间，对本专栏内容用作者的总结以及自己的相对逐字理解，来个通篇的文字记录学习，书读百遍，其义自现。</h6><h6 id="本篇是这个专栏的第二章：《浏览器中的JavaScript执行机制》。本章分为五节。"><a href="#本篇是这个专栏的第二章：《浏览器中的JavaScript执行机制》。本章分为五节。" class="headerlink" title="本篇是这个专栏的第二章：《浏览器中的JavaScript执行机制》。本章分为五节。"></a>本篇是这个专栏的第二章：《浏览器中的JavaScript执行机制》。本章分为五节。</h6><a id="more"></a><h4 id="07｜变量提升：JavaScript代码是按顺序执行的吗？"><a href="#07｜变量提升：JavaScript代码是按顺序执行的吗？" class="headerlink" title="07｜变量提升：JavaScript代码是按顺序执行的吗？"></a>07｜变量提升：JavaScript代码是按顺序执行的吗？</h4><blockquote><p>本节主要讲解<code>执行上下文</code>相关的内容。</p></blockquote><blockquote><p>通过一些代码的执行顺序与经验我们知道：    </p><ul><li>在执行过程中，若使用了未声明的变量，那么 JavaScript 执行会报错。    </li><li>在一个变量定义之前使用它，不会出错，但是该变量的值会为 undefined，而不是定义时的值。    </li><li>在一个函数定义之前使用它，不会出错，且函数能正确执行。</li></ul></blockquote><h5 id="变量提升"><a href="#变量提升" class="headerlink" title="变量提升"></a>变量提升</h5><blockquote><p>所谓的变量提升，是指在 JavaScript 代码执行过程中，JavaScript 引擎把变量的声明部分和函数的声明部分提升到代码开头的“行为”。变量被提升后，会给变量设置默认值，这个默认值就是我们熟悉的 undefined.<br>之所以会发生变量提升，是因为一段JavaScript代码在执行之前，需要被JavaScript引擎编译，编译完成之后，才会进入执行阶段。也就是说在编译阶段，变量和函数的声明提升到了开头。    </p></blockquote><h4 id="08-｜调用栈：为什么JavaScript代码会出现栈溢出？"><a href="#08-｜调用栈：为什么JavaScript代码会出现栈溢出？" class="headerlink" title="08 ｜调用栈：为什么JavaScript代码会出现栈溢出？"></a>08 ｜调用栈：为什么JavaScript代码会出现栈溢出？</h4><blockquote><p>一般有三种情况，当一段代码执行的时候JS引擎对其进行编译并创建执行上下文：</p><ol><li>当 JavaScript 执行全局代码的时候，会编译全局代码并创建全局执行上下文，而且在整个页面的生存周期内，全局执行上下文只有一份.  </li><li>当调用一个函数的时候，函数体内的代码会被编译，并创建函数执行上下文，一般情况下，函数执行结束之后，创建的函数执行上下文会被销毁。   </li><li>当使用 eval 函数的时候，eval 的代码也会被编译，并创建执行上下文。</li></ol></blockquote><h5 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h5><blockquote><ul><li>每调用一个函数，JavaScript 引擎会为其创建执行上下文，并把该执行上下文压入调用栈，然后 JavaScript 引擎开始执行函数代码。 </li><li>如果在一个函数 A 中调用了另外一个函数 B，那么 JavaScript 引擎会为 B 函数创建执行上下文，并将 B 函数的执行上下文压入栈顶。   </li><li>当前函数执行完毕后，JavaScript 引擎会将该函数的执行上下文弹出栈。   </li><li>当分配的调用栈空间被占满时，会引发“堆栈溢出”问题。</li></ul></blockquote><h4 id="09-块级作用域：var缺陷以及为什么要引入let和const"><a href="#09-块级作用域：var缺陷以及为什么要引入let和const" class="headerlink" title="09 | 块级作用域：var缺陷以及为什么要引入let和const"></a>09 | 块级作用域：var缺陷以及为什么要引入let和const</h4><h5 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h5><blockquote><p>作用域是指在程序中定义变量的区域，该位置决定了变量的生命周期。通俗地理解，作用域就是变量与函数的可访问范围，即作用域控制着变量和函数的可见性和生命周期。<br>ES6出现之前，JS的作用域只有两种：<code>全局作用域</code>和<code>函数作用域</code>。 ES6出现，引入了<code>块级作用域</code>。</p></blockquote><h5 id="在同一段代码中，ES6-是如何做到既要支持变量提升的特性，又要支持块级作用域的呢？"><a href="#在同一段代码中，ES6-是如何做到既要支持变量提升的特性，又要支持块级作用域的呢？" class="headerlink" title="在同一段代码中，ES6 是如何做到既要支持变量提升的特性，又要支持块级作用域的呢？"></a>在同一段代码中，ES6 是如何做到既要支持变量提升的特性，又要支持块级作用域的呢？</h5><blockquote><p>当一段代码里面既有var声明的变量也有let声明的变量的时候：  </p><ul><li>函数内部通过var声明的变量，在编译阶段全都被存放到<code>变量环境</code>里面.  </li><li>通过let声明的变量，在编译阶段会被存放到<code>词法环境</code>中。 </li><li>在函数作用域内部，通过let声明的变量并没有被存放到词法环境中。<br>也就是说：通过理解词法环境的结构和工作机制，块级作用域是通过词法环境的栈结构来实现的，而变量提升是通过变量环境来实现的，通过两者的结合，JavaScript引擎也就同时支持了变量 提升和块级作用域了。</li></ul></blockquote><h4 id="10-｜-作用域和闭包：代码中出现相同的变量，JavaScript引擎是如何选择的"><a href="#10-｜-作用域和闭包：代码中出现相同的变量，JavaScript引擎是如何选择的" class="headerlink" title="10 ｜ 作用域和闭包：代码中出现相同的变量，JavaScript引擎是如何选择的"></a>10 ｜ 作用域和闭包：代码中出现相同的变量，JavaScript引擎是如何选择的</h4><h5 id="作用域链"><a href="#作用域链" class="headerlink" title="作用域链"></a>作用域链</h5><blockquote><p>理解作用域链是理解闭包的基础，而闭包在JavaScript中无处不在，同时作用域和作用域链还是作用语言的基础，所以我们先来学习一下<code>作用域链</code>。<br>理解了调用栈、执行上下文、词法环境、变量环境等概念，那么你理解起来作用域链也会很容易,看下面一段代码：</p><pre><code>function bar() {   console.log(myName)}function foo() {   var myName = &quot;局部变量&quot;   bar()}var myName = &quot;全局变量&quot;foo()</code></pre><p>通过上面的代码，我们知道最终打印出来的结果是：”全局变量“。<br>这是因为，当一段代码使用了一个变量后，JavaScript引擎会首先在“当前的执行上下文”中去查找该变量。若没有找到，由于每个执行上下文都包含一个外部引用指向外部执行上下文，所以bar函数中的变量会去全局上下文中区域查找。我们把这个查找的链条就称为作用域链。</p></blockquote><h5 id="词法作用域"><a href="#词法作用域" class="headerlink" title="词法作用域"></a>词法作用域</h5><blockquote><p>foo 函数调用的 bar 函数，那为什么 bar 函数的外部引用是全局执行上下文，而不是 foo 函数的执行上下文？了解这个问题我们继续来学习词法作用域：<br>词法作用域就是指作用域是由代码中函数声明的位置来决定的，所以词法作用域是静态的作用域，通过它就能够预测代码在执行过程中如何查找标识符。<br>然后，根据词法作用域，foo 和 bar 的上级作用域都是全局作用域，所以如果 foo 或者 bar 函数使用了一个它们没有定义的变量，那么它们会到全局作用域去查找。也就是说，词法作用域是代码阶段就决定好的，和函数是怎么调用的没有关系。</p></blockquote><h5 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h5><blockquote><p>在 JavaScript 中，根据词法作用域的规则，内部函数总是可以访问其外部函数中声明的变量，当通过调用一个外部函数返回一个内部函数后，即使该外部函数已经执行结束了，但是内部函数引用外部函数的变量依然保存在内存中，我们就把这些变量的集合称为闭包。比如外部函数是 foo，那么这些变量的集合就称为 foo 函数的闭包。<br>在使用闭包的时候，要尽量注意一个原则：如果该闭包会一直使用，那么它可以作为全局变量而存在；但如果使用频率不高，而且占用内存又比较大的话，那就尽量让它成为一个局部变量。</p></blockquote><h4 id="11-｜-this：从JavaScript执行上下文的视角讲清楚this"><a href="#11-｜-this：从JavaScript执行上下文的视角讲清楚this" class="headerlink" title="11 ｜ this：从JavaScript执行上下文的视角讲清楚this"></a>11 ｜ this：从JavaScript执行上下文的视角讲清楚this</h4><blockquote><p>首先我们要知道，在对象内部的方法中使用对象内部的属性是一个非常普遍的需求，但是JavaScript作用域机制并不支持这一点，基于这个需求，JavaScript搞出了一套this机制。    </p></blockquote><blockquote><p>在前几节中，我们提到执行上下文中包含了：<code>变量环境</code>、<code>词法环境</code>、<code>外部环境</code>、还有一个没有提及的<code>this</code>,this是和执行上下文绑定的，每个执行上下文都有一个this。<br>在08节我们总结了执行上下文主要分三种：全局执行上下文、函数执行上下文和eval执行上下文。<br>对应的this也只有这三种：全局执行上下文中的this、函数执行上下中的this和eval中的this(不做讨论)。    </p><ul><li>全局执行上下文中的this：全局执行上下文中的this指向window对象。  </li><li>函数执行上下文中的this：<ol><li>默认情况下调用一个函数，其执行上下文中的 this 也是指向 window 对象的.  </li><li>通过函数的call方法设置其this指向其他对象（还可以使用bind和apply方法来设置函数执行上下文中的this）。   </li><li>通过对象调用方法设置。（使用对象来调用其内部的一个方法，该方法的 this 是指向对象本身的。在全局环境中调用一个函数，函数内部的this指向的是全局变量window）。   </li><li>通过构造函数中设置。   </li></ol></li></ul></blockquote><h5 id="this的设计缺陷以及应对方案"><a href="#this的设计缺陷以及应对方案" class="headerlink" title="this的设计缺陷以及应对方案"></a>this的设计缺陷以及应对方案</h5><blockquote><ol><li>嵌套函数的this不会从外层函数中继承。==&gt;  1⃣️、将this保存一个self变量，利用变量作用域机制传递给嵌套函数。2⃣️、将乔套函数改为箭头函数。   </li><li>普通函数中的this默认指向全局对象window。==&gt;可以通过设置JavaScript的“严格模式”来解决。</li></ol></blockquote>]]></content>
      
      
      <categories>
          
          <category> 浏览器工作原理与实践 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 浏览器工作原理与实践 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>每周总结第十八期</title>
      <link href="/2019/11/10/issue-18/"/>
      <url>/2019/11/10/issue-18/</url>
      
        <content type="html"><![CDATA[<blockquote><p>这里记录过去一周，我的一些小总结。</p></blockquote><a id="more"></a><h4 id="Feeling"><a href="#Feeling" class="headerlink" title="Feeling"></a>Feeling</h4><blockquote><p>大部分人不表达是因为没什么可表达的，只是脑子里没货，而不是不愿意表达。<br>人们说自己无法坚持做一件事，其实既缺乏坚持的能力，也缺少做事的能力。<br>非不为也，实不能也。 –From <a href="https://twitter.com/sagacity/status/1193346629287366656" target="_blank" rel="noopener">Twitter</a></p></blockquote><h4 id="碾压苹果！全球最赚钱的公司要上市了"><a href="#碾压苹果！全球最赚钱的公司要上市了" class="headerlink" title="碾压苹果！全球最赚钱的公司要上市了"></a><a href="http://global.eastmoney.com/a/201911051281700917.html" target="_blank" rel="noopener">碾压苹果！全球最赚钱的公司要上市了</a></h4><blockquote><p>沙特的阿美石油公司（Aramco）是全球最赚钱公司，决定进行 IPO。它的石油产量占全球的10％，去年净利润为1110亿美元，比苹果+谷歌+埃克森美孚还要多。该公司的总市值可能会到2万亿美元，目前世界市值最大的公司也只有1万亿美元。 </p></blockquote><h4 id="GitLab-公开拒收中国员工，你怎么看？！"><a href="#GitLab-公开拒收中国员工，你怎么看？！" class="headerlink" title="GitLab 公开拒收中国员工，你怎么看？！"></a><a href="https://www.oschina.net/news/111073/gitlab-reject-chinese-programmers" target="_blank" rel="noopener">GitLab 公开拒收中国员工，你怎么看？！</a></h4><blockquote><p>本周争论话题。<br>在GitLab.com的官方issue里，出现这样一条：我们决定对有权访问客户数据的团队成员启用“工作国家/地区封锁（job family country block）”，而封锁名单上只有两个国家——中国和俄罗斯。<br>根据GitLab的解释，意味着：</p><ul><li>GitLab不会给中国/俄罗斯公民提供Offer；</li><li>那些有权限访问客户数据的员工，现在也不能移居到中国或俄罗斯。</li></ul></blockquote><h4 id="utools"><a href="#utools" class="headerlink" title="utools"></a><a href="https://u.tools/" target="_blank" rel="noopener">utools</a></h4><blockquote><p>「uTools是一个极简、插件化、跨平台的现代桌面软件。通过自由选配丰富的插件，打造你得心应手的工具集合。<br>当你熟悉它后，能够为你节约大量时间，让你可以更加专注地改变世界。」</p></blockquote><blockquote><ul><li>通过快捷键（默认alt+space）就可以快速呼出搜索框.搜索框相当聪明。    </li><li>优秀的插件化设计，自取所需，随用随走。</li><li>只需会JavaScript、CSS、HTML就可以从零开始创造一个utools插件。</li><li>非常推荐，初上手感觉比浏览器插件好用好多。</li></ul></blockquote><h4 id="electronjs"><a href="#electronjs" class="headerlink" title="electronjs"></a><a href="https://electronjs.org/" target="_blank" rel="noopener">electronjs</a></h4><blockquote><p>如果你可以建一个网站，你就可以建一个桌面应用程序。 Electron 是一个使用 JavaScript, HTML 和 CSS 等 Web 技术创建原生程序的框架，它负责比较难搞的部分，你只需把精力放在你的应用的核心上即可。</p><ul><li>Web 技术: Electron 基于 Chromium 和 Node.js, 让你可以使用 HTML, CSS 和 JavaScript 构建应用。 </li><li>开源: Electron 是一个由 GitHub 及众多贡献者组成的活跃社区共同维护的开源项目。    </li><li>跨平台: Electron 兼容 Mac、Windows 和 Linux，可以构建出三个平台的应用程序。 </li></ul></blockquote><blockquote><p>尝试：npm install 过程中竟然第一次遇到了墙，即使开着vpn也于是无补。查找资料：<a href="https://www.jianshu.com/p/f134878af30f" target="_blank" rel="noopener">electron快速入门笔记</a>，更换淘宝镜像，启动成功。<br><img src="http://img.liugezhou.online/electron_lgz.png" alt="效果展示"></p></blockquote><h4 id="宏观视角下的浏览器"><a href="#宏观视角下的浏览器" class="headerlink" title="宏观视角下的浏览器"></a><a href="https://www.liugezhou.online/2019/11/03/%E5%AE%8F%E8%A7%82%E8%A7%86%E8%A7%92%E4%B8%8B%E7%9A%84%E6%B5%8F%E8%A7%88%E5%99%A8/" target="_blank" rel="noopener">宏观视角下的浏览器</a></h4><blockquote><p>前段时间在《极客时间》上学了一个专栏，通篇略过，干货不少，但理解相当不够透彻，于是计划用几周的时间，对本专栏内容用作者的总结以及自己的相对逐字理解，来个通篇的文字记录学习，书读百遍，其义自现。<br>本篇是这个专栏的第一章：<a href="https://www.liugezhou.online/2019/11/03/" target="_blank" rel="noopener">宏观视角下的浏览器</a>。本章分为六讲。</p></blockquote><h4 id="Top-languages-over-time"><a href="#Top-languages-over-time" class="headerlink" title="Top languages over time"></a><a href="https://octoverse.github.com/#top-languages-over-time" target="_blank" rel="noopener">Top languages over time</a></h4><blockquote><p>This year, C# and  shell climbed the list,And for the first time ,Python outranked Java as the second most popular language on Github by repository contributors.</p></blockquote><h4 id="如何比较-Java-的字符串？"><a href="#如何比较-Java-的字符串？" class="headerlink" title="如何比较 Java 的字符串？"></a><a href="https://mp.weixin.qq.com/s/WyrRCUlelzOxyfVBrxAGUg" target="_blank" rel="noopener">如何比较 Java 的字符串？</a></h4><blockquote><p>Stack Overflow上一个访问370万+的问题：如何比较Java的字符串。<br>也就是说<code>==</code>操作符与<code>.equals()</code>方法之间有什么区别呢？ </p></blockquote><blockquote><p><code>结论</code></p><ul><li>当比较两个字符串对象的内容是否相等时，请使用 <code>.equals()</code> 方法。   </li><li>当比较两个字符串对象是否相等时，请使用<code>==</code>操作符。</li></ul></blockquote><h4 id="TypeScript入门教程"><a href="#TypeScript入门教程" class="headerlink" title="TypeScript入门教程"></a><a href="https://ts.xcatliu.com/" target="_blank" rel="noopener">TypeScript入门教程</a></h4><blockquote><p>本书是作者在学习 <a href="http://www.typescriptlang.org/" target="_blank" rel="noopener">TypeScript</a> 后整理的学习笔记。</p></blockquote><h4 id="15种CSS居中的方式，你都用过哪几种"><a href="#15种CSS居中的方式，你都用过哪几种" class="headerlink" title="15种CSS居中的方式，你都用过哪几种"></a><a href="https://cloud.tencent.com/developer/article/1115615" target="_blank" rel="noopener">15种CSS居中的方式，你都用过哪几种</a></h4><blockquote><p>CSS居中是前端工程师经常要面对的问题，也是基本技能之一。今天有时间把CSS居中的方案汇编整理了一下，目前包括水平居中，垂直居中及水平垂直居中方案共15种。如有漏掉的，还会陆续的补充进来，算做是一个备忘录吧。<br>本文作者的博客：<a href="http://42du.cn/" target="_blank" rel="noopener">http://42du.cn/</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 每周分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 每周分享 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>No1.宏观视角下的浏览器</title>
      <link href="/2019/11/03/No1.%E5%AE%8F%E8%A7%82%E8%A7%86%E8%A7%92%E4%B8%8B%E7%9A%84%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
      <url>/2019/11/03/No1.%E5%AE%8F%E8%A7%82%E8%A7%86%E8%A7%92%E4%B8%8B%E7%9A%84%E6%B5%8F%E8%A7%88%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h6 id="前段时间在《极客时间》上学了一个专栏，通篇略过，干货不少，但理解相当不够透彻，于是计划用几周的时间，对本专栏内容用作者的总结以及自己的相对逐字理解，来个通篇的文字记录学习，书读百遍，其义自现。"><a href="#前段时间在《极客时间》上学了一个专栏，通篇略过，干货不少，但理解相当不够透彻，于是计划用几周的时间，对本专栏内容用作者的总结以及自己的相对逐字理解，来个通篇的文字记录学习，书读百遍，其义自现。" class="headerlink" title="前段时间在《极客时间》上学了一个专栏，通篇略过，干货不少，但理解相当不够透彻，于是计划用几周的时间，对本专栏内容用作者的总结以及自己的相对逐字理解，来个通篇的文字记录学习，书读百遍，其义自现。"></a>前段时间在《极客时间》上学了一个专栏，通篇略过，干货不少，但理解相当不够透彻，于是计划用几周的时间，对本专栏内容用作者的总结以及自己的相对逐字理解，来个通篇的文字记录学习，书读百遍，其义自现。</h6><h6 id="本篇是这个专栏的第一章：《宏观视角下的浏览器》。本章分为六讲。"><a href="#本篇是这个专栏的第一章：《宏观视角下的浏览器》。本章分为六讲。" class="headerlink" title="本篇是这个专栏的第一章：《宏观视角下的浏览器》。本章分为六讲。"></a>本篇是这个专栏的第一章：《宏观视角下的浏览器》。本章分为六讲。</h6><a id="more"></a><h4 id="01-Chrome架构：仅仅打开一个页面，为什么有四个进程"><a href="#01-Chrome架构：仅仅打开一个页面，为什么有四个进程" class="headerlink" title="01.Chrome架构：仅仅打开一个页面，为什么有四个进程"></a>01.Chrome架构：仅仅打开一个页面，为什么有四个进程</h4><blockquote><p>在谷歌浏览器随便打开一个页面，点击“选项”菜单，选择“更多工具”，点击“任务管理器”，这将打开Chrome的任务管理器的窗口，你会发现一个页面上有四个以上的进程。为什么会有四个进程呢？<br>本章通过分析浏览器的进化史而展开探讨这个问题。<br>开始之前，我们必须得了解一下这个<code>进程</code>与<code>线程</code>的概念。  </p></blockquote><h5 id="线程-VS-进程"><a href="#线程-VS-进程" class="headerlink" title="线程 VS 进程"></a>线程 VS 进程</h5><blockquote><p><code>线程这个东西它是不能单独存在的，它是由进程来启动和管理的。</code> </p><p><code>一个进程就是一个程序的运行实例</code>。</p><p><code>线程是依附于进程的，而进程中使用多线程并行处理能提升运算效率</code>。  </p><p>总结，线程与进程之间的关系有以下四个特点：</p><ol><li>进程中任一线程执行出错，都会导致整个进程崩溃。 </li><li>线程之间共享进程的数据。   </li><li>当一个进程关闭之后，操作系统会回收进程所占用的内存。   </li><li>进程之间的内容都互相隔离。(如果进程之间需要进行数据的通信，这时候需要使用用于进程间通讯(IPC)机制了)。</li></ol></blockquote><h5 id="单进程浏览器时代"><a href="#单进程浏览器时代" class="headerlink" title="单进程浏览器时代"></a>单进程浏览器时代</h5><blockquote><p>早在07年之前，市面上的浏览器都是单进程的。单进程，顾名思义是指：浏览器的所有功能模块都运行在同一个进程里。<br>如此多的功能模块运行在一个进程里，导致单进程浏览器<code>不稳定</code>、<code>不流畅</code>、<code>不安全</code>。<br>具体的表现就不说了，总之体验非常差，于是进入了“多线程浏览器”时代。    </p></blockquote><h5 id="多进程浏览器时代"><a href="#多进程浏览器时代" class="headerlink" title="多进程浏览器时代"></a>多进程浏览器时代</h5><blockquote><ul><li>多进程浏览器由于进程相互隔离，所以当一个页面或者插件崩溃的时候，影响的仅仅是当前的页面进程或者插件过程。这就完美解决了页面或者插件崩溃而导致的整个浏览器崩溃问题。JS的渲染若出现问题，影响的同样是当前的渲染页面，没有响应的仅对当前页面。而且在多进程浏览器时代，当关闭一个页面的时候，整个渲染进程会被关闭，该进程占用的内存都会被系统回收，这样也就轻松解决了浏览器页面的内存泄露问题。    </li><li>此外有关安全方面的问题：使用多线程架构可以使用<code>安全沙箱</code>。  </li></ul><p>可以把沙箱看成是操作系统给进程上了一把锁，沙箱里面的程序可以运行，但是不能在硬盘上写入任何数据，也不能在敏感位置读取任何数据(例如文档和桌面)，Chrome把插件进程和渲染进程锁在沙箱里面，这样即使在渲染进程或者插件进程里面执行了恶意程序，恶意程序也无法突破沙箱去获取系统权限。</p></blockquote><h5 id="目前多进程架构"><a href="#目前多进程架构" class="headerlink" title="目前多进程架构"></a>目前多进程架构</h5><blockquote><p>最新的Chrome进程架构：Chrome浏览器包括：<code>1个浏览器(Brower)主进程，1个GPU进程、一个网络(NetWork)进程、多个渲染进程和多个插件进程</code>。<br>虽然多进程模型提升了浏览器的稳定性、流畅性、安全性，但是同样也会不可避免带来一些问题：  </p><ul><li><code>更高的资源占用</code> ：因为每个进程都会包含公共基础结构的副本（如JavaScript运行环境），这意味着浏览器会消耗更多的资源。  </li><li><code>更复杂的体系架构</code>：浏览器各模块之间耦合性高、扩展性差等问题，会导致现在的架构已经很难适应新的需求。 </li></ul></blockquote><h5 id="未来面向服务的架构-SOP"><a href="#未来面向服务的架构-SOP" class="headerlink" title="未来面向服务的架构(SOP)"></a>未来面向服务的架构(SOP)</h5><blockquote><p>为了解决这些问题，2016年，Chrome团队使用“面向服务的架构“（SOP）思想设计了新的Chrome架构，这也是现阶段Chrome团队的一个主要任务。</p></blockquote><h4 id="02｜TCP协议：如何保证页面文件能被完整的送达浏览器"><a href="#02｜TCP协议：如何保证页面文件能被完整的送达浏览器" class="headerlink" title="02｜TCP协议：如何保证页面文件能被完整的送达浏览器"></a>02｜TCP协议：如何保证页面文件能被完整的送达浏览器</h4><blockquote><p>在衡量Web页面性能的时候有一个重要的指标叫”FP(First Paint)”,是指从页面加载到首次开始绘制的时长。其中影响FP的一个重要因素就是<code>网络加载速度</code>。 </p><p>要优化网络加载速度，需要对网络有充分的了解，这一节重点介绍<code>在Web世界中的TCP/IP是如何工作的</code>。 </p><p>在网络中，一个文件通常会被拆分为很多数据包来进行传输，而数据包在传输过程中有很大概览丢失或者出错，那么如何保证页面文件能被完整地送达浏览器？</p></blockquote><h5 id="一个数据包的“旅程”"><a href="#一个数据包的“旅程”" class="headerlink" title="一个数据包的“旅程”"></a>一个数据包的“旅程”</h5><blockquote><ol><li><p>IP:把数据包送达目的主机<br>计算机的地址称为IP地址，访问任何网站实际上只是你的计算机向另外一台计算机请求信息。<br>当从主机A向主机B发送数据(即发送数据包)，传输前，数据包会被附加上主机A和主机B的IP地址信息，这些信息会被封到一个叫做IP头的数据结构里，在这个IP头中包含IP数据包开头的信息(IP版本、源IP地址、目标地址、生存时间等信息)，于是数据包从主机A发送到主机B。  </p></li><li><p>UDP:把数据包送达应用程序<br>IP通过IP地址信息把数据包发送给指定的电脑，而UDP通过端口号把数据包发给正确的程序。<br>UDP发送数据，有各种因素会导致数据包出错，虽然UDP可以校验数据是否正确，但是<code>UDP不提供重发机制</code>，只是丢弃当前的包，且UDP在发送之后无法知道能否到达目的地。<br><code>UDP不能保证数据可靠性，但是传输速度却非常快</code>，因此UDP应用在一些关注速度但不那么严格要求数据完整性的领域，例如：在线视频、互动游戏等。  </p></li><li><p>TCP:把数据完整的送达应用程序<br>TCP(Transmission Control Protocol,传输控制协议)：他是一种面向连接的、可靠的、基于字节流的传输层通信协议。相对于UDP而言：  </p></li></ol><ul><li>对于数据包丢失情况，提供重传机制。  </li><li>TCP引入数据包排序机制，用来保证把乱序的数据包组合成一个完整的文件。 </li></ul></blockquote><h5 id="完整的TCP连接过程"><a href="#完整的TCP连接过程" class="headerlink" title="完整的TCP连接过程"></a>完整的TCP连接过程</h5><blockquote><p>我们现在已经知道TCP单个数据包的传输流程和UDP流程差不多，不同在于，通过TCP头信息可以保证一块大的数据传输的完整性。<br>一个完整的TCP连接过程，其生命周期包括了“建立连接“、”数据传输“、”断开连接“三个阶段。</p><ul><li>建立连接阶段：这个阶段通过“三次握手”来建立客户端和服务器之间的连接。  </li><li>数据传输阶段：在该阶段，接收端需要对每个数据包进行确认操作。接收端应该在接收数据后要发送确认数据包给发送端，若发送端没有接收到这个确认，则判断数据包丢失，并触发发送端的重发机制。  </li><li>断开连接阶段：数据传输完毕，终止连接，通过最后一个阶段“四次挥手”来保证双方都能断开连接。</li></ul></blockquote><h4 id="03｜HTTP请求流程：为什么很多站点第二次打开速度会很快？"><a href="#03｜HTTP请求流程：为什么很多站点第二次打开速度会很快？" class="headerlink" title="03｜HTTP请求流程：为什么很多站点第二次打开速度会很快？"></a>03｜HTTP请求流程：为什么很多站点第二次打开速度会很快？</h4><blockquote><p>首先的首先我们知道：HTTP协议建立在TCP连接基础之上的。<code>HTTP是一种允许浏览器向服务器获取资源的协议，是Web的基础。HTTP是浏览器使用最广的协议</code>。</p><p>简单说说HTTP和TCP的关系：浏览器使用HTTP协议作为<code>应用层协议</code>，用来封装请求的文本信息，并使用TCP/IP作为<code>传输层协议</code>将它发到网路上,所以HTTP工作前，需要通过TCP与服务器建立连接，也就是说：<code>HTTP的内容是通过TCP的传输数据阶段来实现的</code>。</p></blockquote><h5 id="浏览器端发起HTTP请求流程"><a href="#浏览器端发起HTTP请求流程" class="headerlink" title="浏览器端发起HTTP请求流程"></a>浏览器端发起HTTP请求流程</h5><blockquote><p>如果在浏览器地址栏里输入：<a href="https://www.liugezhou.online" target="_blank" rel="noopener">https://www.liugezhou.online</a> 这个网址后,浏览器这个庞然大物，它的背后都做些什么呢？</p></blockquote><ul><li>构建请求<blockquote><p>首先浏览器构建请求行信息，构建好之后，浏览器准备发起网路请求。</p></blockquote></li><li>查找缓存<blockquote><p>在准备发起网路请求阶段，浏览器偷偷的在它的缓存中查询是否有要请求的资源。<br>若有：拦截请求，返回资源副本，直接结束请求。<br>若缓存查找失败：继续下一步。  </p></blockquote></li><li>准备IP地址和端口号<blockquote><p>这个IP地址和端口号的获取，肯定是通过域名与其映射，即“域名系统”，也就是我们熟知的DNS。<br>于是，浏览器第一步会请求DNS返回域名对应的IP，如果没有特别指明端口号，则默认为80。<br>(浏览器提供了DNS数据缓存服务，若缓存过也就不会去请求，直接解析。从而减少一次网络请求)</p></blockquote></li><li>等待TCP队列<blockquote><p>拿到IP地址与端口号后，还需要在TCP队列中排队才能建立TCP连接。<br>这是因为：Chrome有个机制，同一个域名同时最多只能建立6个TCP连接，若此刻同时有10个请求发生。则四个会进入TCP队列进行排队。<br>当然，若当前请求数量少于6个，则会直接进入下一步。 </p></blockquote></li><li>建立TCP连接 <blockquote><p>建立TCP连接，上一节我们已经知道，一个完整的TCP连接过程包括“建立连接”、“数据传输”、“断开连接“三个阶段。  </p></blockquote></li><li>发送HTTP请求<blockquote><p>HTTP请求是在TCP连接的数据传输阶段工作的，这个时候浏览器向服务器发送请求行，它包括请求方法、请求URI、HTTP版本协议。，HTTP中的数据在这个通信过程中传输。</p></blockquote></li></ul><h5 id="服务器端处理HTTP请求流程"><a href="#服务器端处理HTTP请求流程" class="headerlink" title="服务器端处理HTTP请求流程"></a>服务器端处理HTTP请求流程</h5><blockquote><p>这里可以在命令行中输入<code>curl -i https://www.google.com</code>来查看返回请求数据。 (-i 返回响应行、响应头和响应体信息。 -I 不返回响应体。)<br>返回网站的HTTP协议、Connection、Location、Cache-Control等信息。 </p><p>通常情况，一旦服务器向客户端返回了请求数据，它就要关闭TCP连接，但是如果浏览器或者服务器设置了<code>Connection:keep-alive</code>，那么TCP连接在发送后将仍保持打开状态。<code>保持TCP连接可以省去下次请求时需要建立连接的时间，提升资源加载速度</code>。</p></blockquote><h5 id="问题解答"><a href="#问题解答" class="headerlink" title="问题解答"></a>问题解答</h5><ol><li>为什么很多站点第二次打开速度会很快？<blockquote><p>主要原因肯定是第一次加载页面的过程中，缓存了一些数据(从上面的过程分析，我们知道<code>DNS缓存</code>和<code>页面资源缓存</code>这两块数据是会被浏览器缓存起来的).<br>网站把很多资源都缓存到了本地，浏览器缓存直接使用本地副本来回应请求，而不会产生真实的网络请求，从而节省了时间。</p></blockquote></li><li>登录状态是如何保持的 <blockquote><p>简单地说，如果服务器端发送的响应头内有 Set-Cookie 的字段，那么浏览器就会将该字段的内容保持到本地。当下次客户端再往该服务器发送请求时，客户端会自动在请求头中加入 Cookie 值后再发送出去。服务器端发现客户端发送过来的 Cookie 后，会去检查究竟是从哪一个客户端发来的连接请求，然后对比服务器上的记录，最后得到该用户的状态信息。</p></blockquote></li></ol><h4 id="04｜导航流程：从输入URl到页面展示，这中间发生了什么"><a href="#04｜导航流程：从输入URl到页面展示，这中间发生了什么" class="headerlink" title="04｜导航流程：从输入URl到页面展示，这中间发生了什么"></a>04｜导航流程：从输入URl到页面展示，这中间发生了什么</h4><blockquote><p>流程开始前，回顾下浏览器进程、网络进程、渲染进程的各自主要职责：  </p><ul><li>浏览器进程：主要负责<code>用户交互</code>、<code>子进程管理</code>和<code>文件储存</code>等功能。  </li><li>网络进程：面向渲染进程或浏览器进程提供<code>网络资源下载</code>。  </li><li>渲染进程：将HTML、CSS、JS、图片等资源解析为可以显示和交互的页面。 </li></ul></blockquote><h5 id="过程大致描述"><a href="#过程大致描述" class="headerlink" title="过程大致描述"></a>过程大致描述</h5><blockquote><ul><li>首先，用户从浏览器进程中输入请求信息。  </li><li>然后，网络进程发起URL请求。 </li><li>服务器响应URL请求后，浏览器进程开始准备渲染进程。 </li><li>渲染进程准备好以后，需要先向渲染进程提交页面数据，这称之为文档提交阶段。  </li><li>渲染进程接收到文档信息之后，便开始解析页面和加载子资源，完成页面的渲染。<br>这其中，用户发出URL请求到页面开始解析的过程，就叫做导航。</li></ul></blockquote><h5 id="从输入URL到页面展示–过程细节"><a href="#从输入URL到页面展示–过程细节" class="headerlink" title="从输入URL到页面展示–过程细节"></a>从输入URL到页面展示–过程细节</h5><blockquote><ul><li>响应数据类型处理：根据服务端返回的<code>Content-Type</code>字段来决定如何显示响应体的内容。</li><li>同一站点下的多个页面会运行在一个渲染进程中。</li></ul></blockquote><h5 id="“从输入-URL-到页面展示，这中间发生了什么？”-留言总结"><a href="#“从输入-URL-到页面展示，这中间发生了什么？”-留言总结" class="headerlink" title="“从输入 URL 到页面展示，这中间发生了什么？”(留言总结)"></a>“从输入 URL 到页面展示，这中间发生了什么？”(留言总结)</h5><blockquote><ol><li>用户输入url并回车·</li><li>浏览器进程检查url，组装协议，构成完整的url</li><li>浏览器进程通过进程间通信（IPC）把url请求发送给网络进程</li><li>网络进程接收到url请求后检查本地缓存是否缓存了该请求资源，如果有则将该资源返回给浏览器进程</li><li>如果没有，网络进程向web服务器发起http请求（网络请求），请求流程如下：<br>5.1 进行DNS解析，获取服务器ip地址，端口<br>5.2 利用ip地址和服务器建立tcp连接<br>5.3 构建请求头信息<br>5.4 发送请求头信息<br>5.5 服务器响应后，网络进程接收响应头和响应信息，并解析响应内容</li><li>网络进程解析响应流程；<br>6.1 检查状态码，如果是301/302，则需要重定向，从Location自动中读取地址，重新进行第4步<br>6.2 200响应处理： <pre><code>检查响应类型Content-Type，如果是字节流类型，则将该请求提交给下载管理器，该导航流程结束，不再进行后续的渲染，如果是html则通知浏览器进程准备渲染进程准备进行渲染。</code></pre></li><li>准备渲染进程<br>7.1 浏览器进程检查当前url是否和之前打开的渲染进程根域名是否相同，如果相同，则复用原来的进程，如果不同，则开启新的渲染进程</li><li>传输数据、更新状态<br>8.1 渲染进程准备好后，浏览器向渲染进程发起“提交文档”的消息，渲染进程接收到消息和网络进程建立传输数据的“管道”<br>8.2 渲染进程接收完数据后，向浏览器发送“确认提交”<br>8.3 浏览器进程接收到确认消息后更新浏览器界面状态：安全、地址栏url、前进后退的历史状态、更新web页面。</li></ol></blockquote><h4 id="05｜渲染流程-上-：HTML、CSS和JavaScript，是如何变成页面的"><a href="#05｜渲染流程-上-：HTML、CSS和JavaScript，是如何变成页面的" class="headerlink" title="05｜渲染流程(上)：HTML、CSS和JavaScript，是如何变成页面的"></a>05｜渲染流程(上)：HTML、CSS和JavaScript，是如何变成页面的</h4><blockquote><p>按照渲染的时间顺序，渲染流水线可分为以下几个构建阶段：<br><code>构建DOM树</code>、<code>样式计算</code>、<code>布局阶段</code>、<code>分层</code>、<code>绘制</code>、<code>光栅化</code>、<code>合成</code>。<br>本节主要讨论前三个阶段。  </p></blockquote><h5 id="构建DOM树"><a href="#构建DOM树" class="headerlink" title="构建DOM树"></a>构建DOM树</h5><blockquote><p>因为浏览器无法直接理解和使用 HTML，所以需要将 HTML 转换为浏览器能够理解的结构——DOM 树。<br>DOM树和HTML内容几乎一样，但和HTML不同的是：DOM是保存在内存中的树结构。  </p></blockquote><h5 id="样式计算"><a href="#样式计算" class="headerlink" title="样式计算"></a>样式计算</h5><blockquote><ol><li>把CSS转换为浏览器能够理解的结构。</li><li>转换样式表中的属性值，使其标准化。<br>「例如rem -&gt; px, red -&gt; rgb(255,0,0),bold -&gt; 700」  </li><li>计算出DOM树中每个节点的具体样式。<br>「CSS继承：每个DOM节点都包含有父节点的样式」<br>「CSS层叠：它在 CSS 处于核心地位，定义了如何合并来自多个源的属性值的算法」<br>「样式来源：如果一个元素不提供任何样式，默认使用的是UserAgent样式—浏览器提供的一组默认样式」。</li></ol></blockquote><h5 id="布局阶段"><a href="#布局阶段" class="headerlink" title="布局阶段"></a>布局阶段</h5><blockquote><p>内容： 布局阶段是根据DOM树和样式计算出元素的几何位置。 </p><ol><li>创建布局树「构建一颗只包含可见元素的布局树」  </li><li>布局计算 </li></ol></blockquote><blockquote><p>「在执行布局操作的时候，会把布局运算的结果重新写回布局树中，所以布局树既是输入内容也是输出内容，这是布局阶段一个不合理的地方，因为在布局阶段并没有清晰地将输入内容和输出内容区分开来。针对这个问题，Chrome 团队正在重构布局代码，下一代布局系统叫 <code>LayoutNG</code>，试图更清晰地分离输入和输出，从而让新设计的布局算法更加简单。」</p></blockquote><h4 id="06-渲染流程-下-：HTML、CSS和JavaScript，是如何变成页面的"><a href="#06-渲染流程-下-：HTML、CSS和JavaScript，是如何变成页面的" class="headerlink" title="06|渲染流程(下)：HTML、CSS和JavaScript，是如何变成页面的"></a>06|渲染流程(下)：HTML、CSS和JavaScript，是如何变成页面的</h4><h5 id="分层"><a href="#分层" class="headerlink" title="分层"></a>分层</h5><blockquote><p>为了生成一些复杂效果(3D变换、页面滚动、z轴排序等)，渲染引擎还需要为特定的节点生成专用的图层，生成一颗对应的图层树.</p><ul><li>并不是布局树的每个节点都包含一个图层，如果一个节点没有对应的层，那么这个节点就从属于父节点的图层.   </li><li>素有了层叠上下文的属性或者需要被剪裁，满足这任意一点，就会被提升成为单独一层。  </li></ul></blockquote><h5 id="绘制"><a href="#绘制" class="headerlink" title="绘制"></a>绘制</h5><blockquote><p>一个图层的绘制拆分成很多小的绘制指令，然后再把这些指令按照顺序组成一个<code>待绘制列表</code>。「可在浏览器开发者工具的Layers中查看。」</p></blockquote><h5 id="栅格化操作"><a href="#栅格化操作" class="headerlink" title="栅格化操作"></a>栅格化操作</h5><blockquote><p>所谓栅格化，是指将图块转换为位图。<br>栅格化过程都会使用 GPU 来加速生成，使用 GPU 生成位图的过程叫快速栅格化，或者 GPU 栅格化，生成的位图被保存在 GPU 内存中. </p></blockquote><h5 id="合成和显示"><a href="#合成和显示" class="headerlink" title="合成和显示"></a>合成和显示</h5><blockquote><p>一旦所有图块都被光栅化，合成线程就会生成一个绘制图块的命令——“DrawQuad”，然后将该命令提交给浏览器进程。经过浏览器就会显示出页面。  </p></blockquote><blockquote><p>一个完整的渲染流程大致可总结为如下：  </p><ul><li>渲染进程将 HTML 内容转换为能够读懂的 DOM 树结构。 </li><li>渲染引擎将 CSS 样式表转化为浏览器可以理解的 styleSheets，计算出 DOM 节点的样式。  </li><li>创建布局树，并计算元素的布局信息。对布局树进行分层，并生成分层树。  </li><li>为每个图层生成绘制列表，并将其提交到合成线程。  </li><li>合成线程将图层分成图块，并在光栅化线程池中将图块转换成位图。  </li><li>合成线程发送绘制图块命令 DrawQuad 给浏览器进程。浏览器进程根据 DrawQuad 消息生成页面，并显示到显示器上。</li></ul></blockquote><h5 id="相关概念"><a href="#相关概念" class="headerlink" title="相关概念"></a>相关概念</h5><h6 id="重排-更新了元素的几何属性"><a href="#重排-更新了元素的几何属性" class="headerlink" title="重排(更新了元素的几何属性)"></a>重排(更新了元素的几何属性)</h6><blockquote><p>使用CSS或者JS使元素的几何位置发生了改变，例如改变元素的宽度、高度等，这会使得浏览器触发重新布局、解析之后的一系列子阶段，这个过程就是重排。无疑，重排需要更新完整的渲染流水线，所以开销是最大的。 </p></blockquote><h6 id="重绘-更新元素的绘制属性"><a href="#重绘-更新元素的绘制属性" class="headerlink" title="重绘(更新元素的绘制属性)"></a>重绘(更新元素的绘制属性)</h6><blockquote><p>比如改变了元素的背景色，这会触发浏览器进行重绘之后的操作。相较于重排操作，重绘省去了布局和分层阶段，所以执行效率会比重排操作要高一些。  </p></blockquote><h6 id="直接合成阶段"><a href="#直接合成阶段" class="headerlink" title="直接合成阶段"></a>直接合成阶段</h6><blockquote><p>那如果你更改一个既不要布局也不要绘制的属性，会发生什么变化呢？渲染引擎将跳过布局和绘制，只执行后续的合成操作，我们把这个过程叫做合成.<br>例如CSS的transform实现的动画效果，可以避开重排和重绘阶段，相对于重绘和重排，合成能大大提升绘制效率。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 浏览器工作原理与实践 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 浏览器工作原理与实践 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>每周总结第十七期</title>
      <link href="/2019/11/03/issue-17/"/>
      <url>/2019/11/03/issue-17/</url>
      
        <content type="html"><![CDATA[<blockquote><p>这里记录过去一周，我的一些小总结。</p></blockquote><a id="more"></a><h4 id="Feeling"><a href="#Feeling" class="headerlink" title="Feeling"></a>Feeling</h4><blockquote><p>想想自己从小到大一直在做的事，除了抽烟就是喝酒。<br>二十多年来，不止一次的想要去坚持做一件事，但是往往三天结束，高考那会也未曾幸免，可能以后也不会幸免。<br>但我还是比较觉得“常立志”，比“立长志”要来的热血一些。因为时不时的兴奋一把，会让我在这活不明白的世上多去感受一些东西。<br>之前是受阮一峰，阮老师的周五公号文章推送影响，后来是看到很多人在坚持做的一些事，让我也感觉作为一个个体而言，一定要尝试去坚持做一件事。做什么事可能不重要，做的对不对可能也不重要，做的好不好或许也不重要，重要的是不停寻找，找到了这么一件想坚持做下去的事。如果这件事还带给了极大的乐趣与自我满足，那么便是极好的。<br>就像找另一半一样，如果当作人生的目标去寻找，那肯定会找到的，然后接下来就是油盐酱醋茶，如何平淡而不失乐趣的经营下去。</p></blockquote><h4 id="小丑-Joker"><a href="#小丑-Joker" class="headerlink" title="小丑(Joker)"></a>小丑(Joker)</h4><blockquote><p>《小丑》这部电影与今年10月4日在美国上映，「本片的故事独立于DCEU（DC[正义联盟]系列）之外，故事背景设置在20世纪80年代，讲述了一位生活陷入困境的脱口秀喜剧演员渐渐走向精神的崩溃，在哥谭市开始了疯狂的犯罪生涯，最终成为了蝙蝠侠的宿敌“小丑”的故事。」   </p></blockquote><blockquote><p>「他是美国DC漫画旗下的超级反派，常年稳居美媒票选的TOP100漫画反派角色第一名的位置，IGN评选的史上最伟大漫画反派角色中，小丑排名第一。」 </p><p>看这部电影的来源是：<a href="https://movie.douban.com/review/10454598/" target="_blank" rel="noopener">《小丑》超万字终极解析，一个精神病患者从受害者到恶魔的自白</a> </p><p>看完这部电影最大的感受是：思想能够上上下下、完完全全改变一个人的所有。</p><p>当然这个角色被多数人熟知是在《蝙蝠侠～黑暗骑士》中，在这部电影中，这个小丑「向观众展现了没有逻辑的恶」，小丑饰演者「希斯·莱杰」，「2008年1月22日，被人发现死于纽约的公寓内，时年28岁。很多人猜测他是因为受到了小丑这一角色的不良影响而自杀」。 </p></blockquote><h4 id="人人网"><a href="#人人网" class="headerlink" title="人人网"></a>人人网</h4><blockquote><p>「人人网曾是中国领先的实名制社交网络平台。」<br>「2015年1月30日，人人网发消息称将下线站内信功能。」<br>「2018年11月14日，人人公司宣布以2000万美元代价把人人社交网络全部资产出售予北京多牛互动传媒股份有限公司 。」<br>「2019年10月，“人人”APP在苹果商店上架。」</p></blockquote><blockquote><p>目前人人网之前的账号仍可登录，明星大V们的信息记录都清空了，而作者本人未删除的消息都还在，然后我看了一下之前转发的一些文章，链接到的地址七七八八的被删的差不多。<br>由小看大，这很有可能说明在网络的世界里，人类的文明、言语、艺术、文化等一些人们真正关注的东西，可能不被历史铭记。各种网站、巨头公司当不存在商业运作的动力时，业务不再继续，信息记录会永远丢在某个硬盘里。人们的言论、关注也在一次次嘈杂之中被淹没。<br>然而我之前一直认为现在的历史不可能会发生“焚书坑儒”之事，然而，有可能发生的事就一定会发生的。</p></blockquote><h4 id="三种JS方法重定向到另一个网页的方法"><a href="#三种JS方法重定向到另一个网页的方法" class="headerlink" title="三种JS方法重定向到另一个网页的方法"></a>三种JS方法重定向到另一个网页的方法</h4><blockquote><ul><li>location.href </li><li>location.replace </li><li>location.assign<br>所有方法的输出都相同，但location.replace()方法从文档历史记录中删除当前文档的url。因此，如果希望选项导航回原始文档，最好使用location.assign()方法。</li></ul></blockquote><h4 id="Vue-js"><a href="#Vue-js" class="headerlink" title="Vue.js"></a>Vue.js</h4><h6 id="Vue源码"><a href="#Vue源码" class="headerlink" title="Vue源码"></a>Vue源码</h6><blockquote><p>「Vue.js 3.x 想全面替代 Vue.js 2.x 需要有相当长的路要走，未来相当长一段时间 Vue.js 2.x 仍然是主流，Vue.js 2.x 的源码学习并没有过时，如果你是一个 Vue.js 2.x 的使用者，就应该去学习 Vue.js 2.x 的源码。」</p></blockquote><h6 id="Vue组件通信有哪几种方式"><a href="#Vue组件通信有哪几种方式" class="headerlink" title="Vue组件通信有哪几种方式"></a>Vue组件通信有哪几种方式</h6><blockquote><ul><li>父子组件通信 : <code>props/$emit</code> </li><li>父子组件通信: <code>ref与$parent/$children</code> </li><li>父子、隔代、兄弟组件通信:<code>EventBus($emit/$on)</code> </li><li>隔代组件通信:<code>$attrs/$listeners</code>    </li><li>隔代组件通信:<code>provide/inject</code>    </li><li>Vuex适用于父子、隔代、兄弟组件通信。主要包括的模块为：State、getter、Mutation、Action、Module</li></ul></blockquote><h6 id="在Vue2-x中，是如何实现数据双向绑定的"><a href="#在Vue2-x中，是如何实现数据双向绑定的" class="headerlink" title="在Vue2.x中，是如何实现数据双向绑定的"></a>在Vue2.x中，是如何实现数据双向绑定的</h6><blockquote><p>一句话总结：Vue内部通过Object.defineProperty方法属性拦截的方式，把data对象里的每个数据的读写转换成getter/setter，当数据变化时视图发生更新。 </p><p>但是Object.defineProperty方法只能对属性进行数据劫持，不能对整个对象进行劫持，同理无法对数组进行劫持，但是，我们在使用Vue框架的时候都知道，Vue能检测到对象和数组（部分方法的操作）的变化，那么它是怎么实现的呢？   </p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Observe a list of Array items.</span><br><span class="line"> */</span><br><span class="line">observeArray (items: Array&lt;any&gt;) &#123;</span><br><span class="line">  for (let i = 0, l = items.length; i &lt; l; i++) &#123;</span><br><span class="line">    observe(items[i])  // observe 功能为监测数据的变化</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 对属性进行递归遍历</span><br><span class="line"> */</span><br><span class="line">let childOb = !shallow &amp;&amp; observe(val) // observe 功能为监测数据的变化</span><br></pre></td></tr></table></figure><blockquote><p>通过以上 Vue 源码部分查看，我们就能知道 Vue 框架是通过遍历数组 和递归遍历对象，从而达到利用 Object.defineProperty() 也能对对象和数组（部分方法的操作）进行监听。</p></blockquote><h6 id="Proxy与Object-definePropertyObject-defineProperty优劣对比"><a href="#Proxy与Object-definePropertyObject-defineProperty优劣对比" class="headerlink" title="Proxy与Object.definePropertyObject.defineProperty优劣对比"></a>Proxy与Object.definePropertyObject.defineProperty优劣对比</h6><blockquote><p>Proxy优势：</p><ul><li>Proxy可以直接监听对象而非属性</li><li>Proxy可以直接监听数组的变化 </li><li>Proxy有多达13中拦截方法，不限于apply、ownKeys、deleteProperty、has等等是Object.defineProperty不具备的。 </li><li>Proxy返回的是一个新对象，我们可以只操作新的对象达到目的，而Object.defineProperty只能遍历对象属性直接修改。 </li><li>Proxy作为新标准将受到浏览器厂商重点持续的性能优化，也就是传说中的新标准的性能红利。<br>而Object.defineProperty兼容性好，支持IE9，Proxy存在浏览器兼容性问题，无法用polyfill磨平。</li></ul></blockquote><h5 id="30-道-Vue-面试题，内含详细讲解"><a href="#30-道-Vue-面试题，内含详细讲解" class="headerlink" title="30 道 Vue 面试题，内含详细讲解"></a><a href="https://juejin.im/post/5d59f2a451882549be53b170#heading-18" target="_blank" rel="noopener">30 道 Vue 面试题，内含详细讲解</a></h5>]]></content>
      
      
      <categories>
          
          <category> 每周分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 每周分享 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>每周分享第十六期</title>
      <link href="/2019/10/27/issue-16/"/>
      <url>/2019/10/27/issue-16/</url>
      
        <content type="html"><![CDATA[<h2 id="每周分享第十六期"><a href="#每周分享第十六期" class="headerlink" title="每周分享第十六期"></a>每周分享第十六期</h2><blockquote><p>这里记录我的周末，我的关注以及值得记录的东西。</p></blockquote><a id="more"></a><h4 id="刊首语"><a href="#刊首语" class="headerlink" title="刊首语"></a>刊首语</h4><blockquote><p>我们在这个世界上辛苦劳作，来回奔波是为了什么？<br>所有这些贪婪和欲望，所有这些对财富、权利和名声的追求，其目的到底何在？<br>归根结底，是为了得到他人的爱和认同。<br><cite>亚当·斯密《道德情操论》</cite></p></blockquote><h4 id="拼多多百亿补贴"><a href="#拼多多百亿补贴" class="headerlink" title="拼多多百亿补贴"></a>拼多多百亿补贴</h4><blockquote><p>双十一就来了，我是一个不怎么在购物网站混战的小年轻，特别是近几年看到的各种打折券、更是眼花缭乱，因此买东西一般只买那种不搞价、官方统一价的物品。<br>然后这几天看到了PDD的百亿补贴活动，MacBookPro双十一补贴到手价不到一万七，比我买的时候整整便宜了三千块，血亏啊。<br>貌似是在本周五纳斯达克收盘价时，拼多多股价上涨12.5%，其市值超越京东，成为中国第四大互联网公司，一个成长仅四年的公司发展这么迅速，真是挺牛皮的。<br>因此双十一要买东西的话，可以在拼多多上看一下，货比三家瞅一瞅。</p></blockquote><h4 id="Github可视化大数据平台"><a href="#Github可视化大数据平台" class="headerlink" title="Github可视化大数据平台"></a>Github可视化大数据平台</h4><blockquote><p>现在做政府项目的大数据可视化平台挺火，很多政府机构都喜欢打造各个行业的大数据可视化平台。<br>Github上有个开源项目，基于Vue构建一个Github的可视化大数据平台，这个开源项目是：<a href="https://github.com/HongqingCao/GitDataV" target="_blank" rel="noopener">GitDataV</a>.<br>Github主页的生成效果图：<br><img src="http://img.liugezhou.online/GitDataV.png" alt="GitDataV"></p></blockquote><h4 id="nodebestpractices"><a href="#nodebestpractices" class="headerlink" title="nodebestpractices"></a><a href="https://github.com/goldbergyoni/nodebestpractices" target="_blank" rel="noopener">nodebestpractices</a></h4><blockquote><p>一本在线书籍–Node.js最佳实践。是对Node.js最佳实践中排名最高的内容的总结和分享。 Star：35.1k.</p></blockquote><h4 id="leetcode"><a href="#leetcode" class="headerlink" title="leetcode"></a><a href="https://github.com/azl397985856/leetcode" target="_blank" rel="noopener">leetcode</a></h4><blockquote><p>leetcode题解，记录自己的leetcode解题之路。</p></blockquote><h4 id="这个网站的确很酷"><a href="#这个网站的确很酷" class="headerlink" title="这个网站的确很酷"></a><a href="https://bruno-simon.com/" target="_blank" rel="noopener">这个网站的确很酷</a></h4><blockquote><p>阮老师Twitter文：<br>“这是很久以来，我见过的最酷主页，整个页面需要3D导航。<a href="https://bruno-simon.com" target="_blank" rel="noopener">https://bruno-simon.com</a><br>页面源码是开源的。<a href="https://github.com/brunosimon/folio-2019”" target="_blank" rel="noopener">https://github.com/brunosimon/folio-2019”</a></p></blockquote><blockquote><p>Made with #thressJS and # canonJS</p></blockquote><h4 id="Vue-js3-x源码解析先导"><a href="#Vue-js3-x源码解析先导" class="headerlink" title="Vue.js3.x源码解析先导"></a><a href="https://mp.weixin.qq.com/s/q8PVgF7_sL0XhcBfP1WDPA" target="_blank" rel="noopener">Vue.js3.x源码解析先导</a></h4><blockquote><p>黄老师的一篇对于3.0源码的介绍。</p></blockquote><h4 id="是学不动还是不想学"><a href="#是学不动还是不想学" class="headerlink" title="是学不动还是不想学"></a>是学不动还是不想学</h4><blockquote><p>各种技术文章、各种公众号推送、各种人工智能培训班广告、各种知识付费APP，充斥眼球与大脑.<br>我们都知道技术是学不完的，但还是有看到什么新的课程慌的一批的感觉，什么TS、Vue3源码、WebGL、NodeJS等等等等，我知道应该去动身学习，但是总是会出现学不下去的情况，造成这种情况的原因是现在各种分散注意力的消息过于庞杂，一会东、一会西，太容易找不到方向。<br>这种情况下，得收心，管他弱水三千，只取一瓢。<br>并不是学不动，是不想学罢了。  </p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 每周分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 每周分享 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>每周分享第十五期</title>
      <link href="/2019/10/20/issue-15/"/>
      <url>/2019/10/20/issue-15/</url>
      
        <content type="html"><![CDATA[<blockquote><p>这里记录我的周末，我的关注以及值得记录的东西。</p></blockquote><a id="more"></a><h5 id="刊首语"><a href="#刊首语" class="headerlink" title="刊首语"></a>刊首语</h5><blockquote><p>不同肤色、不同文化、不同国籍的生活在这个星球上的人，大都觉得是按自己的生活方式在度此生。<br>我也会这么认为，但事实可能大相径庭。<br>很多时候，我会觉得自己是悲哀的：没有文化、没有信仰、没有追求、没有修养、不了解历史、不敢关心政治。<br>总结为一句话就是：没有过意识形态的形成。 </p><p>不知是对世界百花齐放思想散播的招架不住，还是由于人类本质劣性的残留，亦或者是社会发展带来的人心躁动，我竟记不起上次在何时感动，我竟再未关注社会生活那些人性与善良，进入眼帘的的只有动乱与不幸。<br>我不再抱有一颗怜悯之心、有些厌倦社会生活的伪装，我想是因为还不能聚焦自己，未能再作出一件有成就的事、也再未能给人带来些快乐与微笑。<br>这是我个人的悲哀，可能也是社会的一个缩影·。<br><cite>看动漫《赌博默示录》、《赌博破戒录》而感</cite></p></blockquote><h4 id="马拉松"><a href="#马拉松" class="headerlink" title="马拉松"></a>马拉松</h4><blockquote><p><code>肯尼亚</code>的世界纪录保持者<code>埃留德·基普乔格</code>（Eliud Kipchoge）10月12日在维也纳以<code>1:59:40</code>的成绩，成为第一个马拉松进入两小时以内的人！  </p><p>这相当于，100米的平均速度为17秒，然后不间断跑422个这样的100米。</p><p>不过，由于这是一次专门为他破记录举办的挑战赛，为了创造记录，有41个人配合他跑，为他挡风和配速，所以国际田联不会承认这个纪录.</p></blockquote><h4 id="英雄联盟"><a href="#英雄联盟" class="headerlink" title="英雄联盟"></a>英雄联盟</h4><blockquote><p>英雄联盟手游预约开启，新一轮的手游狂潮要到来了，吗？  </p></blockquote><h4 id="世界互联网大会"><a href="#世界互联网大会" class="headerlink" title="世界互联网大会"></a>世界互联网大会</h4><blockquote><p>第六届世界互联网大会，将于10月20日-22日在浙江乌镇召开。本次大会以“智能互联 开放合作——携手共建网络空间命运共同体”为主题。</p></blockquote><h4 id="VSCode–mock数据"><a href="#VSCode–mock数据" class="headerlink" title="VSCode–mock数据"></a>VSCode–mock数据</h4><blockquote><p>掘金沸点上看到一个VSCode插件：<code>Mock_Myself</code>，为日常开发提供mock数据，在后端接口还未完善下，可以先自己模拟一些数据进行页面展示数据的代码开发。</p></blockquote><h4 id="javascript-questions"><a href="#javascript-questions" class="headerlink" title="javascript-questions"></a><a href="https://github.com/lydiahallie/javascript-questions/blob/master/zh-CN/README-zh_CN.md" target="_blank" rel="noopener">javascript-questions</a></h4><blockquote><p>JavaScript 进阶问题列表。 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&quot;我在我的 Instagram 上每天都会发布 JavaScript 的多选问题，并且同时也会在这个仓库中发布。  </span><br><span class="line">从基础到进阶，测试你有多了解 JavaScript，刷新你的知识，或者帮助你的 coding 面试！ 💪 🚀 我每周都会在这个仓库下更新新的问题。  </span><br><span class="line">答案在问题下方的折叠部分，点击即可展开问题。祝你好运 ❤️&quot;</span><br></pre></td></tr></table></figure></blockquote><h4 id="奶牛快传"><a href="#奶牛快传" class="headerlink" title="奶牛快传"></a><a href="https://cowtransfer.com/" target="_blank" rel="noopener">奶牛快传</a></h4><blockquote><p>平时我们用微信发送文件大小会限制在20M，不怎么方便，这是一个在线快传文件网站，上传文件速度特别快，不用注册就可以在线传输本地的文件，传输完毕后只需要将下载链接发送给对方在线下载即可，不需要使用U盘等拷贝文件，非常方便。<br>可能会有风险，管理员会看得到，如若担心推荐此网站的楼主建议压缩文件的时候设置密码上传。  </p></blockquote><h4 id="IPhone使用小技巧"><a href="#IPhone使用小技巧" class="headerlink" title="IPhone使用小技巧"></a>IPhone使用小技巧</h4><blockquote><p>IPhone在文本框输入文字或者网站的时候，会出现这样一个问题：直接用手指点击刚输入内容到某处时，极不方便。<br>这个时候，你可以长按默认输入法的空格键，然后指针便可以拖动了。  </p></blockquote><h4 id="当然我在扯淡"><a href="#当然我在扯淡" class="headerlink" title="当然我在扯淡"></a><a href="http://yinwang.org" target="_blank" rel="noopener">当然我在扯淡</a></h4><blockquote><p>个人博客：<a href="http://yinwang.org" target="_blank" rel="noopener">当然我在扯淡</a>。<br>王垠[yín]，四川大学97级本科毕业，保送到清华大学计算机系直博。期间曾在清华大学计算机系软件工程专业就读，主要进行集成电路布线算法的研究。在此期间，他因《完全用GNU/Linux工作》一文和对TeX的推广等“非研究成果的业余东西”而出名。 在只剩一年就要博士毕业的时候，他申请退学，并将1万7千余字的“退学申请书”（题为清华梦的粉碎）公布在网上，引起舆论界一时对教育体制、理想主义等的热议。</p></blockquote><h4 id="idea激活码"><a href="#idea激活码" class="headerlink" title="idea激活码"></a>idea激活码</h4><blockquote><p>一大批idea激活码失效，window系统下激活码地址：<a href="https://www.lanzous.com/i5clxlc" target="_blank" rel="noopener">https://www.lanzous.com/i5clxlc</a>  </p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 每周分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 每周分享 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>弱(强)类型语言、静(动)态语言、编译(解释)型语言概念总览</title>
      <link href="/2019/10/15/%E5%BC%B1(%E5%BC%BA)%E7%B1%BB%E5%9E%8B%E8%AF%AD%E8%A8%80%E3%80%81%E9%9D%99(%E5%8A%A8)%E6%80%81%E8%AF%AD%E8%A8%80%E3%80%81%E7%BC%96%E8%AF%91(%E8%A7%A3%E9%87%8A)%E5%9E%8B%E8%AF%AD%E8%A8%80%E6%A6%82%E5%BF%B5%E6%80%BB%E8%A7%88/"/>
      <url>/2019/10/15/%E5%BC%B1(%E5%BC%BA)%E7%B1%BB%E5%9E%8B%E8%AF%AD%E8%A8%80%E3%80%81%E9%9D%99(%E5%8A%A8)%E6%80%81%E8%AF%AD%E8%A8%80%E3%80%81%E7%BC%96%E8%AF%91(%E8%A7%A3%E9%87%8A)%E5%9E%8B%E8%AF%AD%E8%A8%80%E6%A6%82%E5%BF%B5%E6%80%BB%E8%A7%88/</url>
      
        <content type="html"><![CDATA[<h4 id="这篇文章用来彻底区分各种语言概念的区别"><a href="#这篇文章用来彻底区分各种语言概念的区别" class="headerlink" title="这篇文章用来彻底区分各种语言概念的区别."></a>这篇文章用来彻底区分各种<code>语言</code>概念的区别.</h4><a id="more"></a><h3 id="动态语言-VS-静态语言"><a href="#动态语言-VS-静态语言" class="headerlink" title="动态语言 VS 静态语言"></a>动态语言 VS 静态语言</h3><blockquote><p>每种编程语言都具有内建的数据类型，但它们的数据类型常有不同之处，使用方式也不一样，比如C语言、Java语言在定义变量前，就需要确定变量的类型。<br>这种声明变量的特点是：在声明变量之前需要先定义变量类型。我们把这种在使用之前就需要确认其变量数据类型的称为<code>静态语言</code>。<br>相反地，我们把在运行过程中需要检查数据类型的语言称为<code>动态语言</code>。</p></blockquote><h3 id="强类型语言-VS-弱类型语言"><a href="#强类型语言-VS-弱类型语言" class="headerlink" title="强类型语言 VS 弱类型语言"></a>强类型语言 VS 弱类型语言</h3><blockquote><p>虽然 C 语言是静态，但是在 C 语言中，我们可以把其他类型的数据赋予给一个声明好的变量， 比如在C语言中声明好了两个变量 ： </p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">int a = 1;</span><br><span class="line">bool b = true;</span><br><span class="line">b = a;</span><br></pre></td></tr></table></figure><blockquote><p>我们把 int 型的变量 a 赋值给了 bool 型的变量b，这段代码也是可以编译执行的，因为在赋值过程中，C编译器会把 int 型的变量悄悄转换为 bool 型的变量.<br>通常把偷偷进行类型转换的操作成为<code>隐式类型转换</code>：<br>支持因此类型转换的语言称为<code>弱类型语言</code>，不支持隐式类型转换的语言称为<code>强类型语言</code>。</p></blockquote><h3 id="编译型语言-VS-解释型语言"><a href="#编译型语言-VS-解释型语言" class="headerlink" title="编译型语言 VS 解释型语言"></a>编译型语言 VS 解释型语言</h3><blockquote><p>编译型语言代表有：C语言，C++、Object-C以及swift.<br>通常都会对源代码进行编译，生成可以执行的二进制代码，执行的是编译后的结果. </p><p>解释型语言代表有：JavaScript、Python、Erlang、PHP、Perl、Ruby<br>通常不用对源代码进行编译，一般是通过解释器载入脚本后运行。由于每个语句都是执行的时候才进行解释翻译，这样解释性语言每次执行就要翻译一次，效率相对要低。</p><p>Java具有编译与解释两种特性：既可以将其源代码当作脚本执行，也可以进行编译成.class代码（字节码）载入运行.</p><p><a href="https://www.liugezhou.online/2018/12/31/编译型语言与解释型语言的区别/" target="_blank" rel="noopener">拓展–编译型语言与解释型语言的区别–详细介绍</a></p></blockquote><h4 id="盗图"><a href="#盗图" class="headerlink" title="盗图"></a>盗图</h4><blockquote><p><img src="http://img.liugezhou.online/language.jpg" alt="语言类型"></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 编程概念类 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> XX型语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>每周分享第十四期</title>
      <link href="/2019/10/13/issue-14/"/>
      <url>/2019/10/13/issue-14/</url>
      
        <content type="html"><![CDATA[<blockquote><p>这里记录我的周末，强迫自己要去总结点什么的东西。</p></blockquote><a id="more"></a><h4 id="Rocket"><a href="#Rocket" class="headerlink" title="Rocket"></a><a href="https://weibo.com/u/3393510594?refer_flag=1005055013_" target="_blank" rel="noopener">Rocket</a></h4><blockquote><p>“对于此次”火箭经理辱华”事件的各路带哥们，我想说，继续带节奏让事态扩大吧，逞口舌之快只会两败俱伤，双方都是。我们已经忍了一百多年，不就是硬实力掰不过吗？古训讲究一个忍，厚积薄发、一击制胜。</p><p>这个事再发酵下去那就不单单是一个NBA的问题了，现在这个时期就从政治到文化开始全面撕票真的明智？我双手支持我国立场，只是反对极端化发展，戾气太重、无脑热血只会被人利用。</p><p>而且肯定存在其它的解决方法，莫雷、肖华都不能代表整个NBA，换句话说，川普对我国也不友好，那么我们就要跟美帝全面断交？而且现在国人有发表中立缓和意见的，马上会有一批喷子赶来问候同族的家人，这是理智爱国？？”</p><p><cite>引自‘沉默的羔羊’</cite></p></blockquote><h4 id="武汉颁发自动驾驶商用牌照"><a href="#武汉颁发自动驾驶商用牌照" class="headerlink" title="武汉颁发自动驾驶商用牌照"></a><a href="http://www.xinhuanet.com/2019-09/22/c_1125025261.htm" target="_blank" rel="noopener">武汉颁发自动驾驶商用牌照</a></h4><blockquote><p>武汉，简称“汉”，别称江城，是湖北省省会，中部六省唯一的副省级市和特大城市，中国中部地区的中心城市.</p><p>国家智能网联汽车（武汉）测试示范区22日在江城武汉揭牌，百度、海梁科技、深兰科技等企业获得武汉市交通部门颁发的自动驾驶车辆商用牌照.  </p><p>今后，无人驾驶车辆不仅可在开放道路进行载人测试，也可进行商业化运营探索。 </p><p>武汉市交通运输局综合协调处胡浩军表示，在示范区内首期建成的28公里支持智能网联汽车示范应用道路上，此次获牌照的巴士、公交、出租车等，均可上路正常载客运营。“市民上车‘刷卡’后即可乘车，但不实际扣费。”  </p><p>颁发自动驾驶商用牌照的最大意义在于，相关企业可在原有测试基础上，加强测试远程驾驶、车路协同等在5G环境下的新功能，并进行载人试运营，从而推动智能驾驶技术在真实场景下的应用。</p></blockquote><h4 id="呦呦鹿鸣"><a href="#呦呦鹿鸣" class="headerlink" title="呦呦鹿鸣"></a>呦呦鹿鸣</h4><blockquote><p>10月8日媒体报道以来，关于北大附中实验学校教学楼的空气质量问题在北大附中师生和社会一定范围间散播开来，并逐渐演化成为一起舆论事件。 </p><p>公众号《呦呦鹿鸣》，文章还在还可以阅读，但是最近的两篇文章因违反《微信公众号运营规范》，文章被禁止分享。</p></blockquote><h4 id="远方青木"><a href="#远方青木" class="headerlink" title="远方青木"></a>远方青木</h4><blockquote><p>公众号《远方青木》，差不多篇篇文章10万+。 </p><p>前公众号《紫竹张先生》的作者，猜测可能是由于彩票事件，被央视新闻点名，做封号处理。 </p><p>沉寂一段时间后，换了此公众号，文章针对社会热点事件总是有理有据、更具煽动，其文章逻辑分析强行洗脑，学识渊博，会总结会写文。</p><p>可能是在被约谈之后，更明白什么样的文章更具传播性。  </p><p>就像不是没有好记者，只是我们不知道一样–这个世界上有太多的能人，不为我们所知。有的风生水起，有的苟延残喘，有的高风亮节，有的同流合污，然而对于我们多数没见过市面的普通老百姓而言，遵从社会的主流价值观才算我们也有价值观。</p><p><cite>此为揣测。</cite></p></blockquote><h4 id="一句话"><a href="#一句话" class="headerlink" title="一句话"></a>一句话</h4><blockquote><p>一项研究发现，在线课程的完成率只有4%，100个报名网上课程的人，只有4个能坚持学完。</p></blockquote><h4 id="Octotree"><a href="#Octotree" class="headerlink" title="Octotree"></a>Octotree</h4><blockquote><p>Chrome浏览器应用商店上的插件，安装此插件后，在Github仓库下，会对仓库源文件进行目录排版。 </p></blockquote><h4 id="Teamview"><a href="#Teamview" class="headerlink" title="Teamview"></a>Teamview</h4><blockquote><p>APT41 安全组织已经攻破了 TeamViewer 公司，使其能够访问安装了 TeamViewer 的任何系统。<br>所以，简单来说，请卸载你的 TeamViewer 软件.</p></blockquote><h4 id="Vue3-0代码仓库公开"><a href="#Vue3-0代码仓库公开" class="headerlink" title="Vue3.0代码仓库公开"></a><a href="https://github.com/vuejs/vue-next" target="_blank" rel="noopener">Vue3.0代码仓库公开</a></h4><blockquote><p>Vue3.0完全由TypeScript编写，目前处于alpha阶段，计划与2020年第一季度发布。</p><p>最重要的变化之一是，受React Hooks的启发，新的API将允许使用基于函数的方式编写组件。 </p><p><a href="https://mp.weixin.qq.com/s/sOOGQvnRLrgRbz_0TEY93w" target="_blank" rel="noopener">Vue3.0的五个关键变化</a>：速度、体积、可维护性、面向原生、易用性。 </p></blockquote><h4 id="女装大佬项目"><a href="#女装大佬项目" class="headerlink" title="女装大佬项目"></a><a href="https://github.com/komeiji-satori/Dress" target="_blank" rel="noopener">女装大佬项目</a></h4><blockquote><p>表面上是”面向可爱的蓝孩子的Git学习实践项目 on Github”,实际上是让程序员po出自己的女装照片。 </p><p>这个项目全部是男孩穿女装的照片，很辣眼睛。喜欢看男孩穿女装的人儿这回可大饱眼福了。</p></blockquote><h4 id="Postwoman"><a href="#Postwoman" class="headerlink" title="Postwoman"></a><a href="https://github.com/liyasthomas/postwoman" target="_blank" rel="noopener">Postwoman</a></h4><blockquote><p>一个在线 HTTP 请求调试工具，类似 Postman，不过是 Web 版。</p></blockquote><h4 id="前端面试每日3-1"><a href="#前端面试每日3-1" class="headerlink" title="前端面试每日3+1"></a><a href="https://github.com/haizlin/fe-interview" target="_blank" rel="noopener">前端面试每日3+1</a></h4><blockquote><p>前端面试每日 3+1，以面试题来驱动学习，提倡每日学习与思考，每天进步一点！每天早上5点纯手工发布面试题（死磕自己，愉悦大家）。</p></blockquote><h4 id="购房"><a href="#购房" class="headerlink" title="购房"></a><a href="https://github.com/houshanren/hangzhou_house_knowledge" target="_blank" rel="noopener">购房</a></h4><blockquote><p>2017年买房经历总结出来的买房购房知识分享给大家，希望对大家有所帮助。买房不易，且买且珍惜。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 每周分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 每周分享 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>每周分享第十三期</title>
      <link href="/2019/09/28/issue-13/"/>
      <url>/2019/09/28/issue-13/</url>
      
        <content type="html"><![CDATA[<blockquote><p>这里记录我的周末，强迫自己要去总结点什么的东西。</p></blockquote><a id="more"></a><h3 id="Brendan-Ecich"><a href="#Brendan-Ecich" class="headerlink" title="Brendan Ecich"></a>Brendan Ecich</h3><blockquote><p>布兰登～艾克，1961年7月4日生人，JavaScript发明人。</p><p>这个哥们上大学时，主修的时物理学，到了大三因人家的兴趣改变主修为计算机科学，后获取了数学与计算机科学学士学位，后来上了个研究生，25岁时获取了计算机科学硕士学位。</p><p>毕业后进入SGI工作，工作七年负责操作系统与网络功能，之后他在MicroUnity工作了三年。1995年4月，任职于网景期间，为网景浏览器开发出JavaScript，之后成为网页浏览器领域应用最广泛的脚本语言之一。1998年，艾克协助成立Mozilla.org，2003年在美国在线决定结束网景部门营运后，艾克协助成立了Mozilla基金会。2014年4月3日，艾克宣布从Mozilla离职，2015年5月28日，艾克成立Brave软件公司，这是一家互联网安全公司，2016年1月20日，该公司发布了Brave网页浏览器。</p></blockquote><blockquote><p>下载了一下Brave网页浏览器，作为一个开发者，第一关注的当然是其开发调试功能，第一感觉是跟谷歌一个模子。</p><p>当前版本是v0.68.142,从网上查阅资料得知，当前 0.xx 版本是基于 electron 开发的，但未来的 1.0 版本将会是基于 chromium 魔改而来。</p><p>这个浏览器据说是想改变web商业模式，目前 Web 基于广告的商业模式有很多问题，Brave 浏览器提出了一个新的思路，就是用户给内容提供者打赏付钱，我这里把它叫做“打赏模式”。</p><p>它的打赏按钮在地址栏的右侧，点击后会有网站的验证是否经Brave网页验证。<br>这个模式很有意思。</p><p>官网地址：<a href="https://brave.com" target="_blank" rel="noopener">https://brave.com</a></p></blockquote><h3 id="长尾理论"><a href="#长尾理论" class="headerlink" title="长尾理论"></a>长尾理论</h3><blockquote><p>1897年，意大利经济学家发现一个经济规律：在任何一组东西中，最重要的只占其中一小部分，约20%，其余80%尽管占多数，却是次要的，这被称为<code>帕累托法则</code>，或者叫二八定律。80%的东西之所以次要，不是因为没有人需要，而是因为发现或呈现它们的成本实在太高了。</p></blockquote><blockquote><p>长尾理论的提出者是：克里斯·安德森。</p><p>安德森开始的一项工程，在考察了所有互联网电商公司的数据后，得出了几乎惊人一致的结论：在互联网世界里，任何商品都能找到它的消费者。  </p><p>由于关注的成本大大降低，人们有可能以很低的成本关注正态分布曲线的“尾部”，而且，关注“尾部”产生的总体效益甚至会超过“头部”. </p><p>在互联网环境下，<code>帕累托法则</code>失灵了，取而代之的是倒二八法则，即所谓的“长尾理论”。这一理论也推导出了一种新的互联网经营模式。</p></blockquote><blockquote><p>在长尾理论一书中，安德森总结了9个法则：</p><ol><li>数字化仓储是降低库存成本的最佳办法；</li><li>挖掘消费者心理数据，让他们参与生产；</li><li>从多个传播渠道挖掘潜在需求，深入长尾的尾部；</li><li>不要试图生产一款适合所有人的商品；</li><li>建立更加灵活的定价策略；</li><li>在企业与顾客之间建立共享信息的机制，达到双赢的效果；</li><li>结合自身产品的特点，考虑产品之间的“和”与“或”的问题；</li><li>借助长尾效应，根据市场自身淘汰结果来做出相应的反应，让市场替你做事；</li><li>重视免费的力量。<br><cite><a href="https://mp.weixin.qq.com/s/zJbXy8GwPJoISkxvLRWf4g" target="_blank" rel="noopener">文章来源</a></cite></li></ol></blockquote><h3 id="Github-Actions"><a href="#Github-Actions" class="headerlink" title="Github Actions"></a>Github Actions</h3><blockquote><p>之前在Github上注册了Actions，但是当时也不知道是干嘛的，今日读到一篇文章,虽然还是有点蒙。<br>在大脑里留个印象，在用到的时候，可以再来了解一下。</p><p><cite><a href="https://mp.weixin.qq.com/s/ILg6Ba7EGeqhDFYfIuo6kg" target="_blank" rel="noopener">玩转GitHub Actions ，简化npm发布流程</a></cite></p></blockquote><h3 id="阮一峰–周分享内容"><a href="#阮一峰–周分享内容" class="headerlink" title="阮一峰–周分享内容"></a>阮一峰–周分享内容</h3><blockquote><h4 id="35岁以后油腻中年人该去哪"><a href="#35岁以后油腻中年人该去哪" class="headerlink" title="35岁以后油腻中年人该去哪"></a><a href="https://mp.weixin.qq.com/s/AXmXQye9_puIFVn_okTEPw" target="_blank" rel="noopener">35岁以后油腻中年人该去哪</a></h4><p>这篇文章挺有意思。</p><h4 id="starcharts"><a href="#starcharts" class="headerlink" title="starcharts"></a><a href="https://github.com/caarlos0/starcharts" target="_blank" rel="noopener">starcharts</a></h4><p>一个开源工具，可以查看 GitHub 仓库的 Star 变化情况，生成折线图。<br>但是比较受欢迎的项目比如Vue、React等，显示：<br>Please try again in a few minutes. This might not work for very famous repository.<br>不过对一些小众，不是太famous的项目，还是可以的。</p><h4 id="showme-bug"><a href="#showme-bug" class="headerlink" title="showme.bug"></a><a href="https://showmebug.com" target="_blank" rel="noopener">showme.bug</a></h4><p>一个国产的在线实时编程环境，程序员面试助手，可以实时观看应聘者远程编程。</p><p>作为技术人员，手敲代码的能力毕竟最重要的。随着技术人才的不断年轻化，面试过程的不断考察实力化，像我这种还没学什么就要老了的人，如果不好好在自己的职业技术上下点功夫，混吃等死，那技能只能一步步退化，手里端的这碗饭很是危险啊。</p><h4 id="GK-Docs"><a href="#GK-Docs" class="headerlink" title="GK Docs"></a><a href="http://geekdocs.cn/" target="_blank" rel="noopener">GK Docs</a></h4><p>面向前端开发者的网址导航站。</p></blockquote><h3 id="JS字符串方法"><a href="#JS字符串方法" class="headerlink" title="JS字符串方法"></a>JS字符串方法</h3><blockquote><p>基础知识要牢固，最后来温习一下20个常用的JavaScript字符串方法。<br><cite><a href="https://mp.weixin.qq.com/s/YfO_Cdp6f0WmRt2S2JhCIA" target="_blank" rel="noopener">20个常用的JavaScript字符串方法</a></cite></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 每周分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 每周分享 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>每周分享第十二期</title>
      <link href="/2019/09/15/issue-12/"/>
      <url>/2019/09/15/issue-12/</url>
      
        <content type="html"><![CDATA[<blockquote><h4 id="有的人-将跑步贯穿自己的生命"><a href="#有的人-将跑步贯穿自己的生命" class="headerlink" title="有的人 将跑步贯穿自己的生命"></a>有的人 将跑步贯穿自己的生命</h4><h4 id="有的人-把对动物的呵护作为一种消遣"><a href="#有的人-把对动物的呵护作为一种消遣" class="headerlink" title="有的人 把对动物的呵护作为一种消遣"></a>有的人 把对动物的呵护作为一种消遣</h4><h4 id="有的人-通过看书来来作为自己追求自由的一种方式"><a href="#有的人-通过看书来来作为自己追求自由的一种方式" class="headerlink" title="有的人 通过看书来来作为自己追求自由的一种方式"></a>有的人 通过看书来来作为自己追求自由的一种方式</h4><h4 id="有的人-读史写史，想要观测人生的意义"><a href="#有的人-读史写史，想要观测人生的意义" class="headerlink" title="有的人 读史写史，想要观测人生的意义"></a>有的人 读史写史，想要观测人生的意义</h4><h4 id="有的人-无为而治-平淡的对着一切喜怒哀乐"><a href="#有的人-无为而治-平淡的对着一切喜怒哀乐" class="headerlink" title="有的人 无为而治 平淡的对着一切喜怒哀乐"></a>有的人 无为而治 平淡的对着一切喜怒哀乐</h4><h4 id="有的人-悲观乐观交至，无奈的挥洒着每一滴汗水"><a href="#有的人-悲观乐观交至，无奈的挥洒着每一滴汗水" class="headerlink" title="有的人 悲观乐观交至，无奈的挥洒着每一滴汗水"></a>有的人 悲观乐观交至，无奈的挥洒着每一滴汗水</h4><h4 id="有的人-不喜思考不愿作为，按着别人的意识走着自以为的康庄大道"><a href="#有的人-不喜思考不愿作为，按着别人的意识走着自以为的康庄大道" class="headerlink" title="有的人 不喜思考不愿作为，按着别人的意识走着自以为的康庄大道"></a>有的人 不喜思考不愿作为，按着别人的意识走着自以为的康庄大道</h4></blockquote><a id="more"></a><blockquote><h4 id="不管怎样，在未来或者现在，当回收往事的时候，有那么一件、两件、三四件我们为之自豪、骄傲、坚持的事，那我们便是幸运的。"><a href="#不管怎样，在未来或者现在，当回收往事的时候，有那么一件、两件、三四件我们为之自豪、骄傲、坚持的事，那我们便是幸运的。" class="headerlink" title="不管怎样，在未来或者现在，当回收往事的时候，有那么一件、两件、三四件我们为之自豪、骄傲、坚持的事，那我们便是幸运的。"></a>不管怎样，在未来或者现在，当回收往事的时候，有那么一件、两件、三四件我们为之自豪、骄傲、坚持的事，那我们便是幸运的。</h4></blockquote><h3 id="门萨俱乐部"><a href="#门萨俱乐部" class="headerlink" title="门萨俱乐部"></a>门萨俱乐部</h3><blockquote><p>门萨的英文名为：<code>MENSA</code>, 是拉丁语中”圆桌”的意思。</p><p>MENSA不涉及任何政治、宗教及社会事务而只关注纯粹的智商问题。</p><p>MENSA特别注重的是它是一个非营利性社团，在其运作中可能产生的少量获利都用作其活动经费且受到严格监控。</p><p>除了高智商外，MENSA的会员可以说并无其他特征。参加MENSA的惟一途径便是参加考试并脱颖而出（平均每一百人中有两人有机会被吸纳为正式会员）。</p><p>MENSA拥有十万会员，分布遍及世界100个国家和地区.</p></blockquote><h3 id="双峰干涉实验–《天才最左，疯子在右》"><a href="#双峰干涉实验–《天才最左，疯子在右》" class="headerlink" title="双峰干涉实验–《天才最左，疯子在右》"></a>双峰干涉实验–《天才最左，疯子在右》</h3><blockquote><p>这本书在三四年前看了一些，根本不知道写的是个什么，最近打开这本书瞅了瞅激起了一些兴趣。</p></blockquote><blockquote><p>其中印象比较深刻的一节–<code>迷失的旅行者</code>，提到了关于双峰干涉实验的一个解释–多重宇宙。</p></blockquote><blockquote><p>未曾查到此书是真记录还是真噱头，只是抱着一种不求甚解的感觉，引发一些遐想。</p></blockquote><h3 id="左耳朵耗子"><a href="#左耳朵耗子" class="headerlink" title="左耳朵耗子"></a>左耳朵耗子</h3><blockquote><p>微博用户【左耳朵耗子】。</p></blockquote><blockquote><p>陈皓：20年软件开发相关工作经验，10年以上项目和团队管理经验，个人网站：<a href="https://coolshell.cn/" target="_blank" rel="noopener">https://coolshell.cn/</a></p><p>之前读过他的好几篇文章，很有想法。时不时的跟人在网上怼两句，也被人怼。</p><p>他在微博的很多言论、有意思。</p></blockquote><h3 id="Zoom"><a href="#Zoom" class="headerlink" title="Zoom"></a>Zoom</h3><blockquote><p>如果你的团队需要开视频会议，可以使用Zoom。<br>但不幸的是前几天：左耳朵耗子在他的微博上说Zoom被墙。</p></blockquote><h3 id="邮箱"><a href="#邮箱" class="headerlink" title="邮箱"></a>邮箱</h3><blockquote><p>由于邮箱众多，很早之前便开始使用网易邮箱大师，今天突然发现还是IPhone自带的邮件功能好用很多，纯天然无广告。</p></blockquote><h3 id="Research"><a href="#Research" class="headerlink" title="Research"></a><a href="http://www.suiyuanka.com" target="_blank" rel="noopener">Research</a></h3><blockquote><p>一个中文搜索的聚合网站，显示同一个关键字在不同网站的搜索结果。</p></blockquote><h3 id="在开源项目中展示广告的后续"><a href="#在开源项目中展示广告的后续" class="headerlink" title="在开源项目中展示广告的后续"></a><a href="https://mp.weixin.qq.com/s/UnRg1CuiupNos_h2XRNf-w" target="_blank" rel="noopener">在开源项目中展示广告的后续</a></h3><blockquote><p>前一段时间，一个 Star 数超过 2.2 万的 Standard JS 开源项目做了一个尝试，通过终端安装后展示赞助商的广告。<br><b>事件后续:</b><br>0、该实验自开启后就遭到很多批评，两个赞助商也退出了；<br>1、实验发起人之一的 feross，在其个人博客发文，宣告实验终结；<br>2、npm 公司的 CTO 已对外作出回应，不接受在终端展示商业广告。另外，npm 会修改更新政策.</p></blockquote><h3 id="better-scroll"><a href="#better-scroll" class="headerlink" title="better-scroll"></a>better-scroll</h3><blockquote><p>BetterScroll 是一款重点解决移动端（已支持 PC）各种滚动场景需求的插件。它的核心是借鉴的 iscroll 的实现，它的 API 设计基本兼容 iscroll，在 iscroll 的基础上又扩展了一些 feature 以及做了一些性能优化。</p></blockquote><blockquote><p>关于此插件：<br><a href="https://better-scroll.github.io/docs/zh-CN/guide/" target="_blank" rel="noopener">better-scroll的官方文档</a><br><a href="https://zhuanlan.zhihu.com/p/27407024" target="_blank" rel="noopener">当better-scroll遇见Vue</a></p></blockquote><h3 id="数据记录"><a href="#数据记录" class="headerlink" title="数据记录"></a>数据记录</h3><blockquote><p>阮一峰的本周分享刊首语提到了如何让三分钟热度的用户坚持下来的一个解决方法：就是数据记录。每天都记录下来干的事情。可以看到自己的进步，产生一种不断挑战自己、超越自己的愿望。<br>正如文中提到的，GitHub 个人页的日历栏目，以及我现在所磕磕盼盼的周总结，希望可以通过数据记录的方式、看到自己的进步，让自己在这个做什么都像是浪费生命的世界里有些记录。</p></blockquote><h3 id="蚂蚁搬家工具"><a href="#蚂蚁搬家工具" class="headerlink" title="蚂蚁搬家工具"></a><a href="https://github.com/ant-move/antmove" target="_blank" rel="noopener">蚂蚁搬家工具</a></h3><blockquote><p>小程序跨平台开发工具。一键实现微信小程序项目到支付宝小程序的迁徙，不再为重复开发而烦恼。</p></blockquote><h3 id="HelloDjango-Django-博客教程"><a href="#HelloDjango-Django-博客教程" class="headerlink" title="HelloDjango - Django 博客教程"></a><a href="https://www.zmrenwu.com/courses/hellodjango-blog-tutorial/" target="_blank" rel="noopener">HelloDjango - Django 博客教程</a></h3><blockquote><p>Django 框架的中文入门教程，免费带你学 django 全栈。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 每周分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 每周分享 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>每周分享第十一期</title>
      <link href="/2019/09/08/issue-11/"/>
      <url>/2019/09/08/issue-11/</url>
      
        <content type="html"><![CDATA[<blockquote><h4 id="这两周疲于总结，想到之前写简书文章的时候，也是坚持日更到五十来天便停滞不前了。这两者最后都中断了下的原因，大概是对一件事的忠诚度不够，驱动力不足、对做的这件事回报感不强烈，越写越疲于应付，实在是一个不好的苗头。我们中华文化传统常言道要坚持，我想-搞清楚坚持的目的是什么-才是当下比较重要的一件事。"><a href="#这两周疲于总结，想到之前写简书文章的时候，也是坚持日更到五十来天便停滞不前了。这两者最后都中断了下的原因，大概是对一件事的忠诚度不够，驱动力不足、对做的这件事回报感不强烈，越写越疲于应付，实在是一个不好的苗头。我们中华文化传统常言道要坚持，我想-搞清楚坚持的目的是什么-才是当下比较重要的一件事。" class="headerlink" title="这两周疲于总结，想到之前写简书文章的时候，也是坚持日更到五十来天便停滞不前了。这两者最后都中断了下的原因，大概是对一件事的忠诚度不够，驱动力不足、对做的这件事回报感不强烈，越写越疲于应付，实在是一个不好的苗头。我们中华文化传统常言道要坚持，我想 搞清楚坚持的目的是什么,才是当下比较重要的一件事。"></a>这两周疲于总结，想到之前写简书文章的时候，也是坚持日更到五十来天便停滞不前了。这两者最后都中断了下的原因，大概是对一件事的忠诚度不够，驱动力不足、对做的这件事回报感不强烈，越写越疲于应付，实在是一个不好的苗头。我们中华文化传统常言道要坚持，我想 搞清楚坚持的目的是什么,才是当下比较重要的一件事。</h4></blockquote><a id="more"></a><h3 id="ZAO刷屏"><a href="#ZAO刷屏" class="headerlink" title="ZAO刷屏"></a>ZAO刷屏</h3><blockquote><p>从8月30日(上周五)晚开始，一款在陌陌团队开发的名为 “ZAO” 的换脸软件迅速在朋友圈刷屏，宣称采用了 AI 技术，只需要一张正脸照就可以把自己变成视频中的主角，受到大火🔥，迅速抢占榜单。随后被富有正义感、社会责任感的一系列公号提出质疑：根据之前的协议，一旦你换脸了，他将可以使用你的肖像权，而且是完全免费、不可撤销、永久、可转授权和可再许可的权利。<br>此后经过国媒人民日报等大V披露，“ZAO”修改了他的协议。</p><p>这件事的背后反应的是一部分人对隐私权的重视程度在逐步提高。在国际化社会氛围下的一个营造、知识水平的提高等都在日益加强，同时联想到最近在推广的刷脸支付等。技术的发展是工作人员日夜辛勤付出的劳动成果，只是其背后的数据存储、数据运用的暗箱最后会不会又反过来引领社会潮流，就好比达尔文的[进化论]一样，新的进化可能通过互联网已经开始新一轮的进化。</p></blockquote><h3 id="切尔诺贝利：核电事故"><a href="#切尔诺贝利：核电事故" class="headerlink" title="切尔诺贝利：核电事故"></a>切尔诺贝利：核电事故</h3><blockquote><p>切利诺贝尔核事故，是一件发生在苏联统治下乌克兰境内切尔诺贝利核电站的核子反应堆事故。该事故被认为是历史上最严重的核电事故，也是首例被国际核事件分级表评为第七级事件的特大事故（第二例是2011年3月11日发生在日本福岛县的福岛第一核电站事故）.<br>1986年4月26日凌晨1点23分，在乌克兰普里皮亚季邻近的切尔诺贝利，核电站在进行第四次的停电测试过程中，由于一系列的原因，核电厂连续爆炸且发出大量的高能辐射，射线剂量是二战时期爆炸于广岛的原子弹的400倍以上。<br>此次事件网上有部分观点认为也是苏联解体的一个诱因，事故发生后，其造成的影响是及其深远、惨痛至今。</p></blockquote><blockquote><p>Craig Mazin执笔﹑Johan Renck执导的HBO/Sky合拍5集迷你剧《切尔诺贝利 Chernobyl》就是那宗闻名的人为灾难事件。</p></blockquote><h3 id="简明美国史"><a href="#简明美国史" class="headerlink" title="简明美国史"></a>简明美国史</h3><blockquote><p>《简明美国史》是一本很有趣的关于美国历史的著作，短小精悍，如果只是想简单了解一下美国历史，可以读读这本书，很震撼。</p></blockquote><blockquote><p>这本书看完之后感觉这描述的美国是一个神奇、牛逼、法制、民主、神的国度。不得不感觉，美国的老大哥地位值得让人尊敬。</p></blockquote><h3 id="vconsole"><a href="#vconsole" class="headerlink" title="vconsole"></a><a href="https://github.com/Tencent/vConsole" target="_blank" rel="noopener">vconsole</a></h3><blockquote><p>预览:<a href="http://wechatfe.github.io/vconsole/demo.html" target="_blank" rel="noopener">http://wechatfe.github.io/vconsole/demo.html</a><br>一款轻量、可扩展的用于在H5网页调试打印的第三方插件。</p></blockquote><h3 id="VSCode"><a href="#VSCode" class="headerlink" title="VSCode"></a>VSCode</h3><blockquote><p>[如何让 vscode 变成你的开发神器？] (<a href="https://mp.weixin.qq.com/s/kSRPBjpU4DlGJFYUeXwf4Q" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/kSRPBjpU4DlGJFYUeXwf4Q</a>).</p><ul><li><code>Ctrl H</code> ：替换文字</li><li><code>Ctrl P</code> ：搜索文件名称</li><li><code>Ctrl B</code> ：侧边栏开关</li><li><code>Ctrl J</code> ：控制台开关</li><li><code>Ctrl 2</code> ：创建新的窗口</li><li><code>Ctrl +</code> ：窗口放大</li></ul></blockquote><blockquote><p>这篇记录了一些常用、简单的VSCode快捷指令、基础使用等。</p></blockquote><h3 id="Vue音乐APP系列专题"><a href="#Vue音乐APP系列专题" class="headerlink" title="Vue音乐APP系列专题"></a>Vue音乐APP系列专题</h3><blockquote><p>这周把Vue的项目代码过了一遍，但代码的分析文章还没有跟上，代码提交至Github仓库。</p></blockquote><h3 id="游戏"><a href="#游戏" class="headerlink" title="游戏"></a>游戏</h3><blockquote><p>这个周末过得有点丧，两天来什么也没做，跟着几个小伙伴玩了几局狼人杀，当玩过这个游戏后，感觉跟从小到大玩过的骰子，有异曲同工之妙，都是在找个其它的窗口去套路。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 每周分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 每周分享 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>每周分享第十期</title>
      <link href="/2019/08/26/issue-10/"/>
      <url>/2019/08/26/issue-10/</url>
      
        <content type="html"><![CDATA[<blockquote><h4 id="原本计划第十期做一个之前文章记录的总结、将一些收藏的网站等内容再做个消化，然后不可饶恕的偷了个懒！"><a href="#原本计划第十期做一个之前文章记录的总结、将一些收藏的网站等内容再做个消化，然后不可饶恕的偷了个懒！" class="headerlink" title="原本计划第十期做一个之前文章记录的总结、将一些收藏的网站等内容再做个消化，然后不可饶恕的偷了个懒！"></a>原本计划第十期做一个之前文章记录的总结、将一些收藏的网站等内容再做个消化，然后不可饶恕的偷了个懒！</h4></blockquote><a id="more"></a><blockquote><p>前天跟小天去给小盘子搬家。</p><p>三个人夜晚把酒言欢，从一个聊到另一个，我一堆疯狂的输出，宣泄着自己的情绪–淋漓尽致的嘚吧嘚。</p><p>昨天回到家中，有了一点小小的自省。</p><p>这些想法的产生首先是持续关注某一类事的结果导向，看到了自我认为的不公、欺骗、谎言。于是看到社会事件便会有角色代入感，慢慢便心中隐藏起来一些戾气。</p><p>就像之前感受的那样，可能自身还处在一个明辨是非的阶段。</p><p>如果看够了不对的，质疑的、怀疑的、气愤的，那么接下来的一步：应该去追求那些认为对的，值得去追寻的东西。不要再去关注那些不认同，更不要花时间和精力去批判质疑那些，皆为无用功。</p><p>当我们谈论的时候，应该是梦想、目标。那些让人热泪盈眶、富有激情的散发在我们日常生活中的点滴。</p><p>众生皆苦，唯有自渡。保留一身正气，生活便没有恐惧。</p></blockquote><h3 id="设计网站大全"><a href="#设计网站大全" class="headerlink" title="设计网站大全"></a><a href="http://hao.shejidaren.com/index.html" target="_blank" rel="noopener">设计网站大全</a></h3><blockquote><p>做设计的应该去关注的一个网站，此网站的知识、工具等聚合应该会让做设计的人产生一丝共鸣。</p></blockquote><h3 id="美化二维码"><a href="#美化二维码" class="headerlink" title="美化二维码"></a><a href="http://www.mobanma.com" target="_blank" rel="noopener">美化二维码</a></h3><blockquote><p>之前二维码的制作用的是草料二维码，无意间发现这样一个网站，也是关于二维码的制作。</p></blockquote><h3 id="Instagram"><a href="#Instagram" class="headerlink" title="Instagram"></a><a href="https://www.instagram.com/liugezhou/" target="_blank" rel="noopener">Instagram</a></h3><blockquote><p>上面链接为我在ins上发的日常生活照片，感觉是非常滴优美，欢迎互关互粉。</p></blockquote><h3 id="人类简史"><a href="#人类简史" class="headerlink" title="人类简史"></a>人类简史</h3><blockquote><p>最早读到这本书的时候是在三四年前，那会为书中的种种思想感叹唏嘘，现在想来也可能是由于收此书的影响，在那之后的生活中思考发生了些变化。上周在地铁、睡前的碎片时间又在重看，希望可以站在旁观者而不是代入感的角色去重新感受这本书。推荐，另外还有两部《未来简史》、《今日简史》为以色列作家尤瓦尔·赫拉利的三重奏。</p><p>另外还对犹太民族做了一个简单的资料查询，为之文化、教育、贡献而感叹。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 每周分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 每周分享 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>每周分享第九期</title>
      <link href="/2019/08/18/issue-9/"/>
      <url>/2019/08/18/issue-9/</url>
      
        <content type="html"><![CDATA[<blockquote><p><strong>这里记录过去一周，我的关注以及值得记录的东西。</strong></p></blockquote><a id="more"></a><h3 id="崩人设"><a href="#崩人设" class="headerlink" title="崩人设"></a>崩人设</h3><blockquote><p>这年头，公众人物最怕的就是“崩人设”。 </p><p>吴秀波“好男人”人设崩塌，翟天临“学霸”人设崩塌，“黄海波”人设崩塌。 </p><p>没有人设，就没有记忆点，也就不会红。但假的人设，终会崩塌，这是摆在所有明星也是整个地球面前的难题。 </p><p>不知为何，就突然想到以色列作家【尤瓦尔·赫拉利】在《人类简史：从动物到上帝》里面说的一句话： </p><p><code>人类几乎从出生到死亡都被种种虚构的故事和概念围绕，让他们以特定的方式思考，以特定的标准行事</code>。 </p></blockquote><h3 id="头条搜索"><a href="#头条搜索" class="headerlink" title="头条搜索"></a>头条搜索</h3><blockquote><p>日前，字节跳动旗下的搜索引擎——“头条搜索”网页版已悄然上线。<br>截至目前(Aug 17,2019)，头条搜索还只有一个主打移动端的网址：<a href="https://m.toutiao.com/search" target="_blank" rel="noopener">https://m.toutiao.com/search</a> ,打开后，搜索框出现了“搜你想看”的slogan。输入关键词后，搜索框下端的“猜你想搜”会出现热门推荐内容<br>百度内容更多元、头条内容更纯粹，但二者都面临着自有内容和站外内容的平衡问题。  </p><p><cite><a href="https://mp.weixin.qq.com/s/NdfBuAC1lgkT3rrMKzg5wA" target="_blank" rel="noopener">文章来源</a></cite></p><p>我现在日常用的搜索引擎为：<code>[多吉搜索](https://www.dogedoge.com)</code>,非常推荐。</p></blockquote><h3 id="美国五大科技巨头都存在监听用户行为"><a href="#美国五大科技巨头都存在监听用户行为" class="headerlink" title="美国五大科技巨头都存在监听用户行为"></a>美国五大科技巨头都存在监听用户行为</h3><blockquote><p>本周三，微软表示已更新隐私政策，让客户知道微软一直在员工和承包商的帮助下收集用户的语音数据。  </p><p>目前，谷歌、微软、苹果、亚马逊等美国科技巨头已经接受美国相关部门调查，美国科技公司因隐私问题一直受到立法者和监管机构的广泛批评。</p><p><cite>那那那么，国内巨头呢？</cite></p></blockquote><h3 id="知乎F轮融资"><a href="#知乎F轮融资" class="headerlink" title="知乎F轮融资"></a>知乎F轮融资</h3><blockquote><p>8月12日，知乎宣布完成F轮融资，总额4.34亿美元。本轮融资由快手领投、百度跟投，腾讯和今日资本原有投资方继续跟投.</p><p>这是知乎迄今为止最大的一轮融资，也是近两年来中文互联网文化和娱乐领域金额最大的融资之一。</p></blockquote><h3 id="印度AI开发应用"><a href="#印度AI开发应用" class="headerlink" title="印度AI开发应用"></a>印度AI开发应用</h3><blockquote><p>8月16日（本周五），有个丑闻刷爆科技媒体、技术圈和创投圈：一个宣称用AI自动开发APP的初闯公司（印度Enginerr.ai），其实是在用真人程序员。 </p><p>同时，该公司利用AI的噱头来吸引客户和投资，获得了软银旗下公司等机构将近3000万美元投资。  </p></blockquote><h3 id="电击、警棍、爆头，被骗去柬埔寨的程序员有多惨？"><a href="#电击、警棍、爆头，被骗去柬埔寨的程序员有多惨？" class="headerlink" title="电击、警棍、爆头，被骗去柬埔寨的程序员有多惨？"></a>电击、警棍、爆头，被骗去柬埔寨的程序员有多惨？</h3><blockquote><p>这篇文章讲述了一些恐怖故事，不知真假，值得警惕、关注。</p><p><cite><a href="https://mp.weixin.qq.com/s/2XM8h2i2OKTdAb0GgIT6vQ" target="_blank" rel="noopener">电击、警棍、爆头，被骗去柬埔寨的程序员有多惨？</a></cite></p></blockquote><h3 id="前端-后端-全栈"><a href="#前端-后端-全栈" class="headerlink" title="前端-后端-全栈"></a>前端-后端-全栈</h3><blockquote><p>这篇文章将对前端和后端开发技术多一个对比，先从基本的开始，然后逐步不比较他们的不同点，比如开发技能的要求、发展潜力、职业生涯的发展和薪水，等等。<br><cite><a href="https://mp.weixin.qq.com/s/F8LG7gMfao-h-EGW_B1l0w" target="_blank" rel="noopener">代码编程一条街，前端后端谁为先</a> </cite><br>这篇文章虽然比较片面，但是可以让不了解编程开发前后端的人有一个小小的认知。</p><p>在这篇文章中，作者尝试总结前端须知的后端体系入门。<br><cite> <a href="https://mp.weixin.qq.com/s/WrpL_QzaKe7qxn-Wq_cZZQ" target="_blank" rel="noopener">「全栈之路」Web前端开发的后端指南</a>  </cite></p></blockquote><h3 id="以下内容来自阮一峰的网络日志"><a href="#以下内容来自阮一峰的网络日志" class="headerlink" title="以下内容来自阮一峰的网络日志"></a>以下内容来自阮一峰的网络日志</h3><blockquote><p>日本批准第一例人体细胞移植入小鼠胚胎，长大以后就是带有人类细胞的老鼠。实验目的是让人类细胞在老鼠身上发育，长出人体器官，最后在移植回人体。</p></blockquote><blockquote><p><code>三氟化氯</code>是人类已知的最强氟化剂，氧化能力比氧更强，可以让已经烧到无法再烧的东西继续燃烧下去。比如沙子、砖块和石棉瓦片、玻璃。目前它主要用于半导体工业，清除电路板表面的氧化物，可以保存在钢、铜、铝等金属容器。</p></blockquote><blockquote><p>软件的运行速度快，说明这个软件是专注的。</p></blockquote><blockquote><p>20世纪50年代，建造月球基地是一项工程和技术的挑战。今天，它基本上是一个政治和经济挑战，难点是说服足够多的的人，花时间和精力去做这件事是值得的。</p></blockquote><h3 id="极客时间"><a href="#极客时间" class="headerlink" title="极客时间"></a>极客时间</h3><blockquote><p>本周五在朋友圈有个前端大V推荐一本来自极客时间的专栏《浏览器工作原理与实践》，优惠价格68，扫大V的码，输入优惠码，与大V私聊还有返现，我扫码购买总共花费了42.40.</p></blockquote><blockquote><p>本周六这本专栏升值至99元.<br>今天看了一些这个专栏的内容，可能由于自己的技术水平与知识认知还很欠缺，目前觉得这个专栏不值优惠的这个价格–四十多块。</p></blockquote><blockquote><p>由此而对电商平台这种销售模式进行了一些瞎想：就好比在天猫买东西、饿了吗订餐一样，如果你直接下单会按网站标注进行收费，但是如果你通过其它方式获得优惠券或者在不同平台下单（比如饿了吗在小程序中下单可以领红包）会有一笔不小的优惠，对这种错综复杂的网购套路，感觉真是乱糟糟的，没有一点精于算计的头脑，同样购买一个商品要比别人花费更多的钱。</p></blockquote><blockquote><p>当然这也是商家的套路，所谓的推广。只是网购市场这么成熟还这么多套路，总觉得会有很多消费者被蒙骗。</p></blockquote><h3 id="编译原理之美"><a href="#编译原理之美" class="headerlink" title="编译原理之美"></a>编译原理之美</h3><blockquote><p>极客时间上最近在推一个专栏：《编译原理之美》。</p><p>技术的世界如此枝繁叶茂。</p><p>看到这个专栏的推广也是在MacTalk池建强的公众号.，大概没有时间和精力去学习各种的技术，但是让我想到了很早之前总结的一篇文章，有一点点的知识穿插，对之前的总结做一个回顾。</p><p><cite>原总结：<a href="https://www.liugezhou.online/2018/12/31/%E7%BC%96%E8%AF%91%E5%9E%8B%E8%AF%AD%E8%A8%80%E4%B8%8E%E8%A7%A3%E9%87%8A%E5%9E%8B%E8%AF%AD%E8%A8%80%E7%9A%84%E5%8C%BA%E5%88%AB/" target="_blank" rel="noopener">编译型语言与解释型语言的区别</a></cite></p></blockquote><h3 id="数组中好用的一些方法"><a href="#数组中好用的一些方法" class="headerlink" title="数组中好用的一些方法"></a>数组中好用的一些方法</h3><blockquote><p>写js代码的时候，我们一般习惯了使用for循环进行遍历。我们也要熟悉几个特别好用的数组的方法：</p><ul><li><code>filter()</code><br>创建一个新的数组，新数组中的元素是通过检查指定数组中符合条件的所有元素，注意：<br>1️⃣、filter()不会对空数组进行检测。<br>2️⃣、filter()不会改变原始数组。<br>语法：<code>array.filter(function(currentValue,index,arr),thisValue)</code> </li><li><code>find()</code><br>方法返回通过测试（函数内判断）的数组的<code>第一个元素</code>的值。注意：<br>1️⃣、find()对于空数组、函数是不会执行的。<br>2️⃣、find()不会改变原始数组。<br>语法：<code>array.find(function(currentValue,index,arr),thisValue)</code>   </li><li><code>map()</code><br>返回一个新数组，数组中的元素为原始数组元素调用函数处理后的值。注意：<br>1️⃣、map()不会对空数组进行检测。<br>2️⃣、map()不会改变原始数组。<br>语法：<code>array.map(function(currentValue,index,arr),thisValue)</code>   </li></ul></blockquote><h3 id="CSS如何使文本以大写字母开头"><a href="#CSS如何使文本以大写字母开头" class="headerlink" title="CSS如何使文本以大写字母开头"></a>CSS如何使文本以大写字母开头</h3><blockquote><p><code>text-transform:capitalize</code>  </p><p>这个一般在外文网站使用较多，我们开发的时候很少会用到，但若遇到了，我想在我不知道有这样一个CSS属性的时候会选择使用JS。</p></blockquote><h3 id="ios键盘唤起，键盘收起页面不归位"><a href="#ios键盘唤起，键盘收起页面不归位" class="headerlink" title="ios键盘唤起，键盘收起页面不归位"></a>ios键盘唤起，键盘收起页面不归位</h3><blockquote><p>本周项目开发中遇到的一个问题。 </p><ul><li><p>问题详情描述：<br>在ios上，input框中输入内容，软键盘弹出，页面内容整体上移，但是键盘收起（即input框失去焦点时），页面内容不下滑，导致再次点击input框时没有反应。（如果是整个页面会发现在安卓机上是不可以上下滑动的，但是在ios机型下整个页面虽有fixed，也可以上下滑动）。  </p></li><li><p>出现原因分析：<br>固定定位的元素 在元素内 input 框聚焦的时候 弹出的软键盘占位 失去焦点的时候软键盘消失 但是还是占位的 导致input框不能再次输入 在失去焦点的时候给一个事件</p></li><li><p>解决办法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&gt;  &lt;input @blur.prevent=&quot;changeBlur&quot; /&gt;</span><br><span class="line">&gt;  …………</span><br><span class="line">&gt;  </span><br><span class="line">&gt;changeBlur()&#123;</span><br><span class="line">&gt;      let u = navigator.userAgent, app = navigator.appVersion;</span><br><span class="line">&gt;      let isIOS = !!u.match(/\(i[^;]+;( U;)? CPU.+Mac OS X/);</span><br><span class="line">&gt;      if(isIOS)&#123;</span><br><span class="line">&gt;        setTimeout(() =&gt; &#123;</span><br><span class="line">&gt;          const scrollHeight = document.documentElement.scrollTop || document.body.scrollTop || 0</span><br><span class="line">&gt;          window.scrollTo(0, Math.max(scrollHeight - 1, 0))</span><br><span class="line">&gt;          &#125;, 200)</span><br><span class="line">&gt;     &#125;</span><br><span class="line">&gt;   &#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></li></ul></blockquote><blockquote><p>在这篇文章中还有几个微信H5页面前端开发，大多数人会遇到的几个兼容性坑.<br><cite>文章来源<a href="https://mp.weixin.qq.com/s/MaRZgFFUj0PB5lY7-wxrFw" target="_blank" rel="noopener">戳这里</a></cite></p></blockquote><h3 id="前端UI框架"><a href="#前端UI框架" class="headerlink" title="前端UI框架"></a>前端UI框架</h3><blockquote><p>本周对几个前端UI框架做了一个小小的了解。<br><a href="https://element.eleme.io/#/zh-CN" target="_blank" rel="noopener">Element-UI</a><br>Element是饿了么前端开源维护的Vue UI组件库,组件齐全，基本涵盖后台所需的所有组件，文档讲解详细，例子也很丰富。 主要用于开发PC端的页面，是一个质量比较高的Vue UI组件库。<br>截至到本周日，Github Star数：<code>40330</code></p><p><a href="https://iview.github.io/docs/guide/introduce" target="_blank" rel="noopener">iView</a><br>iView 是一套基于 Vue.js 的开源 UI 组件库，主要服务于 PC 界面的中后台产品。<br>截至到本周日，Github Star数：<code>22242</code></p><p><a href="https://www.layui.com/" target="_blank" rel="noopener">layui</a><br>layui是一款采用自身模块规范编写的前端 UI 框架，遵循原生 HTML/CSS/JS 的书写与组织形式，门槛极低，拿来即用。其外在极简，却又不失饱满的内在，体积轻盈，组件丰盈，从核心代码到 API 的每一处细节都经过精心雕琢，非常适合界面的快速开发。<br>截至到本周日，Github Star数：<code>19254</code></p><p><a href="https://mint-ui.github.io/#!/zh-cn" target="_blank" rel="noopener">Mint UI</a><br>Mint UI是 饿了么团队开发基于vue .js的移动端UI框架，它包含丰富的 CSS 和 JS 组件，能够满足日常的移动端开发需要.<br>截至到本周日，Github Star数：<code>14810</code></p><p><a href="https://youzan.github.io/vant/#/zh-CN/intro" target="_blank" rel="noopener">vant</a><br>vant–轻量、可靠的移动端 Vue 组件库.<br>vant UI是有赞前端团队基于有赞统一的规范实现的 Vue 组件库，提供了一整套 UI 基础组件和业务组件。通过 Vant，可以快速搭建出风格统一的页面，提升开发效率<br>截至到本周日，Github Star数：<code>9986</code></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 每周分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 每周分享 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jsonp温故</title>
      <link href="/2019/08/11/jsonp%E6%B8%A9%E6%95%85/"/>
      <url>/2019/08/11/jsonp%E6%B8%A9%E6%95%85/</url>
      
        <content type="html"><![CDATA[<h5 id="今天重新学习之前写了半截的项目，其中提到了jsonp，当时也是查了很多资料，做了很多笔记，但是最近在写一个项目的时候，竟然遗忘了很多，所以特此做个总结，在下次再遇到jsonp的时候，可以有一个清晰的认识。"><a href="#今天重新学习之前写了半截的项目，其中提到了jsonp，当时也是查了很多资料，做了很多笔记，但是最近在写一个项目的时候，竟然遗忘了很多，所以特此做个总结，在下次再遇到jsonp的时候，可以有一个清晰的认识。" class="headerlink" title="今天重新学习之前写了半截的项目，其中提到了jsonp，当时也是查了很多资料，做了很多笔记，但是最近在写一个项目的时候，竟然遗忘了很多，所以特此做个总结，在下次再遇到jsonp的时候，可以有一个清晰的认识。"></a>今天重新学习之前写了半截的项目，其中提到了jsonp，当时也是查了很多资料，做了很多笔记，但是最近在写一个项目的时候，竟然遗忘了很多，所以特此做个总结，在下次再遇到jsonp的时候，可以有一个清晰的认识。</h5><a id="more"></a><h4 id="jsonp原理介绍"><a href="#jsonp原理介绍" class="headerlink" title="jsonp原理介绍"></a>jsonp原理介绍</h4><blockquote><p>jsonp就是为了解决前端的跨域问题而进行的一项设计，jsonp之所以能实现跨域，是因为<code>它发送的不是ajax请求</code>，它<code>动态创建了script标签</code>，script标签是不受同源策略限制的，将script的src指向正式的服务器地址。</p></blockquote><h4 id="查找资料："><a href="#查找资料：" class="headerlink" title="查找资料："></a>查找资料：</h4><blockquote><p>目前为止(2012年)最被推崇或者说首选的方案还是用JSON来传数据，靠JSONP来跨域。<br>JSON是一种数据交换格式，而JSONP是一种依靠开发人员的聪明才智创造出的一种非官方跨域数据交互协议。</p></blockquote><h4 id="JSONP是怎么产生的："><a href="#JSONP是怎么产生的：" class="headerlink" title="JSONP是怎么产生的："></a>JSONP是怎么产生的：</h4><blockquote><p>1、一个众所周知的问题，Ajax直接请求普通文件存在跨域无权限访问的问题，甭管你是静态页面、动态网页、web服务、WCF，只要是跨域请求，一律不准； </p><p>2、不过我们又发现，Web页面上调用js文件时则不受是否跨域的影响（不仅如此，我们还发现凡是拥有”src”这个属性的标签都拥有跨域的能力，比如<code>&lt;script&gt;</code>、<code>&lt;img&gt;</code>、<code>&lt;iframe&gt;</code>）；</p><p>3、于是可以判断，当前端如果想通过纯web端（ActiveX控件、服务端代理、属于未来的HTML5之Websocket等方式不算）跨域访问数据就只有一种可能，那就是在远程服务器上设法把数据装进js格式的文件里，供客户端调用和进一步处理；</p><p>4、恰巧我们已经知道有一种叫做JSON的纯字符数据格式可以简洁的描述复杂数据，更妙的是JSON还被js原生支持，所以在客户端几乎可以随心所欲的处理这种格式的数据；</p><p>5、这样子解决方案就呼之欲出了，web客户端通过与调用脚本一模一样的方式，来调用跨域服务器上动态生成的js格式文件（一般以JSON为后缀），显而易见，服务器之所以要动态生成JSON文件，目的就在于把客户端需要的数据装入进去。</p><p>6、客户端在对JSON文件调用成功之后，也就获得了自己所需的数据，剩下的就是按照自己需求进行处理和展现了，这种获取远程数据的方式看起来非常像AJAX，但其实并不一样。</p><p>7、为了便于客户端使用数据，逐渐形成了一种非正式传输协议，人们把它称作JSONP，该协议的一个要点就是允许用户传递一个callback参数给服务端，然后服务端返回数据时会将这个callback参数作为函数名来包裹住JSON数据，这样客户端就可以随意定制自己的函数来自动处理返回数据了。</p></blockquote><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><blockquote><p>npm install jsonp –save</p></blockquote><h4 id="GithubAPI"><a href="#GithubAPI" class="headerlink" title="GithubAPI"></a><a href="https://github.com/webmodules/jsonp" target="_blank" rel="noopener">GithubAPI</a></h4><blockquote><p>API介绍很简洁，下面为全文。</p><p>//语法：<br><strong>jsonp(url,opts,fn)</strong></p><ul><li>url (String) url to fetch<br>//要获取的网址</li><li>opts(Object) ,optional<br>//一个参数对象<br>·param(String) name of the query string parameter to specify the callback (default to callback)<br>// 用于指定回调的查询字符串参数的名称 (默认为callback)<br>·timeout(Number) how long after a timeout error is emitted. 0 to disable(default to 60000)<br>// 超时错误多长时间后出发。 0表示禁用（默认为60s）<br>·prefix(String) prefix for the global callback functions that handle jsonp responses(default to __ip)<br>// 处理jsonp响应的全局回调函数的前缀<br>·name(String) name of the global callback funcitions that handle jsonp responses(default to <code>prefix</code> + incremented counter)<br>// 处理jsonp响应的全局回调函数的名称</li><li>fn callback </li></ul><p>The callback is called with <code>err</code>,<code>data</code> parameters.<br>// 使用<code>err</code>，<code>data</code>参数调用回调。<br>If it times out ,the err will be an ERROR object whose message is Timeout.<br>// 如果超时，则错误将是ERROR对象，其消息为Timeout。<br>Return a function that ,when called,will cancel the in-progress jsonp request( <code>fn</code> wont’t be called)<br>// 返回一个函数，当出现错误时，将取消正在进行的jsonp请求（<code>fn</code>不会被调用）</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> web前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jsonp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>每周分享第八期</title>
      <link href="/2019/08/11/issue-8/"/>
      <url>/2019/08/11/issue-8/</url>
      
        <content type="html"><![CDATA[<blockquote><p><strong>这里记录过去一周，我的关注以及值得记录的东西。</strong></p></blockquote><a id="more"></a><h4 id="在线流程图工具"><a href="#在线流程图工具" class="headerlink" title="在线流程图工具"></a><a href="https://www.zenflowchart.com/" target="_blank" rel="noopener">在线流程图工具</a></h4><blockquote><p>简单好用的在线流程图工具。</p><p>之前开发项目的时候，画过【流程图】，为此还专门下载软件进行点点熟悉画图。</p><p>这个网站简单、易用，不论你是做什么工作，在需要绘制流程图的时候不必用专有软件，可直接打开此网站，使用此网站提供的服务进行流程图的绘画。</p></blockquote><h4 id="面包多–为创造者创收"><a href="#面包多–为创造者创收" class="headerlink" title="面包多–为创造者创收"></a>面包多–为创造者创收</h4><blockquote><p>面包多致力于帮助创造者(开发者，写作者，设计师等)获得收入，创造者可以上传作品到面包多，设置价格，然后获得出售链接，这些链接可以放置于任何地方，以供用户购买这些创造成果.</p><p>我在此平台发布了一篇文章：<a href="https://mianbaoduo.com/product/show/mbd-Yp2Ukw==" target="_blank" rel="noopener">作为一名开发者应该收藏的网站</a></p></blockquote><blockquote><p>内容即为本博客的【工具收藏】。</p></blockquote><blockquote><p>未曾想到想到还收到一个付费。</p></blockquote><blockquote><p>大概了解了一下此产品，基于知识付费方面。</p></blockquote><h4 id="今日热榜-APP"><a href="#今日热榜-APP" class="headerlink" title="今日热榜  APP"></a>今日热榜  APP</h4><blockquote><p>知乎热搜、微博热搜、微信热搜、澎湃新闻、豆瓣、百度等等等热点。</p></blockquote><blockquote><p>此APP便是提供这样一个内容。可通过自己的订阅，查看当下舆论新闻的热搜、热点事件。</p></blockquote><h4 id="华为-HarmonyOS-鸿蒙系统"><a href="#华为-HarmonyOS-鸿蒙系统" class="headerlink" title="华为 HarmonyOS 鸿蒙系统"></a>华为 HarmonyOS 鸿蒙系统</h4><blockquote><p>这是本周五的一大热点事件。<br>根据余承东介绍，“鸿蒙”具备以下特点：</p><p>1、基于微内核、面向全场景的分布式操作系统。  </p><p>2、面向的是“下一代”的 IOT 场景，包括已发布的荣耀智慧屏，规划中的PC、手表手环、车机、音箱、耳机、VR 设备，未来还会延伸至工业、航空航天等领域。 </p><p>3、开源。</p><h5 id="微内核"><a href="#微内核" class="headerlink" title="微内核"></a>微内核</h5><p>“内核”指代的是操作系统中的核心架构，大体可分为“宏内核”与“微内核”，前者代表为 iOS 与安卓，后者代表是谷歌 Fuchsia 与鸿蒙。两者的区别在于：内核越小，涉及的操作系统代码越少，进程越简单。</p></blockquote><blockquote><p>由于宏内核包含的系统服务很多，比如文件系统、进程管理、内存管理、声卡显卡驱动程序等，调用起来需要强大的处理器，所以适用于手机、电脑、PC 等产品；但微内核只提供诸如 CPU 管理、进程调度等最基础的功能，其余服务均以后期叠加的形式完成，因此更适合对于运算需求没那么高的手表、智能家居等 IOT 设备。</p><h5 id="分布式"><a href="#分布式" class="headerlink" title="分布式"></a>分布式</h5><p>分布式技术是 IoT 厂商提出“万物互联”的基础。从手机、到手表、到智能家居、汽车，不同设备对于系统的运算需求（本地/云端）、内存处理都不一样，而“分布式”则是用来连接这些设备的操作系统。<br>…………</p><h6 id="更多文章内容：-鸿蒙初问世，华为敛锋芒"><a href="#更多文章内容：-鸿蒙初问世，华为敛锋芒" class="headerlink" title="更多文章内容： 鸿蒙初问世，华为敛锋芒"></a>更多文章内容： <a href="https://mp.weixin.qq.com/s/v61phlapZi5sXiOpIGJJaw" target="_blank" rel="noopener">鸿蒙初问世，华为敛锋芒</a></h6></blockquote><h4 id="Taro与uni-app"><a href="#Taro与uni-app" class="headerlink" title="Taro与uni-app"></a>Taro与uni-app</h4><blockquote><p>开发一次，到处运行，是每个程序员的梦想。<br>对Taro与uni-app两个框架做了一个小小的对比，对于框架的选型我已然有了自己的选择。下面为简单结论。</p><table><thead><tr><th>描述</th><th>Uni-app：10412</th><th>Taro：20662</th></tr></thead><tbody><tr><td>技术栈</td><td>Vue.js</td><td>React.js</td></tr><tr><td>案例</td><td>案例丰富</td><td>案例丰富</td></tr><tr><td>微信小程序</td><td>⭕</td><td>⭕</td></tr><tr><td>支付宝小程序</td><td>⭕</td><td>⭕</td></tr><tr><td>百度小程序</td><td>⭕</td><td>⭕</td></tr><tr><td>头条小程序</td><td>⭕</td><td>⭕</td></tr><tr><td>H5</td><td>⭕</td><td>⭕</td></tr><tr><td>App</td><td>⭕</td><td>⭕</td></tr></tbody></table></blockquote><blockquote><p>公说公有理婆说婆有理,下面为两个框架各自的评测与开发者评测链接：<br>Taro官方评测：<a href="https://juejin.im/post/5c90eb366fb9a070d4199cc9" target="_blank" rel="noopener">Taro评测</a>.<br>uni-app官方评测：<a href="https://ask.dcloud.net.cn/article/35867" target="_blank" rel="noopener">uni-app评测</a>.<br>开发者评测：<a href="https://juejin.im/post/5c4ec383f265da613e229a67" target="_blank" rel="noopener">Taro vs uni-app</a>. </p><h6 id="开发者评测的简单总结："><a href="#开发者评测的简单总结：" class="headerlink" title="开发者评测的简单总结："></a>开发者评测的简单总结：</h6><p><code>质量对比</code>：<br>从两个项目的实际运行来看，uni-app的跨端效果更好（其实不止对比了官方demo，我们自己也写了小demo），特别是在H5平台相比taro要完善不少。<br>taro 的 dist 目录下不区分编译平台，同一时间仅可编译到一个平台，不支持多个平台对比查看运行效果；<br>uni-app 的 dist 目录区分编译平台，故支持同时编译到多个平台，可同时对比查看不同平台运行效果，这个体验是不错的，更有跨端开发的感觉。<br>另外uni-app的条件编译比较完善，这个在处理平台差异时很有用。</p><p><code>案例对比</code>：<br>两个框架都在官网放上了众多案例，只是taro案例清一色是微信小程序，没看到其他端，难道大家使用taro，只是为了用react开发微信小程序，不需要跨端？<br>综合比较，uni-app跨端质量更好，真实跨端案例也更多.</p></blockquote><blockquote><p><code>运行性能:</code><br>taro在性能优化上做的更细致，使用uni-app需要自己注意代码优化。</p></blockquote><blockquote><p><code>开发体验</code>:<br>都挺好。taro官方未特别推荐IDE，但提供了vscode支持的d.ts； uni-app推荐的开发工具是他自家的HBuilderX，用它可以不配环境，开箱即用.  </p></blockquote><blockquote><p><code>学习交流</code>:<br>另外文档角度，uni-app的文档比taro要完善，数了数交流群的数量，也是uni-app.</p></blockquote><h4 id="微信小程序PC端内测"><a href="#微信小程序PC端内测" class="headerlink" title="微信小程序PC端内测"></a>微信小程序PC端内测</h4><blockquote><p>小程序在PC端的使用，正在内测，这是要移动端、PC端通吃的节奏啊。</p></blockquote><blockquote><p>大约是本周五该新闻被爆料，微信强调，希望通过这一探索，帮助用户在聊天场景中更连贯地使用小程序。</p></blockquote><blockquote><p>小程序的红利应该还未真正到来，一切都在酝酿之中。在我看来，一方面是因为苹果的应用商店在那卡着，另一方面就是生态的布局还在继续，很有可能像微信公众平台、微信读书一样，持续不断的给用户、给开发者一个学习使用的机会，成熟之时，便是爆发之日。</p></blockquote><blockquote><p>在此再插一句：这种垄断巨头做出来的产品是真的好，但是由于垄断天然特性，总是会损害一部分人的利益，大体上看可能会慢慢损害大多数，只是会如温水壶青蛙般不知情。慢慢被同化、无力反驳。垄断者的耐心布局给人方面却又使人感到恐惧。</p></blockquote><h4 id="守望先锋-UI-组件库"><a href="#守望先锋-UI-组件库" class="headerlink" title="守望先锋 UI 组件库"></a><a href="https://haixiang6123.github.io/overwatch-ui-doc/#/start" target="_blank" rel="noopener">守望先锋 UI 组件库</a></h4><blockquote><p>一个《守望先锋》游戏风格的组件库，基于 Vue.js。</p></blockquote><h4 id="视频学英语"><a href="#视频学英语" class="headerlink" title="视频学英语"></a>视频学英语</h4><blockquote><p>金山词霸APP里面有个【视频学英语】模块，画风与抖音相似，推荐。下面为一个小段子的摘抄：<br>[对话场景：一场最终面试，面试者对两个候选人进行面试提问]</p><p>Interviewer：<br>‘You both are excellent.’<br>‘But we only have one vacant position.’<br>‘Let me ask you three more questions.’<br>‘First of all:’<br>‘What’s your hobby?’  </p></blockquote><blockquote><p>Candidate 1:<br>‘I enjoy delicious food.’<br>‘I know all the good restaurants in the city.’</p><p>Candidate 2:<br>‘I enjoy working extra hours.’<br>‘I love my work, my work is my hobby.’</p><p>Interviewer：<br>‘What do you first thing when you get to work?’</p><p>Candidate 1:<br>‘I usually make a task list first,’<br>‘so that my whole day is organzied.’</p><p>Candidate 2:<br>‘I open the door’<br>‘I’m always the first one to work.’</p><p>Interviewer：<br>‘What the last thing you do before leaving work?’</p><p>Candidate 1:<br>‘Close the door’<br>‘I enjoy being the last person to leave work.’</p><p>Candidate 2:<br>‘I copy the next day’s tasks to my USB’<br>‘so I can bring it home and get started on the next day’s work.’</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 每周分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 每周分享 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>每周分享第七期</title>
      <link href="/2019/08/04/issue-7/"/>
      <url>/2019/08/04/issue-7/</url>
      
        <content type="html"><![CDATA[<blockquote><p><strong>这里记录过去一周，一些个人记录。</strong></p></blockquote><blockquote><p>自从公众号被封以及FQ看的国外的一些新闻，突然觉得生活有点不愉快。<br>关注的一些东西充斥着大脑，质疑的太多，想的太多总感觉一些东西在慢慢吞噬自己，很不喜欢现在的状态。有待慢慢调解。</p></blockquote><a id="more"></a><h4 id="哥德巴赫猜想"><a href="#哥德巴赫猜想" class="headerlink" title="哥德巴赫猜想"></a>哥德巴赫猜想</h4><blockquote><p>哥德巴赫1742年给欧拉的信中哥德巴赫提出了以下猜想：<strong>任一大于2的偶数都可写成两个质数之和</strong>。但是哥德巴赫自己无法证明它，于是就写信请教赫赫有名的大数学家欧拉帮忙证明，但是一直到死，欧拉也无法证明。</p></blockquote><blockquote><p>今日常见的猜想陈述为欧拉的版本，即<strong>任一大于2的偶数都可写成两个素数之和</strong>，亦称为“强哥德巴赫猜想”或“关于偶数的哥德巴赫猜想”。</p></blockquote><blockquote><p>上述的哥德巴赫猜想就是我们小学数学经常说的数学为什么要证明1+1=2这样的问题。  </p></blockquote><blockquote><p>1966年陈景润证明了”1+2”成立，即<code>&quot;任一充分大的偶数都可以表示成二个素数的和，或是一个素数和一个半素数的和&quot;</code>。</p></blockquote><blockquote><p>从关于偶数的哥德巴赫猜想，可推出：<code>任一大于7的奇数都可写成三个质数之和的猜想</code>。后者称为“弱哥德巴赫猜想”或“关于奇数的哥德巴赫猜想”。若关于偶数的哥德巴赫猜想是对的，则关于奇数的哥德巴赫猜想也会是对的。2013年5月，巴黎高等师范学院研究员哈洛德·贺欧夫各特发表了两篇论文，宣布彻底证明了弱哥德巴赫猜想。</p></blockquote><blockquote><p>关于偶数的哥德巴赫猜想（强哥德巴赫猜想），迄今还未被证明。</p></blockquote><h4 id="博弈论–金币分配"><a href="#博弈论–金币分配" class="headerlink" title="博弈论–金币分配"></a>博弈论–金币分配</h4><blockquote><p>本周看到一道特别有意思的题目：关于一百个金币如何分配的问题。</p></blockquote><blockquote><p>简单概述为：有一百个金币，A B C依次将分配方案进行提议，超过总人数1/2(不包含)通过，则游戏结束，若第一个人提议不通过，则第一个人要被砍掉，游戏继续。关于这个有意思的博弈论问题，在文末底部的公众号里做了问题的详细描述。</p></blockquote><h4 id="集合悖论"><a href="#集合悖论" class="headerlink" title="集合悖论"></a>集合悖论</h4><blockquote><p>关于集合悖论，有这样一个意思差不多的故事：</p></blockquote><blockquote><p>一个小镇上只有一个理发师，这个理发师理发有这样一个规则：<br><code>他只给不给自己理发的人进行理发，那么他是否可以给自己理发？</code></p></blockquote><blockquote><p>这个问题显然没有答案。</p><p>然后提一下集合悖论：李永乐老师在Youtube上引申大概这么说：<br>这个发明了集合概念的数学家被另一个数学家刁难，问的问题大概是这样的：<br><code>既然集合可以表示一切，那么有没有这样一个集合A，它里面表示的所有元素都是非集合A（不属于集合A）？</code></p></blockquote><blockquote><p>这个思想很好玩，感兴趣的朋友可以在微博或者Yotube上搜一下李永乐老师的视频，包括上面的哥德巴赫猜想与金币问题均有详细视频讲述。</p></blockquote><h4 id="博客的草稿功能"><a href="#博客的草稿功能" class="headerlink" title="博客的草稿功能"></a>博客的草稿功能</h4><blockquote><p>博客写文的时候，一些文章写不完要转为草稿，这是一个会遇到的问题。<br>首先<code>hexo new draft &quot;TS&quot;</code>,会在source/_drafts目录下生成一个TS.md文件.<br>这个文件不被显示在页面上，链接也访问不到。<br>也就是说如果你想把某一篇文章移除显示，又不舍得删除，可以把它移动到_drafts目录之中。</p><p>如果你希望强行预览草稿，  </p><ul><li>更改主_config.yml配置文件： <code>render_drafts: true</code>.  </li><li>或者如下方式启动server：<code>hexo server --drafts</code>.  </li></ul><p>下面这条命令可以把草稿变成文章，或者页面：<code>hexo publish [layout] &lt;filename&gt;</code>.</p></blockquote><h4 id="本周产出"><a href="#本周产出" class="headerlink" title="本周产出"></a>本周产出</h4><blockquote><p>本周对CSS3的内容做了一个简单的回顾：<a href="https://www.liugezhou.online/2019/07/29/CSS回顾查漏补缺/" target="_blank" rel="noopener">CSS回顾查漏补缺</a></p></blockquote><h4 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h4><blockquote><p>本周有点丧，干一件事开始觉得拖拉与抵触，分析下这个原因：  </p></blockquote><blockquote><ul><li>工作没有成就感，重复劳动略显疲惫。</li><li>目标完成后，愉悦从何而来产生怀疑：是为了完成目标后的满足感？还是说是发自内心想要去做这件事？</li><li>当对社会新闻产生怀疑，自己的每日做法除了填报肚子，是不是应该还有一个不宏大但能满足自己的目标？</li></ul></blockquote><blockquote><p>然而，拖拉到现在，有更重要紧急的事要去做。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 每周分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 每周分享 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS3属性全回顾</title>
      <link href="/2019/07/29/CSS%E5%9B%9E%E9%A1%BE%E6%9F%A5%E6%BC%8F%E8%A1%A5%E7%BC%BA/"/>
      <url>/2019/07/29/CSS%E5%9B%9E%E9%A1%BE%E6%9F%A5%E6%BC%8F%E8%A1%A5%E7%BC%BA/</url>
      
        <content type="html"><![CDATA[<h6 id="作为一个前端开发者来说，对CSS的熟悉是基础中的基础。现如今框架眼花缭乱，炫酷的动画、美丽的UI，应接不暇，然而CSS3的本来面目是那么的简单，有很多的CSS3属性虽然特别的常见，但是灵活的运用还是需要我们对基础进行多次的夯实，本篇博客就是来对我们的CSS3的一些属性进行一个大而全的回顾。（可能大多数属性你都烂熟于心、你可以跳过它或者再次做一次温习）"><a href="#作为一个前端开发者来说，对CSS的熟悉是基础中的基础。现如今框架眼花缭乱，炫酷的动画、美丽的UI，应接不暇，然而CSS3的本来面目是那么的简单，有很多的CSS3属性虽然特别的常见，但是灵活的运用还是需要我们对基础进行多次的夯实，本篇博客就是来对我们的CSS3的一些属性进行一个大而全的回顾。（可能大多数属性你都烂熟于心、你可以跳过它或者再次做一次温习）" class="headerlink" title="作为一个前端开发者来说，对CSS的熟悉是基础中的基础。现如今框架眼花缭乱，炫酷的动画、美丽的UI，应接不暇，然而CSS3的本来面目是那么的简单，有很多的CSS3属性虽然特别的常见，但是灵活的运用还是需要我们对基础进行多次的夯实，本篇博客就是来对我们的CSS3的一些属性进行一个大而全的回顾。（可能大多数属性你都烂熟于心、你可以跳过它或者再次做一次温习）."></a>作为一个前端开发者来说，对CSS的熟悉是基础中的基础。现如今框架眼花缭乱，炫酷的动画、美丽的UI，应接不暇，然而CSS3的本来面目是那么的简单，有很多的CSS3属性虽然特别的常见，但是灵活的运用还是需要我们对基础进行多次的夯实，本篇博客就是来对我们的CSS3的一些属性进行一个大而全的回顾。（可能大多数属性你都烂熟于心、你可以跳过它或者再次做一次温习）.</h6><a id="more"></a><h4 id="CSS边框"><a href="#CSS边框" class="headerlink" title="CSS边框"></a>CSS边框</h4><blockquote><p>本节回顾两个属性<code>border-radius</code>、<code>box-shadow</code></p><table><thead><tr><th>属性</th><th>描述</th><th>扩展</th></tr></thead><tbody><tr><td>border-radius</td><td>给div元素添加圆角的边框<br>border-radius 属性是一个最多可指定四个 border -*- radius 属性的复合属性<br><br>若跟四个值其顺序是：<br>左上角、右上角、右下角、左下角</td><td><del>border-top-left-radius<br>border-top-right-radius<br>border-bottom-right-radius<br>border-bottom-left-radius<br></del>推荐写法:<br>border-radius:20px</td></tr><tr><td>box-shadow</td><td>该属性可以设置一个或多个下拉阴影的框<br>语法：<br>box-shadow:h-shadow v-shadow blur spread color inset</td><td><code>h-shadow</code>  水平阴影位置–必填值（允许负值）<br><code>v-shadow</code>  垂直阴影位置–必填值（允许负值） <br><code>blur</code>  可选值–模糊距离<br><code>spread</code>  可选值–阴影的大小<br> <code>color</code>  可选值-颜色<br><code>inset</code>  可选值 –从外内的阴影（开始时）改变阴影内侧阴影</td></tr><tr><td>border-image</td><td></td><td></td></tr></tbody></table></blockquote><h4 id="CSS3背景"><a href="#CSS3背景" class="headerlink" title="CSS3背景"></a>CSS3背景</h4><blockquote><p>本节回顾以下背景属性：<code>bacground-image</code>、 <code>background-size</code>、 <code>background-origin</code>、 <code>background-clip</code></p><table><thead><tr><th>属性</th><th>描述</th><th>扩展</th></tr></thead><tbody><tr><td>background-image</td><td>添加背景图片(允许在元素上添加多个背景图像)</td><td>background: url(flower.png) right bottom no-repeat, url(summertrack.png) left top repeat;</td></tr><tr><td>background-size</td><td>指定背景图像的大小–该大小是相对于父元素的高度和宽度的百分比</td><td>background-size:20px 60px;<br>background-size:100% 100%;<br>background-size:cover–保持图像纵横比并将图像缩放成完全覆盖背景定位的最小大小<br>background-size:contain–保持图像的纵横比并将图像缩放成将适合背景定位区域的最大大小。</td></tr><tr><td>background-origin</td><td>该属性指定了背景图像的位置区域</td><td>content-box<br>padding-box<br>border-box</td></tr><tr><td>background-clip</td><td>该裁剪属性是指从指定位置开始绘制</td><td>content-box<br>padding-box<br>border-box</td></tr></tbody></table></blockquote><h4 id="CSS3的渐变"><a href="#CSS3的渐变" class="headerlink" title="CSS3的渐变"></a>CSS3的渐变</h4><blockquote><p>对CSS3渐变的高效使用，可以提升网站一个Level。<br>我们来回顾：线性渐变（Linear Gradients）和径向渐变（Radial Gradients）  </p></blockquote><blockquote><ul><li><p>线性渐变（Linerar Gradients）：<br>从上到下（默认）：<code>background:linear-gradient(red,blue,...)</code><br>从左到右： <code>background:linear-gradient(to right,red,blue,...)</code><br>从左上角到右下角度： <code>background:linear-gradient(to right bottom,red,blue,...)</code><br>角度定义：<code>background:linear-gradient(45deg,red,blue,...)</code>  </p></li><li><p>径向渐变（Radial Gradients）:<br>颜色结点均匀分布（默认情况下）:<code>background:radial-gradient(red,green,blue)</code><br>颜色结点不均匀分布：<code>background:radial-gradient(red 10%,green 20%,blue 30%)</code><br>设置形状：<code>background: radial-gradient(circle | ellipse, red, yellow, green);</code></p></li></ul></blockquote><h4 id="CSS3文本效果"><a href="#CSS3文本效果" class="headerlink" title="CSS3文本效果"></a>CSS3文本效果</h4><blockquote><p>这里我们来回顾以下文本效果的以下几个属性：<code>text-shadow</code>、<code>text-overflow</code>、<code>word-wrap</code>、<code>word-break</code></p><table><thead><tr><th>属性</th><th>描述</th><th>扩展</th></tr></thead><tbody><tr><td>text-shadow</td><td>文本阴影<br>语法：<br>text-shadow: h-shadow v-shadow blur color;</td><td><code>h-shadow</code>  水平阴影位置–必填值（允许负值）<br><code>v-shadow</code>  垂直阴影位置–必填值（允许负值） <br><code>blur</code>  可选值–模糊距离<br><code>spread</code>  可选值–阴影的大小</td></tr><tr><td>text-overflow</td><td>文本溢出属性指定应向用户如何显示溢出内容（clip、ellipsis、string）</td><td>clip –修剪文本<br>ellipsis–显示省略号代替被修剪的文本<br>string – 使用给定的字符串来代表被修剪的文本</td></tr><tr><td>word-wrap</td><td>允许对长的不可分割的单词进行分割并换行到下一行。（normal、break-word）</td><td>normal–只在允许的断字点换行<br>break-word–在长单词或URL地址内部进行换行</td></tr><tr><td>word-break</td><td>规定非中日韩文本的换行规则</td><td>normal–使用浏览器默认的换行规则。<br>break-all–允许在单词内换行。<br>keep-all–只能在半角空格或连字符处换行。</td></tr></tbody></table></blockquote><h4 id="2D转换"><a href="#2D转换" class="headerlink" title="2D转换"></a>2D转换</h4><blockquote><p>transform:translate(x,y)、rotate(angle)、scale(x,y)、skew(x-angle,y-angle)、matrix()<br>移动、旋转、放大缩小、倾斜。<br>不展开叙述。</p></blockquote><h4 id="CSS3过渡-CSS3动画"><a href="#CSS3过渡-CSS3动画" class="headerlink" title="CSS3过渡 || CSS3动画"></a>CSS3过渡 || CSS3动画</h4><blockquote><ul><li><p>过渡属性<br><code>transition</code>:简写属性，用于在一个属性中设置四个过渡属性。<br><code>transition-property</code>:规定应用过渡的CSS属性的名称。<br><code>transition-duration</code>：定义过渡效果花费的时间。默认为0<br><code>transition-timing-function</code>:规定过渡效果的时间曲线<br><code>transition-delay</code>:规定过渡效果何时开始</p></li><li><p>动画属性</p><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td><code>@keyframse</code></td><td>规定动画</td></tr><tr><td><code>animation</code></td><td>所有动画的简写属性，除了<code>animation-play-state</code>属性</td></tr><tr><td>语法：</td><td><code>animation: name duration timing-function delay iteration-count direction fill-mode play-state;</code></td></tr><tr><td><code>animation-name</code></td><td>规定@keyframes动画的名称</td></tr><tr><td><code>animation-duration</code></td><td>规定动画完成一个周期所花费封秒或毫秒</td></tr><tr><td><code>animation-timing-function</code></td><td>规定动画的速度曲线：默认为[ease（低速-加快-变慢）]</td></tr><tr><td>其它值</td><td>linear(匀速)、ease-in(动画以低速开始)、ease-out(动画以低速结束)、ease-in-out(动画以低速开始和结束)</td></tr><tr><td><code>animation-fill-mode</code></td><td>规定当动画不播放时（当动画完成或者延迟未开始播放时），要应用到的元素的样式。</td></tr><tr><td><code>animation-delay</code></td><td>规定动画何时开始</td></tr><tr><td><code>animation-iteration-count</code></td><td>规定动画被播放的次数   [infinite]无限次</td></tr><tr><td><code>animation-direction</code></td><td>规定动画是否在下一周期逆向地播放。默认是[normal]</td></tr><tr><td>animation-direction – reverse</td><td>动画反向播放</td></tr><tr><td>animation-direction –alternate</td><td>动画在奇数次（1、3、5…）正向播放，在偶数次（2、4、6…）反向播放。</td></tr><tr><td>animation-direction–alternate-reverse</td><td>动画在奇数次（1、3、5…）反向播放，在偶数次（2、4、6…）正向播放</td></tr><tr><td><code>animation-play-state</code></td><td>规定动画是否正在运行或暂停。默认是[running]</td></tr></tbody></table></li></ul></blockquote><h4 id="CSS3多列"><a href="#CSS3多列" class="headerlink" title="CSS3多列"></a>CSS3多列</h4><blockquote><p>关于CSS3的多列属性我好像还真没用到过，看到了就记录一下吧。</p><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>column-count</td><td>指定了需要将一段文字分隔的列数</td></tr><tr><td>column-gap</td><td>该属性指定了列与列之间的缝隙</td></tr><tr><td>column-rule-width</td><td>指定了两列的边框厚度</td></tr><tr><td>column-rule-style</td><td>指定了列与列之间的边框样式（solid | dotted）</td></tr><tr><td>column-rule-color</td><td>指定了两列的边框颜色</td></tr><tr><td>column-rule</td><td>是上述三个属性的缩写</td></tr><tr><td>column-span</td><td>指定元素跨越所有列</td></tr><tr><td>column-width</td><td>指定了列的宽度</td></tr></tbody></table></blockquote><h4 id="CSS3用户界面"><a href="#CSS3用户界面" class="headerlink" title="CSS3用户界面"></a>CSS3用户界面</h4><blockquote><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>resizing</td><td>指定一个元素是否应该由用户去调整大小</td></tr><tr><td>box-sizing</td><td>当你设置一个元素为box-sizing:border-box时，此元素的内边距和边框便不再增加它的宽度了</td></tr><tr><td>outline-offset</td><td>对轮廓进行偏移，并在超出边框边缘的位置绘制轮廓</td></tr></tbody></table></blockquote><h4 id="CSS3图片"><a href="#CSS3图片" class="headerlink" title="CSS3图片"></a>CSS3图片</h4><blockquote><ul><li>响应式图片</li></ul></blockquote><pre><code>img{    max-width:100%;    height:auto;}</code></pre><blockquote><ul><li>图片文本<br>定义图片文本的时候结合position:relative和position:absolute。</li></ul></blockquote><blockquote><ul><li>响应式图片相册<br>在这里正确用好这几个属性：<code>box-sizing:border</code>、<code>@media</code>、<code>clear:both</code></li></ul></blockquote><h4 id="CSS3弹性盒子-Flex布局"><a href="#CSS3弹性盒子-Flex布局" class="headerlink" title="CSS3弹性盒子-Flex布局"></a>CSS3弹性盒子-Flex布局</h4><blockquote><p>之前总结过一篇：<a href="https:/www.liugezhou.online/2018/08/22/Flex布局/" target="_blank" rel="noopener">Flex布局</a></p></blockquote><h4 id="CSS3多媒体查询"><a href="#CSS3多媒体查询" class="headerlink" title="CSS3多媒体查询"></a>CSS3多媒体查询</h4><blockquote><p>CSS3多媒体类型</p><table><thead><tr><th>值</th><th>描述</th></tr></thead><tbody><tr><td>all</td><td>用于所有多媒体类型设备</td></tr><tr><td>print</td><td>用于打印机</td></tr><tr><td>screen</td><td>用于电脑屏幕、平板、智能手机等</td></tr><tr><td>speech</td><td>用于屏幕阅读器</td></tr></tbody></table></blockquote>]]></content>
      
      
      <categories>
          
          <category> web前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>每周分享第六期</title>
      <link href="/2019/07/28/issue-6/"/>
      <url>/2019/07/28/issue-6/</url>
      
        <content type="html"><![CDATA[<blockquote><p><strong>这里记录过去一周，我的关注以及值得记录的东西。</strong></p></blockquote><blockquote><p>本周二下午我的公众号便遭遇了灭顶之灾–永久封禁。<br>不知道是什么原因，也找不到申诉入口。<br>于是本周末就花了点时间丰富了下自己的博客，此外没有别的产出了，下面做一个小的记录。</p></blockquote><a id="more"></a><h3 id="Hexo-Next"><a href="#Hexo-Next" class="headerlink" title="Hexo || Next"></a>Hexo || Next</h3><blockquote><p>本周周末的博客搭建经验分享：<br>只需要看两个官方文档就可以了：<br><a href="https://hexo.io/zh-cn/docs/index.html" target="_blank" rel="noopener">Hexo官方文档</a><br><a href="https://theme-next.iissnan.com/" target="_blank" rel="noopener">NexT官方文档</a></p><p>此博客中用到的一些第三方服务：</p><ul><li>七牛云对象存储免费图片存储空间<br>写博客时最好是图片上传，再就是自己的图片存放地址，如果引用别的地方图片，一段时间图片地址就会失效。</li><li>LeanCode<br>在此网站注册且实名认证后，你可以为你的博客文章添加评论、文字统计等功能。</li><li>百度统计<br>在你的博客中加入<code>baidu_analytics</code>,便可以清楚地知道你的网站被访问了些什么。</li><li>TIDIO<br>Tidio Chat 是一款界面极其简洁的网页免费在线聊天工具.只需要简单的配置，你就可以在你的网站上搭建一个聊天窗口。</li></ul></blockquote><h3 id="RSS"><a href="#RSS" class="headerlink" title="RSS"></a>RSS</h3><blockquote><p>RSS（简易信息聚合）是一种消息来源格式规范，用以聚合经常发布更新数据的网站，例如博客文章、新闻、音频或视频的网摘。RSS文件（或称做摘要、网络摘要、或频更新，提供到频道）包含了全文或是节录的文字，再加上发用者所订阅之网摘布数据和授权的元数据。<br>简单来说，就是能通过类似鲜果阅读，ZAKER、Feedly这类阅读器，实现目标网站的聚合阅读。</p><p>通俗易懂的介绍RSS：<a href="https://www.ruanyifeng.com/blog/2006/01/rss.html" target="_blank" rel="noopener">如何使用RSS</a></p><p>你只需要下载一个RSS阅读器，就可以了，App Store 推荐下载：【RSS Prime】。</p><p>我的网站RSS订阅地址为：<a href="https://www.liugezhou.online/atom.xml" target="_blank" rel="noopener">https://www.liugezhou.online/atom.xml</a></p></blockquote><h3 id="7款便捷实用的CSS3工具"><a href="#7款便捷实用的CSS3工具" class="headerlink" title="7款便捷实用的CSS3工具"></a><a href="https://mp.weixin.qq.com/s/Tm6Hhn181MQkyYswMxgVzw" target="_blank" rel="noopener">7款便捷实用的CSS3工具</a></h3><blockquote><p>一些css代码在线生成工具，包括聊天气泡、Loading、triangle 、Button 、box-shadow、border-image等。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 每周分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 每周分享 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>电脑更换如何继续写hexo博客</title>
      <link href="/2019/07/24/%E7%94%B5%E8%84%91%E6%9B%B4%E6%8D%A2%E5%A6%82%E4%BD%95%E7%BB%A7%E7%BB%AD%E5%86%99hexo%E5%8D%9A%E5%AE%A2/"/>
      <url>/2019/07/24/%E7%94%B5%E8%84%91%E6%9B%B4%E6%8D%A2%E5%A6%82%E4%BD%95%E7%BB%A7%E7%BB%AD%E5%86%99hexo%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<h4 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h4><blockquote><p>之前我用hexo搭建过一个博客，不过后来由于换了电脑之后，理所应当接着在搭建好的博客上继续写，可是没有成功。</p></blockquote><blockquote><p>我当时是这么操作的：直接将原电脑博客的源文件copy到新电脑并直接部署，导致了时间的全部错乱，博客时间没有同步，当时也是查了很多资料，结果还是没有成功，于是当初便又重新搭建了现在用的这个博客。</p><p>其实当时只有在每篇文章标题上加个date字段就能解决我上述所说的问题,还是因为之前对HEXO配置什么的都没看过的原因。</p><p>然后因为这个date问题看了半天，最后在【电脑更换继续写博客】这个问题上找到了一个对于我来说最佳的方案。</p></blockquote><a id="more"></a><blockquote><p>这篇文章要解决总结的问题是：使用hexo搭建完博客之后 ，如果换了电脑，怎么继续写搭建好的hexo博客。</p><p>这篇总结欠了很久，这篇总结也是在我完全明白如何操作后的总结。</p></blockquote><h4 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h4><blockquote><p>首先假设的场景是这样的：你在本地搭建好了博客（你本地文件夹为blog），且已经写了一段时间的博客，然后你准备回回家中的电脑继续写博客，于是在原有的电脑上你要这么操作：</p></blockquote><blockquote><p>第一步：在你的Github博客上新建一个分支，我们设为hexo分支，并且在你的Github上将hexo分支设为默认分支。</p></blockquote><blockquote><p>第二步：先在你原来的电脑上新建一个文件夹（newBlog）且clone这个hexo分支到你本地，把除了.git之外的文件全部删掉。</p></blockquote><blockquote><p>第三步：把你博客源文件（blog下的文件）除了.deploy_git文件外全部复制到newBlog下【注意如果你之前克隆过theme中的主题文件，那么应该把主题文件中的.git文件夹删掉】</p></blockquote><blockquote><p>第四步：执行提交文件操作：<code>git add .</code> <code>git commit –m &quot;add branch&quot;</code>  <code>git push</code></p></blockquote><blockquote><p>第五步：这个时候你将要开始在newBlog这个文件下<code>hexo d</code>|| <code>git add.</code> 、<code>git push</code>等操作，之前的blog文件可以扔到垃圾箱了。</p></blockquote><h6 id="以上本地的操作完成后，你提交完代码就回家了，这个时候你到了家中（一些基础配置就不说了）："><a href="#以上本地的操作完成后，你提交完代码就回家了，这个时候你到了家中（一些基础配置就不说了）：" class="headerlink" title="以上本地的操作完成后，你提交完代码就回家了，这个时候你到了家中（一些基础配置就不说了）："></a>以上本地的操作完成后，你提交完代码就回家了，这个时候你到了家中（一些基础配置就不说了）：</h6><blockquote><p>第一步：clone你在公司<code>git push</code>的项目到你的本地。</p></blockquote><blockquote><p>第二步：<code>cd xxx.github.io</code>、<code>npm install</code>、<code>npm install hexo-deployer-git --save</code></p></blockquote><blockquote><p>第三步：<code>hexo g</code>、<code>hexo d</code>。</p></blockquote><blockquote><p>这个时候你便可以在家继续写博客了，只不过写完的时候别忘了<code>git push</code> 一下.</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> HEXO博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微信公众号被封引发的焦虑</title>
      <link href="/2019/07/23/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7%E8%A2%AB%E5%B0%81%E5%BC%95%E5%8F%91%E7%9A%84%E7%84%A6%E8%99%91/"/>
      <url>/2019/07/23/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7%E8%A2%AB%E5%B0%81%E5%BC%95%E5%8F%91%E7%9A%84%E7%84%A6%E8%99%91/</url>
      
        <content type="html"><![CDATA[<h3 id="事情经过"><a href="#事情经过" class="headerlink" title="事情经过"></a>事情经过</h3> <blockquote class="blockquote-center">公元2019年7月23日大约下午两点的时候，我得知我的微信公众号被封号了。</blockquote><blockquote><p>犹如晴天霹雳。气愤、惶恐、不安。</p><p>手机后台登录的时候是这么显示的：</p><a id="more"></a><p><img src="http://img.liugezhou.online/20190724wechatcaonima.jpg" alt="20190724wechatcaonima"></p></blockquote><blockquote><p>公众号界面是这么显示的：<br><img src="http://img.liugezhou.online/190724wechatnimabi.jpg" alt="190724wechatnimabi"></p></blockquote><hr><blockquote><p>我已经无法保持正常的思考去回想这个事情，由于太过气愤，于是情绪不免戾气重重,夜不能寐，还引发了一些联想：</p><p><del>“每日英语APP”因为转载外国时政新闻，下架了。</del></p><p><del>“Soul”等优秀的社交APP，因为一个“历史虚无主义、色情暴力” ，下架了。</del></p><p><del>等等的APP或者网站由于某某种原因，下架了。</del></p><p><del>崔永元由于揭露各种黑幕，微博禁声、不见天日。</del></p><p><del>【紫竹张先生】公号因一篇关于彩票的文章黑幕，永久封掉。</del></p><p><del>国外的等等等等等的网站不能访问。</del></p><p><del>人是一个容易遗忘的物种，我要记住这些，勿忘国耻，这是国家的耻辱。</del></p></blockquote><h4 id="砥砺前行"><a href="#砥砺前行" class="headerlink" title="砥砺前行"></a>砥砺前行</h4><blockquote><p>我只是想知道，到底因为什么被封禁。<br>同时我也欣慰：国家的法律法规在慢慢进化、得到改善。</p><p>同时我也质疑：<del>法律规定是否真的会保护大多数平民，而不是贪官污吏、官商勾结。</del></p><p>这么多没有信仰的人，好不容易在工作上找到一丝安慰，一纸令下，全都泡汤。</p><p>真的是：<del>“现在的企业要生存，非得跟权利勾结不可，那些勾结不上的就没有安全感”。</del></p><p>我不能放弃，不能自暴自弃，黑夜给我了黑色眼睛，我要用他去寻找光明。</p></blockquote><blockquote><p>我现在要做的就是尽快从这种恶心的状态里调整我的心态.</p><p>要相信世界还是美好的，要相信言论还是自由的。  </p><p>要说服自己是因为自己的十恶不赦才让感受如此强烈。</p><p>我要感谢，我要有一个感恩的心， </p><p>我为止而悔恨，自责、内疚、检讨。</p><p>我不对、我有罪、我忏悔  </p></blockquote><h4 id="那么接下来呢？"><a href="#那么接下来呢？" class="headerlink" title="那么接下来呢？"></a>那么接下来呢？</h4><blockquote><p>吃一堑长一智，我相信很多的未知、敏感区域被牛人们踩踏过.在我国如果思想有那么一点偏差，将陷入深渊。</p><p>从今天开始，不写新闻，只偷偷关注，对所有的全特么的哄人的、洗脑的新闻嗤之以鼻，增加自己的判断.绝不停止思考跟质疑。</p><p>作为一个程序员，好好写好自己的程序才是应该专注的事。</p><p>继续申请公众号，继续写文，写文真的是能让人更加理性的分析、思考一个问题。  </p><p>只关注IT工作领域，虽然现在也突然觉得工作也失去了意义，但是毕竟，得吃饭。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 吐槽 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 吐槽 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>每周分享第五期</title>
      <link href="/2019/07/21/issue-5/"/>
      <url>/2019/07/21/issue-5/</url>
      
        <content type="html"><![CDATA[<h5 id="这里记录过去一周，我的关注以及值得记录的资讯。"><a href="#这里记录过去一周，我的关注以及值得记录的资讯。" class="headerlink" title="这里记录过去一周，我的关注以及值得记录的资讯。"></a>这里记录过去一周，我的关注以及值得记录的资讯。</h5><blockquote><p><img src="http://img.liugezhou.online/20190720diwuqi.png" alt="第五期"><br>本周是周总结的第五周，记录的过程中，有时候会产生自我怀疑：记录的这些，其中的意义到底是什么？想了一通之后：<br>我觉得除了填满周末美好时光外，对时下热点关注的积累可能会在今后的某个时间点上将这些信息进行穿插使用。<br>与我个人而言，可能我正处在不知道什么是好、什么是对，什么是道理，什么是真理的这种探索时期。<br>本着【<code>不去纠正别人的三观为我当下的三观</code>】这种态度，文章基调多为记录而非评论.<br>告诫自己不要被动输入，要思考、要感受，希望自己可以慢慢成为社会生活的一名参与者。</p></blockquote><a id="more"></a><h2 id="资讯"><a href="#资讯" class="headerlink" title="资讯"></a>资讯</h2><h3 id="新闻栏"><a href="#新闻栏" class="headerlink" title="新闻栏"></a>新闻栏</h3><h4 id="网上抢红包要缴税，企业要收个人可免"><a href="#网上抢红包要缴税，企业要收个人可免" class="headerlink" title="网上抢红包要缴税，企业要收个人可免"></a>网上抢红包要缴税，企业要收个人可免</h4><blockquote><p>财政部、国家税务总局日前联合印发公告，对网络红包等收入是否需要缴纳个税进行了明确。根据公告，网络红包纳入礼品范围，按照“偶然所得”项目计算缴纳20%个人所得税。</p><p>此次调整仅限于企业向个人发放的带有中奖性质的网络红包，并不包括亲戚朋友之间互相赠送的网络红包。（人民日报海外版）</p></blockquote><h4 id="每日英语听力"><a href="#每日英语听力" class="headerlink" title="每日英语听力"></a>每日英语听力</h4><blockquote><p>周二,上海网信办日前就“每日英语听力”APP<code>违规转载境外时政新闻</code>、“环球老虎财经”翻炒旧闻进行所谓舆论监督，约谈两家公司并罚款。</p></blockquote><h4 id="先救人、再报警"><a href="#先救人、再报警" class="headerlink" title="先救人、再报警"></a>先救人、再报警</h4><blockquote><p>2019年7月16日3时30分，在朝阳区南四环外环主路,一小客车前部与一轮式自行机械车尾部发生碰撞，后小客车起火燃烧，造成小客车内两人死亡，两车损坏，因涉嫌过失致人死亡罪已被公安机关依法刑事拘留，案件正在进一步调查。这段视频也引发了大众对于先救人还是先报警的讨论。</p></blockquote><h4 id="张扣扣案"><a href="#张扣扣案" class="headerlink" title="张扣扣案"></a>张扣扣案</h4><blockquote><p>有不少人对张扣扣表示同情，甚至对判决结果进行质疑。部分网民认为张扣扣是为母杀人的“孝子”，而其辩护律师的辩护思路也认为张扣扣是“为母报仇”，恳请法院可以给其留一条生路。</p></blockquote><blockquote><p>7月17日上午，陕西省汉中市中级人民法院遵照最高人民法院院长签发的死刑执行命令，对在2018年除夕杀害三人的张扣扣执行了死刑。</p><p>文章来源 <a href="https://mp.weixin.qq.com/s/0fm076EZqL8SLf1INiB4kg" target="_blank" rel="noopener">张扣扣案，一堂深刻的公共普法课</a></p></blockquote><h4 id="新规栏"><a href="#新规栏" class="headerlink" title="新规栏"></a>新规栏</h4><h4 id="公职人员注意！出差餐费交通费新规来了"><a href="#公职人员注意！出差餐费交通费新规来了" class="headerlink" title="公职人员注意！出差餐费交通费新规来了"></a>公职人员注意！出差餐费交通费新规来了</h4><blockquote><p>近日，财政部办公厅、国家机关事务管理局办公室、中共中央直属机关事务管理局办公室联合印发《关于规范差旅伙食费和市内交通费收交管理有关事项的通知》（以下简称《通知》）。</p><p>分类细化差旅伙食费和市内交通费交纳标准及管理要求，规范接待单位开具凭证及收取费用管理，明确中央和地方相关部门的职责分工。《通知》自2019年8月1日起施行。</p></blockquote><blockquote><p>文章来源：<a href="https://mp.weixin.qq.com/s/0sKen1FAZuCQMOCLQmA83g" target="_blank" rel="noopener">公职人员注意​！出差餐费交通费新规来了，别踩红线​！</a>​</p></blockquote><h4 id="快递新规"><a href="#快递新规" class="headerlink" title="快递新规"></a>快递新规</h4><blockquote><p>【邮政局新规：使用智能快递箱投递应征得收件人同意】  </p></blockquote><blockquote><p>日前，国家邮政局通过了《智能快件箱寄递服务管理办法》，该办法将于2019年10月1日起施行。</p></blockquote><blockquote><p>其中明确要求，使用智能快件箱投递快件应征得收件人同意。快件出现外包装明显破损、重量与寄递详情单记载明显不符等情况，不得使用智能快件箱投递。此外还要求快递箱运营企业合理设置快件保管期限，保管期限内不得向收件人收费。</p></blockquote><blockquote><p>文章来源 <a href="https://weibo.com/1784473157/HEbhF8TTV?type=comment" target="_blank" rel="noopener">中国新闻网</a></p></blockquote><h4 id="下一个风口–养老业"><a href="#下一个风口–养老业" class="headerlink" title="下一个风口–养老业"></a>下一个风口–养老业</h4><blockquote><p>我国18年全国60岁以上人口2.49亿，占总人口的18%，到2050年我国将超过35%的人口超过60岁，大概4亿人，占亚洲老年人2/5.（世界卫生组织预测）。</p></blockquote><blockquote><p>美国养老模式：CCRC老年社区–最著名老年社区品牌【太阳城】。</p><p>日本养老模式：科技养老–截至17年，65岁以上人口占全国28%，由于“人力资源”短缺，2013年开始不再建养老院，重点放在科技养老。</p><p>德国养老模式：医养结合–全球化老龄化排名第三。德国注重为老人提供良好的医疗服务，比较良好的体系为·双元制职业教育培养体系·。</p><p>中国养老模式：正在探索–根据“60+养老产业服务平台”数据显示：截至09年上半年，我国上市公司已有超80家企业涉足养老业。产业布局主要为三块：养老地产（45.7%）、医疗健康（18.5%）、智慧养老（17.4%）—-这么看来养老还是得有资本啊 。</p><p>文章来源：<a href="https://mp.weixin.qq.com/s/i5-JHI90CFxUufhegKrUiA" target="_blank" rel="noopener">谁做中国2.49亿老人的生意</a></p></blockquote><h3 id="科技栏"><a href="#科技栏" class="headerlink" title="科技栏"></a>科技栏</h3><h4 id="大脑芯片植入"><a href="#大脑芯片植入" class="headerlink" title="大脑芯片植入"></a>大脑芯片植入</h4><blockquote><p>号称要“拯救世界”，创造特斯拉颠覆汽车业、把飞船送上太空的马斯克，又向世界宣布了一项重大成果——大脑芯片植入！</p><p>这项黑科技是通过一台神经手术机器人，安全无痛地在脑袋上穿孔，向大脑内快速植入芯片，然后通过无线装置把意念发射给外部设备，从而实现“意念控物”。</p><p>马斯克的这项黑科技，学名叫做“脑机接口”，是当前科技界最前沿的研发技术。这项技术希望能够“翻译”人脑的意识，实现人类与人类之间、人类与机器之间无障碍交流。</p></blockquote><blockquote><p>文章来源  <a href="https://mp.weixin.qq.com/s/ARGhO5YWw32xi7eAd8l3uw" target="_blank" rel="noopener">太突然！又一黑科技诞生！超级人类要来了？</a></p></blockquote><h4 id="全球最大电子烟品牌「JUUL」将进军中国"><a href="#全球最大电子烟品牌「JUUL」将进军中国" class="headerlink" title="全球最大电子烟品牌「JUUL」将进军中国"></a>全球最大电子烟品牌「JUUL」将进军中国</h4><blockquote><p>最早于 2016 年就已经开始对中国市场进行研究。</p></blockquote><blockquote><p>美国电子烟品牌「JUUL」将正式进军中国市场，已与京东达成战略合作，最晚今年 10 月，JUUL 电子烟产品会上架京东电商平台。此外，JUUL 计划在 15 个月内，在市场投放至少 1 亿美元进行品牌建设及营销工作。</p></blockquote><blockquote><p>文章来源 <a href="https://mp.weixin.qq.com/s/RQS3n430pgHUADhWFCDoEQ" target="_blank" rel="noopener">投放 1 亿美元、和京东战略合作，全球最大电子烟品牌「JUUL」将进军中国</a></p></blockquote><h4 id="微博流量流失"><a href="#微博流量流失" class="headerlink" title="微博流量流失"></a>微博流量流失</h4><blockquote><p>微博正在失去对年轻人的吸引力。</p></blockquote><blockquote><p>注意力稀缺时代，随着抖音、快手、小红书逐渐成为主流娱乐社交工具，用户有限的闲暇时间被不断割裂成多块。微博成为被切割的那一块。</p></blockquote><h4 id="Google已经取消中国搜索引擎项目"><a href="#Google已经取消中国搜索引擎项目" class="headerlink" title="Google已经取消中国搜索引擎项目"></a>Google已经取消中国搜索引擎项目</h4><blockquote><p>Google 公共政策副总裁 Karan Bhatia 称该公司已经取消了审查版搜索引擎项目 Project Dragonfly。</p></blockquote><blockquote><p>Project Dragonfly 是在去年 8 月被 The Intercept 曝光的，之后就遭到广泛的批评，Google 雇员也联合施压要求公司终止该项目。</p><p>Google 早在 2010 年就退出了中国搜索市场，但通过 Project Dragonfly Google 想要重返中国市场重新推出搜索产品，并将会根据要求审查内容。Google CEO Sundar Pichai 去年底在国会听证会上作证称，该公司目前没有计划在中国发布搜索产品。</p></blockquote><h4 id="微信iOS-7-0-5版本更新"><a href="#微信iOS-7-0-5版本更新" class="headerlink" title="微信iOS~7.0.5版本更新"></a>微信iOS~7.0.5版本更新</h4><blockquote><p>7月16日iOS版微信版本更新：可以把收藏的笔记、文章、小程序等设为浮窗，最高可设置5个。</p></blockquote><blockquote><p>安卓版截至目前，还未更新。</p></blockquote><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><h4 id="左翼右翼"><a href="#左翼右翼" class="headerlink" title="左翼右翼"></a>左翼右翼</h4><blockquote><p>传统来说，左派通常主张积极改革，主张把旧的意识形态和制度革除，从而建立新的意识形态和制度，反对派一般自认为左派；右派一般较为保守，主张稳妥、秩序、渐进、缓慢的改革方式，强调维护旧有传统，保皇党一般自认为右派。—-[知乎]</p></blockquote><h4 id="GFW"><a href="#GFW" class="headerlink" title="GFW"></a>GFW</h4><blockquote><p>防火长城（英文名称Great Firewall of China，简写为Great Firewall，缩写GFW），也称中国防火墙或中国国家防火墙，指中华人民共和国政府在其管辖因特网内部建立的多套网络审查系统的总称，包括相关行政审查系统。 首要设计者为北京邮电大学原校长方滨兴，被称为“国家防火墙之父”.</p></blockquote><blockquote><p>争议颇多。</p></blockquote><h4 id="书籍"><a href="#书籍" class="headerlink" title="书籍"></a>书籍</h4><blockquote><p><code>激荡四十年</code>—-从吴晓波老师角度学习中国近代经济企业史。</p><p>内容面设计较广，对于我国企业、经济的发展了解有一个更好的启蒙效果。自崔永元事件之后我个人比较关注以及厌恶微博现在这种娱乐至上的发展。下面摘录部分为书中提到关于微博方面的：</p><p>“尽管微博的兴起与娱乐明星的参与密不可分，然而，它的大众化则有赖于各阶层的集体卷入。越来越多的年轻人开通了自己的微博，在这里表达他们对生活中的公共事务的看法，企业在微博上重建自己的品牌阵地。甚至，官办媒体和各级政府部门都把微博当成新的传播和政务公开的窗口。全民性的参与，使得微博成为中国最热烈的舆论广场。”</p><p>“《南方人物周刊》认为，微博的现实，就是中国社会的写实，“在一个个喊冤求助的帖子背后，是渴求解决问题的心；在一条条带着强烈情绪发泄的微博后面，是无数压抑已久的灵魂；在名人的打情骂俏里面，透露的是名利场的百态。这分明就是一个微缩的社会图景”。”</p></blockquote><blockquote><p>“这本杂志还以编年体的方式记述了本年度内值得记忆的一系列微博事件，与经济有关的公共事件包括山西疫苗案、王家岭矿难、南京化工厂爆炸和宜黄血拆事件等。”</p><p>“其中，宜黄血拆是10年新浪微博上最广为人知的公众事件：9月10日，在江西抚州市宜黄县凤岗镇，31岁的女儿钟如琴、59岁的母亲罗志凤、79岁高龄的大伯叶忠诚为保卫自己的家园不被强拆，以自焚抗争。此后，钟家女儿钟如九多番寻求媒体帮助，当地政府却百般阻挠。网友在微博上开展了救援与爱心接力活动。先是借助微博的多方传播，使当地政府有所收敛，再是通过微博令钟家得到了国内一流的烧伤科大夫的救助。”<br>￼<br>“新浪微博创造了一个互联网上的“公共广场”，它在过去一年多里所搅动的舆论潮流，极大地激发了民众参与公共事务的热情，同时带有狂暴和近乎失控的原生态特征。划重点，<code>2010年的微博世界竟是最后的一次广场草根狂欢</code>。”</p></blockquote><h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h2><hr><h4 id="双峰实验"><a href="#双峰实验" class="headerlink" title="双峰实验"></a>双峰实验</h4><blockquote><p>据说「双缝实验」，曾引起物理学界大地震，爱因斯坦穷尽一辈子也无法弄明白。<br>这篇文章让我对双峰实验的过程有了一个稍微清晰的认识：</p></blockquote><blockquote><p><a href="https://mp.weixin.qq.com/s/jyTX921Uy6Zp7JzzpnhCsg" target="_blank" rel="noopener">可怕的曼德拉效应，以及双缝实验</a></p></blockquote><h4 id="baidu-netdisk-downloaderx"><a href="#baidu-netdisk-downloaderx" class="headerlink" title="baidu-netdisk-downloaderx"></a>baidu-netdisk-downloaderx</h4><blockquote><p> 一款图形界面的百度网盘不限速下载器，支持 Windows、Linux 和 Mac。  —-<a href="https://github.com/b3log/baidu-netdisk-downloaderx" target="_blank" rel="noopener">BND</a><br>百度网盘不限速客户端, golang + qt5, 跨平台图形界面—-<a href="https://github.com/peterq/pan-light" target="_blank" rel="noopener">pan-light</a></p></blockquote><h4 id="不安分的-Go-强势入侵前端"><a href="#不安分的-Go-强势入侵前端" class="headerlink" title="不安分的 Go 强势入侵前端"></a>不安分的 Go 强势入侵前端</h4><blockquote><p> Go 语言写前端 Web 应用借助的是 WebAssembly 。</p><p>那什么是 WebAssembly 呢？它也叫 wasm ，是由 Google、Microsoft、Mozilla、Apple 等几家大公司合作发起的 WebAssembly 是一种新的字节码格式，主流浏览器都已经支持 WebAssembly。和 JS 需要解释执行不同，WebAssembly 字节码和底层机器码很相似可快速装载运行，因此性能相对于 JS 解释执行大大提升。也就是说 WebAssembly 并不是一门编程语言，而是一份字节码标准，需要用高级编程语言编译出字节码放到 WebAssembly 虚拟机中才能运行 。所以，理论上讲只要能编译成 WebAssembly 字节码的高级语言都可以写 Web 应用程序。</p></blockquote><blockquote><p>而 Go 的前端框架叫：Vugo 。它是一个 Go 语言开发库，可以很容易地使用 Go 语言编写 Web 用户界面.</p></blockquote><blockquote><p>文章来源 :<a href="https://mp.weixin.qq.com/s/Z9fbVFMTVDA-VPMG2ND5cg" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/Z9fbVFMTVDA-VPMG2ND5cg</a></p></blockquote><h4 id="登月源码登顶Github-Top1"><a href="#登月源码登顶Github-Top1" class="headerlink" title="登月源码登顶Github Top1"></a>登月源码登顶Github Top1</h4><blockquote><p>就像前几天一个外国程序员小哥吐槽和抱怨Github上发现页，排行榜中文项目太多一样。美国人登月代码开源，也惨遭中文灌水。评论内容清一色的类娱乐网站评论、还有打广告者。</p></blockquote><h4 id="iconfont在小程序中的使用"><a href="#iconfont在小程序中的使用" class="headerlink" title="iconfont在小程序中的使用"></a>iconfont在小程序中的使用</h4><blockquote><p>本周博文输出：简单总结了一下—-<a href="https://www.liugezhou.online/2019/07/17/icofont/" target="_blank" rel="noopener">iconfont在小程序中的使用</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 每周分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 每周分享 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iconfont在小程序端的使用</title>
      <link href="/2019/07/17/iconfont%E5%9C%A8%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%AB%AF%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>/2019/07/17/iconfont%E5%9C%A8%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%AB%AF%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><blockquote><p>最近自己在写一个小程序，在使用iconfont的时候，出了一点小问题，解决的过程是简单、高效的。<br>想到之前就使用过iconfont，不过当时只是一笔带过。而今考虑到在项目中小icon的使用广泛，有必要简单总结一下使用iconfont方面的。<br>这篇博文不属于技术范畴，只能说是一个小小的技能吧–在个人开发中可以起到一个很好的技能拓展。</p></blockquote><a id="more"></a><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><blockquote><p>我们在开发过程中会用到很多的小图标，作为一个不会PS的前端，或者没有美工经验的前端，<code>iconfont-阿里巴巴矢量图标库</code>里面有很多的小图标可供我们选择使用。</p></blockquote><h3 id="范围"><a href="#范围" class="headerlink" title="范围"></a>范围</h3><blockquote><p><code>iconfont-阿里巴巴矢量图标库</code>地址：<a href="https://www.iconfont.cn/" target="_blank" rel="noopener">https://www.iconfont.cn/</a><br>可供web端、Android、iOS端使用。<br>官方文档的使用说明很明确：<a href="https://www.iconfont.cn/help/detail?spm=a313x.7781069.1998910419.d8d11a391&amp;helptype=code" target="_blank" rel="noopener">https://www.iconfont.cn/help/detail?spm=a313x.7781069.1998910419.d8d11a391&amp;helptype=code</a><br>本文章只讨论小程序端关于Unicode的使用</p></blockquote><h3 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h3><blockquote><p>这里记录两种使用方法，可直接看最后的在线链接使用，两步搞定。</p></blockquote><h3 id="本地使用"><a href="#本地使用" class="headerlink" title="本地使用"></a>本地使用</h3><h5 id="步骤一"><a href="#步骤一" class="headerlink" title="步骤一"></a>步骤一</h5><blockquote><ul><li>将选好的小图标进行代码下载（此下载文件为1️⃣）</li><li>打开这个平台<a href="transfonter.org">transfonter.org/</a></li><li>点击Add fonts按钮,加载ttf格式的那个文件</li><li>将下边的base64 encode改为on</li><li>点击Convert按钮 进行转换</li><li>转换后点击download下载，（此文件为2️⃣）</li></ul></blockquote><h5 id="步骤二"><a href="#步骤二" class="headerlink" title="步骤二"></a>步骤二</h5><blockquote><ul><li>在小程序本地新建 icon.wxss文件，并在app.wxss引入</li><li>下载下来的文件（文件2️⃣）中有个 stylesheet.css文件，将其中代码copy至icon.wxss（注意这一步也可以直接在你新建的项目中找到在线连接、直接复制copy到stylesheet中也可以）</li><li>将下载的文件1️⃣中除了@font-face中的其它部分，copy至icon.wxss便可使用</li><li>在wxml中：<code>&lt;text class=&quot;iconfont icon-time&quot; style=&quot;font-size:30rpx;color:black&quot;&gt;&lt;/text&gt;</code></li></ul></blockquote><h3 id="在线链接使用"><a href="#在线链接使用" class="headerlink" title="在线链接使用"></a>在线链接使用</h3><blockquote><ul><li>将选好的小图标进行代码下载</li><li>下载好的文件中<code>iconfont.css</code>种所有代码copy至iconfont.wxss</li><li>在网站你的项目中找到在线链接，copy该<code>@font-face</code>替换<code>iconfont.css</code>中的<code>@font-face</code></li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> web前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iconfont </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>每周分享第四期</title>
      <link href="/2019/07/14/issue-4/"/>
      <url>/2019/07/14/issue-4/</url>
      
        <content type="html"><![CDATA[<h5 id="这里记录过去一周，我的关注以及值得记录的资讯。"><a href="#这里记录过去一周，我的关注以及值得记录的资讯。" class="headerlink" title="这里记录过去一周，我的关注以及值得记录的资讯。"></a>这里记录过去一周，我的关注以及值得记录的资讯。</h5><p> <img src="http://img.liugezhou.online/qiuguanzhu.jpg" alt="求关注"></p><h2 id="资讯"><a href="#资讯" class="headerlink" title="资讯"></a>资讯</h2><h5 id="ETC指标"><a href="#ETC指标" class="headerlink" title="ETC指标"></a>ETC指标</h5><blockquote><p>国家出面推广ETC，近日发现朋友圈有关ETC的推广很多。</p><p>据说今年关于ECT指标已经下达，2019年新增ETC开户量，要达到一亿户（新增），截至今年3月份，我国ETC用户的总量才8072万。<br>过去6年，全国所有银行才开了7656万户ETC，今年一年就要开一亿户，银行指标亚历山大啊。</p></blockquote><a id="more"></a><blockquote><p>文章来源：<a href="https://mp.weixin.qq.com/s/__Cdn17lSOIqO30rciYuOg" target="_blank" rel="noopener">帮帮银行吧，ETC滞销了</a></p><p><img src="http://img.liugezhou.online/ETC190713.jpg" alt="ETC190713"></p></blockquote><h5 id="垃圾桶卖“疯”！有人一天接单2000万"><a href="#垃圾桶卖“疯”！有人一天接单2000万" class="headerlink" title="垃圾桶卖“疯”！有人一天接单2000万"></a><a href="https://mp.weixin.qq.com/s/nDXSsBx4p4LDCf721gu3pQ" target="_blank" rel="noopener">垃圾桶卖“疯”！有人一天接单2000万</a></h5><blockquote><p>垃圾分类搞得红红火火，垃圾桶卖到脱销。相信很快就有一些有关垃圾的衍生品开始受到市场青睐。</p><p>当然，无可否认，对于很多人来说，这是一个巨大的商机。新产品前面几个月的利润高，但很快会被模仿，价格就跌了。</p><p>根据住建部要求，接下来一年多时间内，还有46个重点城市也要步入垃圾分类“最严时代”，预计未来五年内，全国的市场都会释放巨大的需求。<br><img src="http://img.liugezhou.online/garbage190713.png" alt="garbage190713"></p></blockquote><h5 id="研究称多达1325个安卓应用未经许可收集用户数据"><a href="#研究称多达1325个安卓应用未经许可收集用户数据" class="headerlink" title="研究称多达1325个安卓应用未经许可收集用户数据"></a>研究称多达1325个安卓应用未经许可收集用户数据</h5><blockquote><p>国际计算机科学研究所（ICSI）的研究人员发现，即使是在用户明确拒绝授权之后，仍有多达1325个安卓应用能绕过限制，从用户设备上收集精确的地理位置数据和手机序列号等信息。  </p><p>ICSI可用安全和隐私研究主任塞尔日·埃格尔曼表示，研究人员已在去年9月就这些问题向谷歌和美国联邦贸易委员会发出了通知。谷歌回应称，该公司将设法解决Android Q中的问题，这个操作系统预计将于今年发布。</p></blockquote><blockquote><p><a href="https://mp.weixin.qq.com/s/AZ92Q8JVu-hRomIjIav94Q" target="_blank" rel="noopener">文章来源</a></p></blockquote><h5 id="鸿蒙系统未确认把鸿蒙发展为手机系统"><a href="#鸿蒙系统未确认把鸿蒙发展为手机系统" class="headerlink" title="鸿蒙系统未确认把鸿蒙发展为手机系统"></a>鸿蒙系统未确认把鸿蒙发展为手机系统</h5><blockquote><p>7月12日，据报道，华为在《2018年可持续发展报告》的发布会上指出，鸿蒙系统是为物联网开发的，用于自动驾驶、远程医疗等低时延场景。华为手机还是把开放的安卓系统和生态作为首选，如果美国不允许华为使用安卓，华为还没有确定是否会把鸿蒙发展为手机系统。</p><p><img src="http://img.liugezhou.online/HWHongmeng.jpg" alt="HWHongmeng0713"></p></blockquote><h5 id="啤酒肚与喝啤酒并没有直接的关系"><a href="#啤酒肚与喝啤酒并没有直接的关系" class="headerlink" title="啤酒肚与喝啤酒并没有直接的关系"></a>啤酒肚与喝啤酒并没有直接的关系</h5><blockquote><p>由于啤酒的种类不同，含热量多少存在差异，一瓶600ml的啤酒热量为160大卡左右，相当于一碗米饭的热量.</p><p>啤酒的热量并不高，而且啤酒中不含有使人体发胖的高脂肪，所以喝啤酒本身是不会使人发胖的。</p><p>目前国际上普遍认为“啤酒肚”的成因是现代人深睡眠阶段减少，导致荷尔蒙的分泌减少，荷尔蒙的缺乏使体内脂肪增加并聚集于腹部。此外，长时间坐着办公、缺乏运动，容易造成腹部脂肪的囤积。</p></blockquote><h2 id="扩散"><a href="#扩散" class="headerlink" title="扩散"></a>扩散</h2><h5 id="团圆系统"><a href="#团圆系统" class="headerlink" title="团圆系统"></a>团圆系统</h5><blockquote><p>公安部儿童失踪信息紧急发布平台（“团圆”系统）是为建立儿童失踪信息发布的权威渠道，发动群众搜集拐卖犯罪线索，公安部刑事侦查局打拐办在阿里巴巴集团的技术支持下开发，用于全国各地一线打拐民警即时上报各地儿童失踪信息。该平台于2016年5月15日正式上线.(来自百科)</p><p>这篇文章是关于团圆系统的介绍、扩展：<a href="https://mp.weixin.qq.com/s/kvUY27-0fdkGTFN1j4FSIw" target="_blank" rel="noopener">失踪儿童找回率98%的公安部神器:每人手机都有,却很少有人知道它存在</a></p><p>网友普及：给刚出生的孩子办一个身份证，现在身份证都需要录指纹。只要办过身份证的孩子走失后，采集指纹可以秒找到孩子的信息。我同学在某派出所当户籍警，让我替她宣传一下。小朋友随时都可以去办身份证哟，没有年龄限制的。</p><p><img src="http://img.liugezhou.online/tuanyuan090713.jpg" alt="团圆系统0713"></p></blockquote><h2 id="鸡汤"><a href="#鸡汤" class="headerlink" title="鸡汤"></a>鸡汤</h2><blockquote><p>如果你觉得自己已经很努力，可还是很辛苦，那么让自己放松一点，放过自己，不是你的态度出了问题，而是你的战略。</p></blockquote><blockquote><p>有两种人需要你主动去接触，一个是比你优秀的人，一个是正能量的人.</p></blockquote><blockquote><p>世界上本就没有标准答案，如果有，那就是以你想要的方式度过一生.</p></blockquote><blockquote><p>两个人如果想长远的相互陪伴着走下去，只依靠喜欢是不够的，爱的真谛其实是学会温柔的包容和相互的体谅。</p></blockquote><blockquote><p>知道很多大道理，却做不到。不是因为你知道得太多，而是因为你知道的不够多.</p></blockquote><blockquote><p>活在未来，而不是当下.<br>1.你对未来有个预测；<br>2.那个预测需要时间才能得到结果；<br>3你笃信你的预测是正确的；<br>4.于是你提前按照那个预测的结果行动，选择，思考；<br>5.你终将走到那个结果出现的时刻；<br>6.最终你的预测是正确的；<br>7.那么，由于你提前按未来正确的结果行动、选择、思考，于是，在相当长一段时间里，你的生活中的一部分，就是“活在未来”的。（来自新东方某老师）</p></blockquote><h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h2><h5 id="AMP-工具"><a href="#AMP-工具" class="headerlink" title="AMP 工具"></a>AMP 工具</h5><blockquote><p>AMP是加速移动页面（Accelerated Mobile Pages）的简称，Google对其的描述为：</p></blockquote><blockquote><p>AMP是一个Web组件框架，你可以利用它轻松创建用户至上的网站、故事、电子邮件和广告。<br>前不久，谷歌因强制开发者使用自有开发工具而遭到了众多开发者的抨击，<a href="https://mp.weixin.qq.com/s/zn88mFg8P1wiPFPoPQTsBA" target="_blank" rel="noopener">文章来源</a></p></blockquote><h5 id="robots-txt文件"><a href="#robots-txt文件" class="headerlink" title="robots.txt文件"></a>robots.txt文件</h5><blockquote><p>robots.txt文件应该放在网站根目录下，有些网站，有一些页面是站长不想被任何搜索引擎收录的，所以才有了这个robots文件。<br>搜索引擎通过一种程序“蜘蛛”（又称spider），自动访问互联网上的网页并获取网页信息。您可以在您的网站中创建一个纯文本文件robots.txt，在这个文件中声明该网站中不想被蜘蛛访问的部分，这样，该网站的部分或全部内容就可以不被搜索引擎访问和收录了，或者可以通过robots.txt指定使搜索引擎只收录指定的内容。搜索引擎爬行网站第一个访问的文件就是robots.txt。</p></blockquote><h5 id="Vue-js-第三方常用插件"><a href="#Vue-js-第三方常用插件" class="headerlink" title="Vue.js 第三方常用插件"></a>Vue.js 第三方常用插件</h5><blockquote><p>这篇文章介绍几个Vue.js常用的插件和用法，简单且实用，可以直接拿来直接用！ </p><p><a href="https://mp.weixin.qq.com/s/47F9VnexISswo2Ne9cc_5g" target="_blank" rel="noopener">Vue.js 第三方常用插件盘点</a></p></blockquote><h5 id="前端必会！四步带你吃透浏览器渲染基本原理"><a href="#前端必会！四步带你吃透浏览器渲染基本原理" class="headerlink" title="前端必会！四步带你吃透浏览器渲染基本原理"></a><a href="https://mp.weixin.qq.com/s/PNJ7xCTh15vtdFHWlDk5gw" target="_blank" rel="noopener">前端必会！四步带你吃透浏览器渲染基本原理</a></h5><blockquote><p>浏览器渲染基本原理是作为一个前端开发者必须要了解的知识点。</p></blockquote><h5 id="五个-JavaScript-小技巧"><a href="#五个-JavaScript-小技巧" class="headerlink" title="五个 JavaScript 小技巧"></a><a href="https://www.johnstewart.dev/five-programming-patterns-i-like/" target="_blank" rel="noopener">五个 JavaScript 小技巧</a></h5><blockquote><p>作者总结了五个 JavaScript 代码写法的技巧。</p></blockquote><h5 id="开源许可证"><a href="#开源许可证" class="headerlink" title="开源许可证"></a>开源许可证</h5><blockquote><p> Github上新建项目的时候，会让添加开源许可证，一搬情况下我们自己建项目的时候：<code>Add a licence:None</code>,即：不添加许可证。<br>刚开始的时候我们都不会在意这个许可证到底是什么，但是随着项目专业、职业化，我们一定要对开源许可证有个清楚的了解。</p><p>我小小的总结了一篇博文，简单了解了一下。<a href="https://www.liugezhou.online/2019/07/11/Open%20Source%20License/" target="_blank" rel="noopener">开源许可证介绍</a></p><p><img src="http://img.liugezhou.online/licence.jpg" alt="开源许可证"></p></blockquote><h5 id="最近搭建博客遇到的问题"><a href="#最近搭建博客遇到的问题" class="headerlink" title="最近搭建博客遇到的问题"></a>最近搭建博客遇到的问题</h5><blockquote><p>在家重新搭建博客时候又遇到了一些问题，写了篇文章简单记录了一下：<br><a href="https://www.liugezhou.online/2019/07/11/%E6%88%91%E7%9A%84%E5%8D%9A%E5%AE%A2%E5%9B%BE%E7%89%87%E6%9D%A5%E8%87%AA%E4%B8%83%E7%89%9B%E4%BA%91%E5%AD%98%E5%82%A8/" target="_blank" rel="noopener">最近搭建博客遇到的一系列问题</a></p></blockquote><h2 id="收藏"><a href="#收藏" class="headerlink" title="收藏"></a>收藏</h2><h5 id="Table-Convert-Online"><a href="#Table-Convert-Online" class="headerlink" title="Table Convert Online"></a>Table Convert Online</h5><blockquote><p>一个网页工具，可以在线表格转成 Markdown、JSON、HTML、XML、YAML 等数据格式，并支持格式之间互相转化。(@Fechin 投稿)</p><p>网站地址：<a href="https://tableconvert.com/" target="_blank" rel="noopener">https://tableconvert.com/</a></p></blockquote><h5 id="APIJSON"><a href="#APIJSON" class="headerlink" title="APIJSON"></a>APIJSON</h5><blockquote><p>自动化接口管理工具，后端自动生成接口文档，前端可以定制任何数据、任何结构.<br>Github项目地址：<a href="https://github.com/APIJSON/APIJSON" target="_blank" rel="noopener">https://github.com/APIJSON/APIJSON</a></p></blockquote><h5 id="算法可视化"><a href="#算法可视化" class="headerlink" title="算法可视化"></a>算法可视化</h5><blockquote><p>该网站收集了50多种算法，每种算法都有可视化动画和示例代码。<br>网站地址：<a href="https://algorithm-visualizer.org/branch-and-bound/binary-search" target="_blank" rel="noopener">https://algorithm-visualizer.org/branch-and-bound/binary-search</a></p></blockquote><h5 id="世界有多大，取决于你认识和见过多少人和事。"><a href="#世界有多大，取决于你认识和见过多少人和事。" class="headerlink" title="世界有多大，取决于你认识和见过多少人和事。"></a>世界有多大，取决于你认识和见过多少人和事。</h5><p><img src="http://img.liugezhou.online/weChatPublicSearch.png" alt="六个周"></p>]]></content>
      
      
      <categories>
          
          <category> 每周分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 每周分享 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>开源许可证介绍</title>
      <link href="/2019/07/11/%E5%BC%80%E6%BA%90%E8%AE%B8%E5%8F%AF%E8%AF%81%E4%BB%8B%E7%BB%8D/"/>
      <url>/2019/07/11/%E5%BC%80%E6%BA%90%E8%AE%B8%E5%8F%AF%E8%AF%81%E4%BB%8B%E7%BB%8D/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Github上新建项目的时候，会让添加开源许可证，一搬情况下我们自己建项目的时候：<code>Add a licence:None</code>,即：不添加许可证。<br>刚开始的时候我们都不会在意这个许可证到底是什么，但是随着项目专业、职业化，我们一定要d对开源许可证有个清楚的了解。<br>那么，现在就动脑、动手记录一下关于开源许可证的小介绍。</p></blockquote><a id="more"></a><h5 id="分析图"><a href="#分析图" class="headerlink" title="分析图"></a>分析图</h5><blockquote><p>乌克兰程序员Paul Bagwell，画了一张分析图，说明应该怎么选择。只用两分钟，你就能搞清楚这六种许可证之间的最大区别。<br>下面的图片是来自阮一峰博客制作的中文版，请点击看大图。</p></blockquote><blockquote><p><img src="http://img.liugezhou.online/licence.jpg" alt="Licence"></p><p>这里介绍的是最流行的五种开源许可证：  MIT BSD  Apache GPL  LGPL </p></blockquote><h5 id="MIT"><a href="#MIT" class="headerlink" title="MIT"></a>MIT</h5><blockquote><p>非常宽松的许可证，就是说你什么都可以干，但是开发方不负责质量，相当于免责声明。<br>MIT内容与三条款BSD许可证（3-clause BSD license）内容颇为近似，但是赋予软件被授权人更大的权利与更少的限制。<br>应用该许可证的项目：jQuery Rails Express Lua等</p></blockquote><h5 id="BSD"><a href="#BSD" class="headerlink" title="BSD"></a>BSD</h5><blockquote><p>也是宽松的协议，但比起MIT，BSD不允许软件的衍生版用原作者名字促销，BSD依然是一个免责声明，与MIT相比差异很少。<br>Javascript常用BSD许可协议。因为javascript库很多，替代品也多。作者要做的仅仅是免责而已。</p></blockquote><h5 id="Apache"><a href="#Apache" class="headerlink" title="Apache"></a>Apache</h5><blockquote><p>Apache的许可很长，比BSD和MIT要严格不少,需要保留全部的原始版权，如果修改，则需要加上主要的修改通知。</p></blockquote><h5 id="GPL"><a href="#GPL" class="headerlink" title="GPL"></a>GPL</h5><blockquote><p>GPL是常用许可协议中最严格的。<br>GPL最最重要的一条就是GPL的衍生品也必须是GPL协议，也就是说GPL协议发布的软件，其后继版本将都是GPL.<br>Linux就是GPL。</p></blockquote><h5 id="LGPL"><a href="#LGPL" class="headerlink" title="LGPL"></a>LGPL</h5><blockquote><p>GPL过于严格于是GUN发布了LGPL这个限制较少的许可证。<br>LGPL和GPL最大的不同是LGPL允许在私有软件上使用它，而GPL只允许在自由软件上使用。<br>如果你使用一个LGPL下的库，你需要遵循LGOL，如果仅仅是连接这个库，则不需要遵循LGPL。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 编程概念类 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Licence </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>最近搭建博客遇到的一系列问题</title>
      <link href="/2019/07/11/%E6%9C%80%E8%BF%91%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E9%81%87%E5%88%B0%E7%9A%84%E4%B8%80%E7%B3%BB%E5%88%97%E9%97%AE%E9%A2%98/"/>
      <url>/2019/07/11/%E6%9C%80%E8%BF%91%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E9%81%87%E5%88%B0%E7%9A%84%E4%B8%80%E7%B3%BB%E5%88%97%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<blockquote><p>最近在重新搭博客的时候，发生了一系列问题，今天抓紧记录下。</p></blockquote><h6 id="环境介绍"><a href="#环境介绍" class="headerlink" title="环境介绍"></a>环境介绍</h6><blockquote><p>首先介绍一下我的博客部署：</p><p>我的博客是通过hexo搭建、上传至Github上，之前的博客访问便都是：<a href="https://liugezhou.github.io" target="_blank" rel="noopener">https://liugezhou.github.io</a></p><p>但是最新搭建的这个博客，我想给自己已有的域名进行绑定：<a href="http://www.liugezhou.online" target="_blank" rel="noopener">www.liugezhou.online</a>.</p></blockquote><a id="more"></a><blockquote><p>于是，查找了一些资料，知道需要将我的域名进行解析， 需要添加 CNAME 记录。</p><p>在域名解析的时候，发现其实没服务器什么事，直接在解析设置上添加两条记录（并暂停其它的一些配置）：</p></blockquote><table><thead><tr><th align="left">记录类型</th><th align="left">主机记录</th><th align="left">解析线路</th><th align="left">记录值</th></tr></thead><tbody><tr><td align="left">A</td><td align="left">@</td><td align="left">默认</td><td align="left">192.30.252.153</td></tr><tr><td align="left">CNAME</td><td align="left">www</td><td align="left">默认</td><td align="left">liugezhou.github.io</td></tr></tbody></table><blockquote><p>我也记不清为什么是这么配置了，总之这个时候我的个人域名便可以直接访问我的博客内容了。</p></blockquote><h6 id="问题出现"><a href="#问题出现" class="headerlink" title="问题出现"></a>问题出现</h6><blockquote><p>在写博客的时候，避免不了要使用图片，于是我专门在Github上建了个仓库放图片，这样我每次需要插入图片的时候，直接使用Markdown语法引入图片便好了。<br>用这样的方法，<code>在github网站上访问项目博客文件</code>的时候，看md文件的确是可以访问到图片的。</p><p>但是用HEXO搭建的博客网站，其中图片便死活不出来，就这样写了两篇文章后，感觉是真难受。</p><p>一篇文章怎么可以没有图片呢？<br>怎么可以没有自己上传的图片呢？<br>怎么可以总是引用别人的图片地址呢？</p></blockquote><h6 id="解决图片存储问题"><a href="#解决图片存储问题" class="headerlink" title="解决图片存储问题"></a>解决图片存储问题</h6><blockquote><p>七牛云有个免费存储图片的功能–使我可以便于链接访问。</p></blockquote><blockquote><p>这里记录的我使用到它所做的简单步骤。</p></blockquote><blockquote><p>1️⃣  不管你用什么方法首先登录七牛云网站，不管你用什么方法首先有个自己的域名。</p></blockquote><blockquote><p>2️⃣  进入首页–查找产品–对象存储–立即使用–新建存储空间</p></blockquote><blockquote><p>3️⃣  绑定域名[融合 CDN 加速域名] （重点⭐⭐⭐）<br>这里又需要在域名控制台配置一下CNAME，但是我之前已经将Github与liugehzou.online的域名使用了一次CANME,于是犯了嘀咕。。  </p><p>继续，查阅<a href="https://developer.qiniu.com/fusion/kb/1322/how-to-configure-cname-domain-name" target="_blank" rel="noopener">官方资料</a>、等资料，经过多次尝试：</p></blockquote><blockquote><p>绑定域名选择【普通域名】、加速域名设置为：【img.liugezhou.online】,然后到这里在七牛云上的配置便结束！</p></blockquote><blockquote><p>接着进入域名管理平台，进行域名解析：<br>同上，只需要添加一条记录即可：</p></blockquote><table><thead><tr><th align="left">记录类型</th><th align="left">主机记录</th><th align="left">解析线路</th><th align="left">记录值</th></tr></thead><tbody><tr><td align="left">CNAME</td><td align="left">img</td><td align="left">默认</td><td align="left">img.liugezhou.online.qiniudns.com</td></tr></tbody></table><blockquote><p>这时候回到七牛云平台，点击内容管理，直接上传照片，然后查看地址便可以访问了。<br>这期间还有一个加水印的功能，我试了一下没加上，这个应该是后台上传图片的时候才有效，也罢，到此最起码解决了图片的上传问题。</p></blockquote><h6 id="博客遗留问题"><a href="#博客遗留问题" class="headerlink" title="博客遗留问题"></a>博客遗留问题</h6><blockquote><p>之前我的博客在另一台电脑上进行的部署，后来我换电脑后，出了一些状况。<br>就是：换了台电脑我不能很好的部署上传了，原因为文章的发布时间都错乱了，这也是导致我重新部署博客的原因。</p></blockquote><blockquote><p>但是，如果我再换电脑是不是意味着我还有继续重新部署，博客文章归为0呢？<br>当然不是，查阅了一些资料后，我知道情况是这样的：</p></blockquote><blockquote><p>首先HEXO博客搭建上传至Github使用的命令是hexo clean &amp;&amp; hexo g &amp;&amp; hexo d,这时候上传到Github上的只是由HEXO生成的静态文件，而本地的关于hexo的文件其实还是在本地的，这个时候就需要在liugezhou.github.io的项目上，再建一个分支，将本地的HEXO项目上传至另一个分支，每次提交代码的时候hexo d部署到主分支，本地的文件提交到新建的分支，这样在其它电脑上再写博客的时候，只需要将新建的那个分支上的代码下载到本地即可。（这里说的比较混乱，因为这里我现在还没有新建分支提代码，这里只是记录一下思路，待有兴趣或者迫不得已的时候再去实践） </p></blockquote><blockquote><p>行吧，大概就是这个样子。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> HEXO博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>每周分享第三期</title>
      <link href="/2019/07/07/issue-3/"/>
      <url>/2019/07/07/issue-3/</url>
      
        <content type="html"><![CDATA[<blockquote><p>这里记录过去一周，我的关注以及值得记录的资讯。</p></blockquote><a id="more"></a><h2 id="News"><a href="#News" class="headerlink" title="News"></a>News</h2><h4 id="电竞"><a href="#电竞" class="headerlink" title="电竞"></a>电竞</h4><blockquote><p>人社部报告，未来5年中国电竞需求接近200万人，目前从业人员超过50万，大部分处于16-22岁，86%从业者薪资是当地平均工资的1-3倍。中传、南广、川传等数十家高校和高职、中职院校，已经设立了电竞专业.</p></blockquote><h4 id="垃圾分类"><a href="#垃圾分类" class="headerlink" title="垃圾分类"></a>垃圾分类</h4><blockquote><p>手机淘宝的“扫一扫”新增垃圾分类功能，用户通过点击屏幕识别，便可通过AI智能识图功能，识别干垃圾、湿垃圾、可回收垃圾或有害垃圾等。对于AI难以识别的垃圾，用户可以手动输入垃圾信息，通过手淘搜索“你是什么垃圾”也可进入智能识别系统。</p></blockquote><h4 id="婴配乳粉追溯"><a href="#婴配乳粉追溯" class="headerlink" title="婴配乳粉追溯"></a>婴配乳粉追溯</h4><blockquote><p>首个奶粉溯源微信小程序【婴配乳粉追溯】上线，目前已累计7.1亿条产品信息加入“信息库”，通过“婴配乳粉追溯”小程序的扫码追溯功能，可追溯产品、消费、企业等关键信息，消费者通过这款小程序扫描商品标签上的二维码，就能辨识真假，查询到生产日期、批次、厂家和检测结果等信息。</p></blockquote><h4 id="自动驾驶测试牌照"><a href="#自动驾驶测试牌照" class="headerlink" title="自动驾驶测试牌照"></a>自动驾驶测试牌照</h4><blockquote><p>7月1日，北京市自动驾驶测试管理联席小组发布首批T4级别自动驾驶测试牌照，总计5张，全部由百度获得，成为中国第一家、也是唯一获得此级别牌照的企业。</p></blockquote><blockquote><p>另：北京警方通报，男子程某某向李彦宏洒水滋事，扰乱百度公司活动，被处行政拘留5日。</p></blockquote><h4 id="第五套人民币"><a href="#第五套人民币" class="headerlink" title="第五套人民币"></a><a href="https://mp.weixin.qq.com/s/mq0fPVwPQXVWXcTjXzxfOQ" target="_blank" rel="noopener">第五套人民币</a></h4><blockquote><p>中国人民银行将于8月30日发行2019年版第五套人民币。新版人民币包含50元、20元、10元、1元纸币和1元、5角、1角硬币。</p></blockquote><h4 id="iOS开发者起诉苹果：每年收99美元还抽成30"><a href="#iOS开发者起诉苹果：每年收99美元还抽成30" class="headerlink" title="iOS开发者起诉苹果：每年收99美元还抽成30%"></a>iOS开发者起诉苹果：每年收99美元还抽成30%</h4><blockquote><p>美国当地时间上周周五，iOS开发者向苹果发起集体诉讼，开发者认为苹果滥用垄断权，强制设定最低价，要求App开发者每年支付99美元费用，必须将30%的销售收入交给苹果。开发者向北加州地区法院提交诉状，他们认为苹果利用反竞争手段在iOS App市场形成垄断，苹果禁止第三方分销数字内容，在定价时向开发者提出强制性要求，还向开发者“征税”。</p></blockquote><h4 id="APP下架"><a href="#APP下架" class="headerlink" title="APP下架"></a>APP下架</h4><blockquote><p>6月28日，网信办发布信息称，首批对<code>吱呀</code>、<code>Soul</code>、<code>语玩</code>、<code>一说FM</code>等26款传播历史虚无主义、淫秽色情内容的违法违规音频平台，分别采取了约谈、下架、关停服务等阶梯处罚，对音频行业进行全面集中整治。<br><code>网易云音乐</code>、<code>喜马拉雅</code>、<code>荔枝FM</code>、<code>企鹅FM</code>四家音乐APP现已下架。</p></blockquote><h4 id="ETC服务小程序"><a href="#ETC服务小程序" class="headerlink" title="ETC服务小程序"></a>ETC服务小程序</h4><blockquote><p>支付宝可免费办理ETC:设备包邮，全国通用（网友：看成免费领BTC）【快科技】。<br>与支付宝开抢：微信小程序亦可免费申办ETC服务。 </p></blockquote><h4 id="360小程序"><a href="#360小程序" class="headerlink" title="360小程序"></a><a href="https://mp.weixin.qq.com/s/uDzWwPD2hefZKF367zvO2Q" target="_blank" rel="noopener">360小程序</a></h4><blockquote><p>2017 年 1 月 9 日，微信小程序横空出世。随后，支付宝小程序、百度智能小程序、今日头条小程序、淘宝小程序、QQ小程序、12 大厂商联盟的快应用等纷纷入局小程序。自此，我们从移动互联网时代进入到小程序时代，形成“超级App+小程序”的生态格局。</p></blockquote><blockquote><p>360 正进行这创新的尝试：在大家的注意力放在移动互联网、小程序生态之际，360 小程序另辟蹊径，从 PC 端杀入小程序。<br>360 小程序预计今年 9 月份将对外发布，而360小程序基础服务和组件已在开发。</p></blockquote><h4 id="知识产权-著作权"><a href="#知识产权-著作权" class="headerlink" title="知识产权-著作权"></a><a href="https://tech.qq.com/a/20190704/002561.htm" target="_blank" rel="noopener">知识产权-著作权</a></h4><blockquote><p>知乎文字回答被改编成短视频，法院判侵权拍摄方赔偿6万。</p></blockquote><h4 id="Hong港"><a href="#Hong港" class="headerlink" title="Hong港"></a>Hong港</h4><blockquote><p>Hong港回归22周年。</p></blockquote><h2 id="产品"><a href="#产品" class="headerlink" title="产品"></a>产品</h2><blockquote><p><code>知识星球</code> : 原名小密圈，是一个知识社群的APP平台，是内容创作者连接铁杆粉丝，做出品质社群，实现知识变现的工具。有人戏称为“智商税”。<br>我体验了一下，并建了个我自己的知识星球 ：[六个周]。</p></blockquote><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><h4 id="军营开放日"><a href="#军营开放日" class="headerlink" title="军营开放日"></a>军营开放日</h4><blockquote><p>军营开放日是各国军方为了向民众展示军事装备和提高民众的国家认同感而设立的军事参观活动。中国/驻/港/澳/军/队每年都会举行军营开放日活动。<br>设立军营开放日的目的，是为了向公众展示人民军队的精神风貌、对国防教育现身说法，强调的是“传播和沟通”；军营开放日的设立，还有助于督促军队作风建设，一旦有了法定的军营开放日，担负有对公众开放使命的军营必然会精心组织精心训练，以期把强大威武的形象展现给公众。</p></blockquote><h4 id="马太效应"><a href="#马太效应" class="headerlink" title="马太效应"></a>马太效应</h4><blockquote><p>马太效应（Matthew Effect），指强者愈强、弱者愈弱的现象，广泛应用于社会心理学、教育、金融以及科学领域。马太效应，是社会学家和经济学家们常用的术语，反映的社会现象是两极分化，富的更富，穷的更穷 。<br>马太效应，名字来自圣经《新约·马太福音》一则寓言： “凡有的，还要加倍给他叫他多余；没有的，连他所有的也要夺过来”。表面看起来“马太效应”与“平衡之道”相悖，与“二八定则”类似，但是实则它只不过是“平衡之道”的一极。</p></blockquote><blockquote></blockquote><h3 id="推荐"><a href="#推荐" class="headerlink" title="推荐"></a>推荐</h3><blockquote><p><a href="http://mindhacks.cn/2009/02/15/why-you-should-start-blogging-now/" target="_blank" rel="noopener">为什么你应该（从现在开始就）写博客</a></p></blockquote><blockquote><p><a href="https://mp.weixin.qq.com/s/ZrzR6on3rv8uzZQe6I5vcQ" target="_blank" rel="noopener">为什么说苹果是唯一在乎你隐私的科技公司？</a></p></blockquote><blockquote><p><a href="https://mp.weixin.qq.com/s/6KIzZVn4eCrENzuMApixhA" target="_blank" rel="noopener">前端开发 30 年变迁史</a></p></blockquote><blockquote><p>公众号 <a href="https://mp.weixin.qq.com/mp/profile_ext?action=home&__biz=MjM5ODk1MjgwMQ==&sessionid=1562381979&sharer_username=gh_2df3b33e3297&subscene=0&clicktime=1562382001#wechat_redirect" target="_blank" rel="noopener">极客随想</a></p></blockquote><blockquote><p><a href="https://www.huweihuang.com/" target="_blank" rel="noopener">胡伟煌博客</a></p></blockquote><h3 id="文字"><a href="#文字" class="headerlink" title="文字"></a>文字</h3><blockquote><p>“人要永远做小孩子虽办不到，但想要保持沉默是能办到的。”    – 沉默的大多数(王小波)</p></blockquote><blockquote><p>人活在世界上，需要这样的经历：做成了一件事，又做成一件事，逐渐地对自己要做的事有了把握。 –出自《皇帝做习题》</p></blockquote><blockquote><p>人人都渴望爱情，但只有有人关心的人才能够体会到什么叫做爱情。 –《王小波全集》第10卷</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 每周分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 每周分享 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>每周分享第二期</title>
      <link href="/2019/06/28/issue-2/"/>
      <url>/2019/06/28/issue-2/</url>
      
        <content type="html"><![CDATA[<blockquote><p>这里记录过去一周，我的收藏以及值得记录的资讯。</p></blockquote><h2 id="新闻"><a href="#新闻" class="headerlink" title="新闻"></a>新闻</h2><h4 id="街舞进入奥运会比赛项目"><a href="#街舞进入奥运会比赛项目" class="headerlink" title="街舞进入奥运会比赛项目"></a>街舞进入奥运会比赛项目</h4><blockquote><p>当地时间25日，瑞士洛桑第134届国际奥委会全会发布消息，攀岩、<code>街舞</code>、滑板和冲浪将成为2024年巴黎奥运会的正式比赛项目。</p></blockquote><a id="more"></a><h4 id="阻止谷歌推中国定制版搜索引擎的股东决议未通过"><a href="#阻止谷歌推中国定制版搜索引擎的股东决议未通过" class="headerlink" title="阻止谷歌推中国定制版搜索引擎的股东决议未通过"></a>阻止谷歌推中国定制版搜索引擎的股东决议未通过</h4><blockquote><p>一项旨在阻止谷歌推出中国定制版搜索引擎的股东决议已经以失败告终。</p></blockquote><blockquote><p>谷歌的一些股东提出了一个决议，要求该公司停止在中国推出争议性搜索引擎的努力。这个项目在谷歌内部代号为 “Dragonfly”，据说是一个易于审查的搜索引擎，能够根据政府的要求隐藏某些搜索结果。<a href="https://techcrunch.cn/2019/06/20/google-shareholder-dragonfly-china/" target="_blank" rel="noopener">来源</a></p></blockquote><h4 id="男子当街暴打女孩事出大连"><a href="#男子当街暴打女孩事出大连" class="headerlink" title="男子当街暴打女孩事出大连"></a>男子当街暴打女孩事出大连</h4><blockquote><p>事件回顾：6月24日，一段女子在街头遭男子凶残踢打的视频流传。监控显示：事发6月22日凌晨，从0点44分7秒开始，男子连续拳打女孩面部，脚踢头部，撕扯短裙。</p></blockquote><blockquote><p><a href="https://weibo.com/u/1010712057" target="_blank" rel="noopener">@绵阳网警巡查执法</a>爆出,人民日报等大V转载，全国发酵。</p></blockquote><blockquote><p><a href="https://weibo.com/dlpolice" target="_blank" rel="noopener">@大连公安</a>与6月25日 23:39发布微博公布事件，并与6月27日 01:01公布整个事件。</p></blockquote><blockquote><p>而对于我们大多数百姓来说，维权却依然很难，在国家健全法律制度的同时，我们要提高自己的法律意识，少刷微博、少刷抖音，多学习多研究，切实关注社会问题。</p></blockquote><h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h2><h4 id="PMP"><a href="#PMP" class="headerlink" title="PMP"></a>PMP</h4><blockquote><p>PMP(Project Management Profession)指的是项目管理专业人士资格认证它是由美国项目管理协会（Project Management Institute(PMI)发起的，严格评估项目管理人员知识技能是否具有高品质的资格认证考试。其目的是为了给项目管理人员提供统一的行业标准。<br>它包含五大过程组、十大知识领域、四十九个项目管理过程、一百三十二个工具与技术等。<br>PMP考试时间:一般为每年3月、6月、9月、12月,考试时间为4个小时 上午9：00-下午13：00。<br>PMP考试费：全国统一价，初考需要人民币3900元，重考需要人民币2500元。</p></blockquote><h4 id="小程序演变史–文章"><a href="#小程序演变史–文章" class="headerlink" title="小程序演变史–文章"></a><a href="https://mp.weixin.qq.com/s/Q3Dfrcf5FTmWUrsIkPWncA" target="_blank" rel="noopener">小程序演变史–文章</a></h4><blockquote><p>从这篇文章中，我们能够鲜活地看到小程序的技术演进历程，以及对于所有开发者来说，终将去往何处。<br><a href="https://mp.weixin.qq.com/s/Q3Dfrcf5FTmWUrsIkPWncA" target="_blank" rel="noopener">小程序演变史</a><br><img src="https://github.com/liugezhou/liugezhouImage/blob/master/Diary/2019/06/miniprogram0626.png" alt="miniprogram"></p></blockquote><h4 id="“吐个槽”反馈平台"><a href="#“吐个槽”反馈平台" class="headerlink" title="“吐个槽”反馈平台"></a><a href="https://support.qq.com/products/64844?" target="_blank" rel="noopener">“吐个槽”反馈平台</a></h4><blockquote><p><a href="https://baike.baidu.com/item/Tencent%20CDC" target="_blank" rel="noopener">腾讯CDC</a>推出的工具，几行代码就可以为页面加入一个互动社区，可以接入应用程序、小程序、WEB、H5、微信公众号等各端。该小产品内容包括：【我们的故事】、【常见问题】、【吐槽内容】等。<br>体验我的公众号吐槽：进入[六个周]公众号，点击菜单【页面展示】、点击吐个槽。</p></blockquote><h4 id="图片压缩–网站"><a href="#图片压缩–网站" class="headerlink" title="图片压缩–网站"></a><a href="https://www.iloveimg.com/zh-cn/compress-image/compress-jpg" target="_blank" rel="noopener">图片压缩–网站</a></h4><blockquote><p>有的时候你需要快速对一张图片进行压缩，可以收藏此网站，方便下回使用，降低搜索成本。<br>网址：<a href="https://www.iloveimg.com/zh-cn/compress-image/compress-jpg" target="_blank" rel="noopener">https://www.iloveimg.com/zh-cn/compress-image/compress-jpg</a></p></blockquote><h4 id="小程序云开发"><a href="#小程序云开发" class="headerlink" title="小程序云开发"></a><a href="https://developers.weixin.qq.com/miniprogram/dev/wxcloud/basis/getting-started.html" target="_blank" rel="noopener">小程序云开发</a></h4><blockquote><p>开发者可以使用云开发开发微信小程序、小游戏，无需搭建服务器，即可使用云端能力。</p></blockquote><blockquote><p>云开发为开发者提供完整的原生云端支持和微信服务支持，弱化后端和运维概念，无需搭建服务器，使用平台提供的 API 进行核心业务开发，即可实现快速上线和迭代，同时这一能力，同开发者已经使用的云服务相互兼容，并不互斥。</p></blockquote><h2 id="读书"><a href="#读书" class="headerlink" title="读书"></a>读书</h2><h4 id="《光荣日》"><a href="#《光荣日》" class="headerlink" title="《光荣日》"></a>《光荣日》</h4><blockquote><p>韩寒的一本小说，高中的时候读过，在自习课上读到肚子疼，但是现在读来依然觉得搞笑、讽刺。</p></blockquote><blockquote><p>如果你没读过，相信我,读过之后你一定会开怀大笑、浮想联翩。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 每周分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 每周分享 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>每周分享第一期</title>
      <link href="/2019/06/23/issue-1/"/>
      <url>/2019/06/23/issue-1/</url>
      
        <content type="html"><![CDATA[<blockquote><p>受阮老师的公号、博客影响，也同样受很多优秀的人儿们在Github上的技术文章周刊、读书分享等，我也觉得应该有自己的一个节奏，把自己的所学、所看、所得进行记录，虽然现在“望尘莫及”，但愿可以“望其项背”。</p></blockquote><a id="more"></a><blockquote><p>这里记录过去一周，我认为值得传播和学习的内容。</p></blockquote><h4 id="DogeDoge"><a href="#DogeDoge" class="headerlink" title="DogeDoge"></a>DogeDoge</h4><blockquote><p>多吉搜索是一个新的国产搜索引擎，据传说目标是要成为百度的替代方案之一。网址：<a href="www.dogedoge.com">www.dogedoge.com</a>.<br>亲测好用，不会搜出来一堆的广告，目前应该还处于一个起步开发阶段吧，暂时不支持[图片]、[视频]、[新闻]的搜索。<br>推荐大家使用doge搜索。</p></blockquote><h4 id="无版权插图的网站"><a href="#无版权插图的网站" class="headerlink" title="无版权插图的网站"></a>无版权插图的网站</h4><blockquote><p>一个收集无版权插图的网站，提供 SVG / PNG 格式下载，并且允许更改颜色，亲测好用。<a href="https://gallery.manypixels.co/category" target="_blank" rel="noopener">网站戳这里</a></p></blockquote><h4 id="Weekly"><a href="#Weekly" class="headerlink" title="Weekly"></a>Weekly</h4><blockquote><p>公众号<a href="https://mp.weixin.qq.com/mp/profile_ext?action=home&__biz=MzI4NjAxNjY4Nw==#wechat_redirect" target="_blank" rel="noopener">阮一峰的网络日志</a>.<br>这里记录作者每周值得分享的科技内容，每周五发布。文章涵盖【资讯】、【新闻】、【文章】、【工具】、【资源】、【文摘】、【图片】、【言论】等干货。</p></blockquote><blockquote><p>Github项目–<a href="https://github.com/zenany/weekly/tree/master/software" target="_blank" rel="noopener">weekly</a>,Web前端技术周刊，周刊从 09 年开始整理，期间中断过约半年。以前以 email 的形式分享给公司的 FE 同事，于 14 年开始存档于 github。</p></blockquote><h4 id="Nocode"><a href="#Nocode" class="headerlink" title="Nocode"></a>Nocode</h4><blockquote><p>一个一行代码也没有的项目，斩获近三万Star，用来搞笑的项目–<a href="https://github.com/kelseyhightower/nocode" target="_blank" rel="noopener">nocode</a>.</p></blockquote><h4 id="Gitter"><a href="#Gitter" class="headerlink" title="Gitter"></a>Gitter</h4><blockquote><p>微信小程序版Github，代码开源，该项目采用 Taro 框架 + Taro UI 进行开发。<br><a href="https://github.com/huangjianke/Gitter" target="_blank" rel="noopener">可能是目前颜值最高的GitHub微信小程序客户端–Gitter</a></p></blockquote><h4 id="Taro"><a href="#Taro" class="headerlink" title="Taro"></a>Taro</h4><blockquote><p>Taro 是一套遵循 React 语法规范的 多端开发 解决方案。现如今市面上端的形态多种多样，Web、React-Native、微信小程序等各种端大行其道，当业务要求同时在不同的端都要求有所表现的时候，针对不同的端去编写多套代码的成本显然非常高，这时候只编写一套代码就能够适配到多端的能力就显得极为需要。</p></blockquote><blockquote><p>使用 Taro，我们可以只书写一套代码，再通过 Taro 的编译工具，将源代码分别编译出可以在不同端（微信/百度/支付宝/字节跳动小程序、H5、React-Native 等）运行的代码。</p></blockquote><h4 id="freeCodeCamp"><a href="#freeCodeCamp" class="headerlink" title="freeCodeCamp"></a>freeCodeCamp</h4><blockquote><p>Github最多Star的项目。<br>官方网站：<a href="https://www.freecodecamp.org/" target="_blank" rel="noopener">freecodecamp</a>。<br><a href="https://learn.freecodecamp.one/" target="_blank" rel="noopener">中文网站</a>。<br><a href="https://www.freecodecamp.cn/challenges/build-a-tribute-page" target="_blank" rel="noopener">中文社区</a>.<br>freeCodeCamp.org is a tiny non-profit that’s helping millions of people learn to code for free.<br>[如果你是编程新手，我们推荐你 从头开始。]<br>[如果你是编程老手，我们推荐你 自由跳跃。]</p></blockquote><h4 id="lantern"><a href="#lantern" class="headerlink" title="lantern"></a>lantern</h4><blockquote><p>下载地址：<a href="https://github.com/getlantern/lantern" target="_blank" rel="noopener">戳这里</a></p></blockquote><h4 id="文章"><a href="#文章" class="headerlink" title="文章"></a>文章</h4><blockquote><p><a href="http://www.360doc.com/content/13/0512/16/3125585_284829243.shtml" target="_blank" rel="noopener">迄今为止看过最好的职业规划</a></p></blockquote><blockquote><p><a href="https://www.mtyyw.com/7013/" target="_blank" rel="noopener">寒门再难出贵子</a></p></blockquote><blockquote><p><a href="http://www.ruanyifeng.com/survivor/" target="_blank" rel="noopener">未来世界的幸存者-阮一峰著</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 每周分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 每周分享 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>小程序Request的封装</title>
      <link href="/2019/05/28/%E5%B0%8F%E7%A8%8B%E5%BA%8FRequest%E7%9A%84%E5%B0%81%E8%A3%85/"/>
      <url>/2019/05/28/%E5%B0%8F%E7%A8%8B%E5%BA%8FRequest%E7%9A%84%E5%B0%81%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<h6 id="最近做了两个小程序，业务相对比较简单，关于公益方面的，收获颇多，其中感觉在开发中明显提升开发效率以及减少代码量的就是request的封装，下面稍稍做个总结。"><a href="#最近做了两个小程序，业务相对比较简单，关于公益方面的，收获颇多，其中感觉在开发中明显提升开发效率以及减少代码量的就是request的封装，下面稍稍做个总结。" class="headerlink" title="最近做了两个小程序，业务相对比较简单，关于公益方面的，收获颇多，其中感觉在开发中明显提升开发效率以及减少代码量的就是request的封装，下面稍稍做个总结。"></a>最近做了两个小程序，业务相对比较简单，关于公益方面的，收获颇多，其中感觉在开发中明显提升开发效率以及减少代码量的就是request的封装，下面稍稍做个总结。</h6><h4 id="通用封装"><a href="#通用封装" class="headerlink" title="通用封装"></a>通用封装</h4><blockquote><p>在utils文件夹下新建两个文件，config.js以及request.js,代码分别如下。</p></blockquote><a id="more"></a><pre><code>//`config.js`---一些全局变量module.exports = {appid: &quot;wxcXXXXXXXXXXXXXX349f&quot;,API_BASE_URL: &apos;https://liugezhou.github.io/&apos;,//暂时测试环境地址、上线需要修改}`request`---request封装const CONFIG = require(&quot;./config.js&quot;)const request = (url,method,data) =&gt; {  let _url = CONFIG.API_BASE_URL+url  return new Promise((resolve ,reject)=&gt;{    wx.request({      url: _url,       method:method,      data:data,      header: {        &apos;content-type&apos;: &apos;application/json&apos; // 默认值      },      success(request) {        resolve(request.data)      },      fail(error) {        reject(error)      },      complete(aaa) {        // 加载完成      }    })  })}/** * 小程序的promise没有finally方法，自己扩展下 */Promise.prototype.finally = function (callback) {  var Promise = this.constructor;  return this.then(    function (value) {      Promise.resolve(callback()).then(        function () {          return value;        }      );    },    function (reason) {     Promise.resolve(callback()).then(        function () {          throw reason;        }      );    }  );}  //所有接口定义在这里module.exports = {  request,  //app.js登录  login:(data) =&gt; {    return request(&apos;WeChat/Login.aspx&apos;,&apos;POST&apos;,data)  },  //获取验证码  getMessageCode: (mobile) =&gt; {    return request(&apos;Donor/DonorPhoneCode.aspx?&apos;+mobile,&apos;POST&apos;)  },  ……}</code></pre><blockquote><p>通过上面两个小文件我们就将request封装完毕，在业务层调用代码的时候只需要：</p></blockquote><pre><code>const REQUEST = require(&apos;../../utils/request.js&apos;);…………………………………………var that =this    REQUEST.login({      tokenkey: res.code    }).then(function(res){         that.globalData.openId = res.data.tokenkey         that.globalData.isBind = res.code    }).catch(res =&gt; {//catch  fail在这里        console.log(&apos;fail:&apos;,res);       }).finally(()=&gt;{//finally在这里       console.log(&apos;finally:&apos;, &quot;结束&quot;);       })………………………………………</code></pre><h4 id="队列封装（不常用）"><a href="#队列封装（不常用）" class="headerlink" title="队列封装（不常用）"></a>队列封装（不常用）</h4><blockquote><p>一般情况下，上面的封装我们按着自己的需求稍微修改就应该可以方便使用。<br>接下来介绍的一种是接口队列化封装。因为在我们的开发需求中，每一次接口的请求需要上一个接口返回的两个数据，因此稍作整理如下：</p></blockquote><pre><code>//request.jsconst CONFIG = require(&quot;./config.js&quot;)let requestlist = [];let doing = false;const request = (link, data, back) =&gt; {  var link = CONFIG.API_BASE_URL + link  requestlist.push({ link: link, data: data, back: back })  if (!doing) dorequest();}const dorequest = () =&gt; {  doing = true  let task = requestlist.shift();  if (task) {    wx.request({      url: task.link,      data: Object.assign({         seq : wx.getStorageSync(&quot;seq&quot;) || &apos;&apos;,         token : wx.getStorageSync(&quot;token&quot;) || &apos;&apos;,         openid : wx.getStorageSync(&quot;openId&quot;) || &apos;&apos;}, task.data),      method: &apos;POST&apos;,      header: {        &apos;content-type&apos;: &apos;application/json&apos; // 默认值      },      success: res =&gt; {        wx.setStorageSync(&quot;seq&quot;, res.data.seq)        wx.setStorageSync(&quot;token&quot;, res.data.token)        task.back(res.data);        dorequest();      },      fail:function(){        wx.showToast({          title: &apos;服务器出现故障&apos;,          image: &apos;../../assets/icon/wrong.png&apos;,          duration: 3000        })      },      complete:function(){      }    });  }    else {    doing = false;  }};module.exports = {  request,  //获取用户openid  getOpenid: (data,res) =&gt; {    return request(&apos;get-wx-openid&apos;,data,res)  },  //获取验证码  getLoginCode: (data,res) =&gt; {    return request(&apos;send-phone-code&apos;, data, res)  }}</code></pre>]]></content>
      
      
      <categories>
          
          <category> web前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小程序request封装 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微信小程序开发需要注意的一些规范</title>
      <link href="/2019/04/30/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91%E9%9C%80%E8%A6%81%E6%B3%A8%E6%84%8F%E7%9A%84%E4%B8%80%E4%BA%9B%E8%A7%84%E8%8C%83/"/>
      <url>/2019/04/30/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91%E9%9C%80%E8%A6%81%E6%B3%A8%E6%84%8F%E7%9A%84%E4%B8%80%E4%BA%9B%E8%A7%84%E8%8C%83/</url>
      
        <content type="html"><![CDATA[<h6 id="今天的工作已经做完，在马上就进入五一假期的下班焦躁时刻，来个简单的微信小程序开发规范总结。"><a href="#今天的工作已经做完，在马上就进入五一假期的下班焦躁时刻，来个简单的微信小程序开发规范总结。" class="headerlink" title="今天的工作已经做完，在马上就进入五一假期的下班焦躁时刻，来个简单的微信小程序开发规范总结。"></a>今天的工作已经做完，在马上就进入五一假期的下班焦躁时刻，来个简单的微信小程序开发规范总结。</h6><h4 id="1-小程序应避免出现任何-JavaScript-异常"><a href="#1-小程序应避免出现任何-JavaScript-异常" class="headerlink" title="1.小程序应避免出现任何 JavaScript 异常"></a>1.小程序应避免出现任何 JavaScript 异常</h4><blockquote><p>出现 JavaScript 异常可能导致小程序的交互无法进行下去，我们应当追求零异常，保证小程序的高鲁棒性和高可用性，相信这一点一般情况下都不会出现，需要注意的是代码测试中多场景的试错。  </p></blockquote><a id="more"></a><h4 id="2-合理控制图片的大小"><a href="#2-合理控制图片的大小" class="headerlink" title="2.合理控制图片的大小"></a>2.合理控制图片的大小</h4><blockquote><p>图片太大会增加下载时间和内存的消耗，应根据显示区域大小合理控制图片大小。<br>一般情况下图片较大的，我们应该都会选择直接放在服务器上，直接拿到地址，但是官方说这样读取的图片：<code>存在网络图片资源未开启 HTTP 缓存控制</code>,这是个什么意思，我也未完全弄懂。</p></blockquote><h4 id="3-小程序所有请求应响应正常"><a href="#3-小程序所有请求应响应正常" class="headerlink" title="3.小程序所有请求应响应正常"></a>3.小程序所有请求应响应正常</h4><blockquote><p>请求失败可能导致小程序的交互无法进行下去，应当保证所有请求都能成功。然而，请求成功只是第一步，还可能存在的问题就是请求的耗时太长、存在短时间内发起太多的请求这样的情况。</p></blockquote><h4 id="4-避免setData的数据过大且避免setData的调用过于频繁。"><a href="#4-避免setData的数据过大且避免setData的调用过于频繁。" class="headerlink" title="4.避免setData的数据过大且避免setData的调用过于频繁。"></a>4.避免setData的数据过大且避免setData的调用过于频繁。</h4><blockquote><p>由于小程序运行逻辑线程与渲染线程之上，setData的调用会把数据从逻辑层传到渲染层，数据太大会增加通信时间.<br>setData接口的调用涉及逻辑层与渲染层间的线程通过，通信过于频繁可能导致处理队列阻塞，界面渲染不及时而导致卡顿，应避免无用的频繁调用.</p></blockquote><h4 id="5-避免将未绑定在-WXML-的变量传入-setData"><a href="#5-避免将未绑定在-WXML-的变量传入-setData" class="headerlink" title="5.避免将未绑定在 WXML 的变量传入 setData"></a>5.避免将未绑定在 WXML 的变量传入 setData</h4><blockquote><p>setData操作会引起框架处理一些渲染界面相关的工作，一个未绑定的变量意味着与界面渲染无关，传入setData会造成不必要的性能消耗。<br>这一条我想是很多开发人员在初次接触小程序开发的时候都会犯的一个错误吧。因为刚开始的时候由于这种setData的语法，让我们忘了还有全局变量的使用，于是会经常出现使用Page中定义的data做中间过渡。</p></blockquote><h4 id="6-wxss-覆盖率较高，较少或没有引入未被使用的样式"><a href="#6-wxss-覆盖率较高，较少或没有引入未被使用的样式" class="headerlink" title="6.wxss 覆盖率较高，较少或没有引入未被使用的样式"></a>6.wxss 覆盖率较高，较少或没有引入未被使用的样式</h4><blockquote><p>我们应该按需引入 wxss 资源，如果小程序中存在大量未使用的样式，会增加小程序包体积大小，从而在一定程度上影响加载速度。<br>这个也是比较常见的一种不规范，写了很多CSS样式，很多不用的就留来了代码里面，越来越多，所以在编写代码过程中，尽量去对每一行代码（特别是自己写的）了如指掌。</p></blockquote><h4 id="7-避免首屏时间太长的情况"><a href="#7-避免首屏时间太长的情况" class="headerlink" title="7.避免首屏时间太长的情况"></a>7.避免首屏时间太长的情况</h4><blockquote><p>首屏时间是指用户开始看到第一屏的内容的时间，首屏时间太长会导致用户长时间看到的都是白屏，会一直等待有意义的内容展示出来。出现这一情况，应仔细检查这个过程都有哪个操作，一般来说，可能是请求数据的时间太长，或者是一次渲染的数据太大导致渲染时间太长。</p></blockquote><blockquote><p>这些东西是我感觉比较常见且容易修改的，其它还存在一些规范，不妨打开微信开发者工具，点击<code>Audits</code>,对你写的代码进行一个测试，测试结果会让你很好的处理自己的代码。That’s really cool!</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> web前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小程序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>八、播放器内置组件开发---(动画过渡)</title>
      <link href="/2019/01/27/Vue%E9%9F%B3%E4%B9%90-08/"/>
      <url>/2019/01/27/Vue%E9%9F%B3%E4%B9%90-08/</url>
      
        <content type="html"><![CDATA[<h4 id="本节总览"><a href="#本节总览" class="headerlink" title="本节总览"></a>本节总览</h4><blockquote><p>本节代码提交至：<a href="https://github.com/liugezhou/liugezhou_music/tree/chapter8" target="_blank" rel="noopener">chapter8</a></p></blockquote><h4 id="效果预览："><a href="#效果预览：" class="headerlink" title="效果预览："></a>效果预览：</h4><p><img src="http://img.liugezhou.online/Vue2-08.gif" alt="chapter8--动画.gif"></p><a id="more"></a><blockquote><p>本节主要是在进入歌手详情页后，点击某一首歌曲后的页面–播放页面的代码开发。<br>包含底部mini播放器的Vuex状态控制显示与掩藏（之前已写好）、播放器页面布局、播放器页面的动画效果。</p></blockquote><h4 id="代码主要更新"><a href="#代码主要更新" class="headerlink" title="代码主要更新"></a>代码主要更新</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">liugezhou_music/src/store</span><br><span class="line">liugezhou_music/src/common/js/config.js</span><br><span class="line">liugezhou_music/package.json</span><br><span class="line">liugezhou_music/src/components/music-list/music-list.vue</span><br><span class="line">liugezhou_music/src/components/player/player.vue</span><br><span class="line">liugezhou_music/src/App.vue</span><br></pre></td></tr></table></figure><h4 id="本节代码开发知识点及代码思路"><a href="#本节代码开发知识点及代码思路" class="headerlink" title="本节代码开发知识点及代码思路"></a>本节代码开发知识点及代码思路</h4><h5 id="1-store-播放器Vuex数据设计"><a href="#1-store-播放器Vuex数据设计" class="headerlink" title="1.store || 播放器Vuex数据设计"></a>1.store || 播放器Vuex数据设计</h5><blockquote><p>上节内容主要介绍了一下Vuex，这节课因为要开始进行播放器内置组件的开发，开始使用Vuex。分析播放器内置组件页面的需求，我们发现有几个变量我们是需要写进全局变量控制中的。</p><blockquote><p><code>singer</code>:(默认{}):存储歌手数据<br><code>playing</code>(默认false)：控制歌曲是否正在播放<br><code>fullScreen</code>(默认flase)：控制播放器是否全屏播放<br><code>playlist</code>(默认[])：存储播放器播放列表<br><code>sequenceList</code>(默认[])：存储播放器顺序播放列表<br><code>mode</code>(默认playMode.sequence)：播放器播放方式<br><code>currentIndex</code>（默认为-1）：播放歌曲的索引</p></blockquote><p>关于store文件中具体代码：<a href="https://github.com/liugezhou/liugezhou_music/tree/8abb9b118507974191a20af9a6338d3ea554dab9/src/store" target="_blank" rel="noopener">戳这里</a><br>这里基本上涵盖了Vuex的大多数内容，在我们自己处理Vuex这块的代码时，可以参考这块进行设计。</p></blockquote><h5 id="2-player-vue"><a href="#2-player-vue" class="headerlink" title="2.player.vue"></a>2.player.vue</h5><blockquote><p>在Vuex代码设计完毕之后，首先我们点击<code>song-list</code>组件中的某一首歌曲时，要将此事件传给父组件<code>music-list</code>，父组件接收到此事件后通过<code>mapActions</code>去改变Vuex中数据，来控制<code>player.vue</code>组件的显示与隐藏。<br><code>player.vue</code>组件的代码：<a href="https://github.com/liugezhou/liugezhou_music/blob/chapter8/src/components/player/player.vue" target="_blank" rel="noopener">看这里</a>.<br>通过分析此代码我们知道，此组件主要是分大屏幕与mini小屏幕。业务代码很清晰，下面我们来继续分析一下这里关于transition动画的实现。<br>这里的动画分为三部分： name=”normal”、name=”mini”，这两个通过CSS控制的动画以及下文提到的动画。<br>此处动画是用到的开源第三方库，首先，我们需要安装一个依赖：package.json—-<a href="https://github.com/HenrikJoreteg/create-keyframe-animation" target="_blank" rel="noopener">create-keyframe-animation</a></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install create-keyframe-animation</span><br></pre></td></tr></table></figure><blockquote><p>这里包含全屏的播放器显示以及退出全局播放后的mini播放器的显示。<br>在经过一些布局后，退出全屏播放器需要加一个中心大图片向nimi播放器图片切换的过渡效果，反之同样，这里主要使用了Vux官方给出的transition动画与上面的相关依赖。<br>具体代码实现：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">//全屏div使用transition包裹，使用官方的JavaScript钩子函数</span><br><span class="line">&lt;transition name=&quot;normal&quot;</span><br><span class="line">                @enter = &quot;enter&quot;</span><br><span class="line">                @after-enter = &quot;afterEnter&quot;</span><br><span class="line">                @leave = &quot;leave&quot;</span><br><span class="line">                @after-leave= &quot;afterLeave&quot;</span><br><span class="line">&gt;</span><br><span class="line">//mini播放器的transition包裹</span><br><span class="line">&lt;transition name=&quot;mini&quot;&gt;</span><br></pre></td></tr></table></figure><blockquote><p> 具体代码实现：<a href="https://github.com/liugezhou/liugezhou_music/blob/chapter8/src/components/player/player.vue" target="_blank" rel="noopener">戳这里</a></p></blockquote><blockquote><p>关于本节如果你有任何问题可以在下方留言。<br>如有疑问请添加我的微信号：18231133236。欢迎交流！<br>更多内容，请访问的我的个人博客：<a href="https://links.jianshu.com/go?to=https%3A%2F%2Fwww.liugezhou.online" target="_blank" rel="noopener">https://www.liugezhou.online</a>.</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Vue2.0开发企业级移动音乐APP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 移动音乐APP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>七、歌手详情页面--Vuex存储歌手数据</title>
      <link href="/2019/01/19/Vue%E9%9F%B3%E4%B9%90-07/"/>
      <url>/2019/01/19/Vue%E9%9F%B3%E4%B9%90-07/</url>
      
        <content type="html"><![CDATA[<h4 id="本节总览"><a href="#本节总览" class="headerlink" title="本节总览"></a>本节总览</h4><blockquote><p>本节代码提交至：<a href="https://github.com/liugezhou/liugezhou_music/tree/chapter7" target="_blank" rel="noopener">chapter7</a></p></blockquote><h4 id="效果预览："><a href="#效果预览：" class="headerlink" title="效果预览："></a>效果预览：</h4><p><img src="http://img.liugezhou.online/Vue2-07.png" alt="singer-detail.png"></p><a id="more"></a><blockquote><p>本节实现点击歌手提交mutation，将歌手数据存储在store中，涉及到整个Vuex技术栈。<br>本节主要代码开发是singer-detail组件。<br>singer-detail调用开发的music-list组件：将歌手歌曲数据、背景图片以及歌手姓名传入到music-list组件中。<br>music-list组件中分为上半部分与下半部分两块，下半部分的歌曲列表再分离成song-list组件。<br>即总共包含三个组件的开发，还有一些酷炫、美丽的花朵、图片拖拽等的效果。</p></blockquote><h4 id="代码更新"><a href="#代码更新" class="headerlink" title="代码更新"></a>代码更新</h4><blockquote><p><code>主要</code>更新代码列表如下：<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">/src/components/singer-detail/singer-detail.vue</span><br><span class="line">/src/store  //文件夹下包含多个文件</span><br><span class="line">/src/api/singer.js</span><br><span class="line">/src/components/music-list/music-list.vue</span><br><span class="line">/src/base/song-list/song-list.vue</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="本节代码开发知识点及代码思路："><a href="#本节代码开发知识点及代码思路：" class="headerlink" title="本节代码开发知识点及代码思路："></a>本节代码开发知识点及代码思路：</h3><h4 id="一、transition-进入-离开-amp-列表过渡"><a href="#一、transition-进入-离开-amp-列表过渡" class="headerlink" title="一、transition | 进入/离开 &amp; 列表过渡"></a>一、<code>transition</code> | 进入/离开 &amp; 列表过渡</h4><blockquote><p>官方学习：<a href="https://cn.vuejs.org/v2/guide/transitions.html" target="_blank" rel="noopener">https://cn.vuejs.org/v2/guide/transitions.html</a><br>小结：<br>1.transition标签包裹<br>2.进入时：<code>name-enter</code>与<code>name-enter-active</code><br>3.离开时：<code>name-leave-to</code>与<code>name-leave-active</code><br>4.CSS3-3D转换(<code>translate3d</code>)<br>关于Vue的动画效果与CSS3动画效果的学习，一定要去Vue的官方文档进行一个系统的学习。</p></blockquote><h4 id="二、Vuex"><a href="#二、Vuex" class="headerlink" title="二、Vuex"></a>二、Vuex</h4><blockquote><p>官方学习：<a href="https://vuex.vuejs.org/zh/" target="_blank" rel="noopener">https://vuex.vuejs.org/zh/</a><br>小结：<br>1.Vuex 是一个专为 Vue.js 应用程序开发的<code>状态管理模式</code>。<br>2.Vuex 背后的基本思想，借鉴了 <a href="https://facebook.github.io/flux/docs/overview.html" target="_blank" rel="noopener">Flux</a>、<a href="http://redux.js.org/" target="_blank" rel="noopener">Redux</a>、和 <a href="https://guide.elm-lang.org/architecture/" target="_blank" rel="noopener">The Elm Architecture</a><br>3.Vuex 和单纯的全局对象有两点不同:<br>   1️⃣、Vuex 的状态存储是响应式的<br>   2️⃣、你不能直接改变<code>store</code>中的状态。改变 <code>store</code>中的状态的唯一途径就是显式地提交 <code>(commit) mutation</code>。<br>4.可以通过 <code>store.state.count</code> 来获取状态对象，以及通过<code>store.commit</code> 方法触发状态变更.<br>5.强调:我们通过提交<code>mutation</code>的方式，而非直接改变<code>store.state.count</code>，是因为我们想要更明确地追踪到状态的变化.<br>6.<code>mapState</code>辅助函数| <code>对象展开运算符</code><br>7.<code>Getter</code>:从 <code>store</code>中的 <code>state</code> 中派生出一些状态:<a href="https://vuex.vuejs.org/zh/guide/getters.html" target="_blank" rel="noopener">详请</a><br>8.<a href="https://vuex.vuejs.org/zh/guide/getters.html#mapgetters-%E8%BE%85%E5%8A%A9%E5%87%BD%E6%95%B0" target="_blank" rel="noopener">mapGetters 辅助函数</a><br>9.<a href="https://vuex.vuejs.org/zh/guide/mutations.html" target="_blank" rel="noopener">Mutation</a></p><blockquote><p>1️⃣、接受 state 作为第一个参数<br>2️⃣、可以向 <code>store.commit</code>传入额外的参数，即 <code>mutation</code>的 载荷（payload）<br>3️⃣、使用常量替代 Mutation 事件类型（本节使用）<br>4️⃣、Mutation 必须是同步函数</p></blockquote><p>10.<a href="https://vuex.vuejs.org/zh/guide/actions.html" target="_blank" rel="noopener">Action</a></p><blockquote><p><code>Action</code>类似于<code>mutation</code>，不同在于：<br>①、<code>Action</code> 提交的是 <code>mutation</code>，而不是直接变更状态。<br>②、<code>Action</code> 可以包含任意<code>异步</code>操作。</p></blockquote><p>11.<a href="https://vuex.vuejs.org/zh/guide/modules.html" target="_blank" rel="noopener">Module</a><br>为了解决store 对象可能变得相当臃肿的问题。<br>……</p></blockquote><h4 id="三、通过jsonp–以singer-id为参数，获取歌手详情数据"><a href="#三、通过jsonp–以singer-id为参数，获取歌手详情数据" class="headerlink" title="三、通过jsonp–以singer.id为参数，获取歌手详情数据"></a>三、通过jsonp–以singer.id为参数，获取歌手详情数据</h4><blockquote><p>在<code>api/singer.js</code>中添加<code>getSingerDetail(singerId)</code>方法。<br>api中的诸多方法都是通过jsonp方式获取数据，不再赘述。</p></blockquote><h4 id="四、歌手详情数据处理和song类的封装"><a href="#四、歌手详情数据处理和song类的封装" class="headerlink" title="四、歌手详情数据处理和song类的封装"></a>四、歌手详情数据处理和song类的封装</h4><blockquote><p>通过jsonp获取到了歌手详情的数据后，需要对详情数据进行优化，将优化的数据进行存储。<br>在<code>common/js</code>中新建<code>song.js</code>，开发song类 ，避免代码冗余—-<a href="https://www.jianshu.com/p/0743e31cd911" target="_blank" rel="noopener">小拓展：ES6-Class基本语法</a></p></blockquote><h4 id="五、music-list组件开发"><a href="#五、music-list组件开发" class="headerlink" title="五、music-list组件开发"></a>五、music-list组件开发</h4><blockquote><p>新建文件<code>/src/components/music-list/music-list.vue</code><br>musicl-list布局，在之前也对歌手的song数据进行了封装存储后，我们继续分析需求，我们发现多个页面与歌手详情页面是类似的（头部的大图片与歌曲list区块），于是开发song-list组件（下半部分的歌曲列表），方便各个地方进行使用。</p></blockquote><h4 id="后面的代码暂时就不分析了，直接github上clone下chapter7分支代码即可，这个歌手详情页真是美的不像话。"><a href="#后面的代码暂时就不分析了，直接github上clone下chapter7分支代码即可，这个歌手详情页真是美的不像话。" class="headerlink" title="后面的代码暂时就不分析了，直接github上clone下chapter7分支代码即可，这个歌手详情页真是美的不像话。"></a>后面的代码暂时就不分析了，直接github上clone下chapter7分支代码即可，这个歌手详情页真是美的不像话。</h4><h4 id="20190823代码分析更新"><a href="#20190823代码分析更新" class="headerlink" title="20190823代码分析更新"></a>20190823代码分析更新</h4><blockquote><ol><li><p>添加路由子路由(children),点击歌手列表中某歌手跳转至某歌手页面，代码修改的地方：<a href="https://github.com/liugezhou/liugezhou_music/blob/chapter7/src/router/index.js" target="_blank" rel="noopener">戳这里</a>。 </p></li><li><p>开发歌手详情页面，代码查看：<a href="https://github.com/liugezhou/liugezhou_music/blob/chapter7/src/components/singer-detail/singer-detail.vue" target="_blank" rel="noopener">戳这里</a>. –这里使用了transition动画.  </p></li><li><p>使用Vuex，在store下新建一系列文件，可直接查看代码。这里的代码规范也可以让我们在使用到Vuex的时候按这种方式进行代码管理。</p></li><li><p>写获取歌手歌曲列表的方法：<a href="https://github.com/liugezhou/liugezhou_music/blob/chapter7/src/api/singer.js" target="_blank" rel="noopener">代码在这里</a></p></li><li><p>构建一个song类，用来处理需要的song的数据：<a href="https://github.com/liugezhou/liugezhou_music/blob/chapter7/src/common/js/song.js" target="_blank" rel="noopener">代码在这里</a> ,这个很重要是为了在上面的第二步骤处理获得到的song数据–song数据的二次封装。</p></li><li><p>music-list组件开发：<a href="https://github.com/liugezhou/liugezhou_music/blob/chapter7/src/components/music-list/music-list.vue" target="_blank" rel="noopener">代码</a>。</p></li><li><p>基础组件song-list组件开发：<a href="https://github.com/liugezhou/liugezhou_music/blob/chapter7/src/base/song-list/song-list.vue" target="_blank" rel="noopener">代码</a>–包含酷炫的上滑下拉的效果。</p></li></ol></blockquote><blockquote><p>关于本节如果你有任何问题可以在下方留言。<br>如有疑问请添加我的微信号：18231133236。欢迎交流！<br>更多内容，请访问的我的个人博客：<a href="https://links.jianshu.com/go?to=https%3A%2F%2Fwww.liugezhou.online" target="_blank" rel="noopener">https://www.liugezhou.online</a>.</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Vue2.0开发企业级移动音乐APP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 移动音乐APP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>六、歌手页面开发（二）</title>
      <link href="/2019/01/17/Vue%E9%9F%B3%E4%B9%90-06/"/>
      <url>/2019/01/17/Vue%E9%9F%B3%E4%B9%90-06/</url>
      
        <content type="html"><![CDATA[<h4 id="本节总览"><a href="#本节总览" class="headerlink" title="本节总览"></a>本节总览</h4><hr><blockquote><p>本节代码提交至：<a href="https://github.com/liugezhou/liugezhou_music/tree/chapter6" target="_blank" rel="noopener">chapter6</a></p></blockquote><h3 id="效果预览："><a href="#效果预览：" class="headerlink" title="效果预览："></a>效果预览：</h3><p><img src="http://img.liugezhou.online/Vue2-06.png" alt="vue-music.png"></p><a id="more"></a><h3 id="代码更新"><a href="#代码更新" class="headerlink" title="代码更新"></a>代码更新</h3><blockquote><p>主要更新代码列表如下：</p><p>  /src/base/listview/listview.vue<br>  /src/common/js/dom.js<br>  /src/base/scroll/scroll.vue</p></blockquote><h3 id="本节代码思路："><a href="#本节代码思路：" class="headerlink" title="本节代码思路："></a>本节代码思路：</h3><blockquote><p>本节代码复杂度相对来说有了难度，以至于在学习过程中接近放弃状态，直接copy了源代码，于是代码的实现还有待继续深度学习。</p></blockquote><blockquote><p>这一节代码的上述效果演示只能右部分的字母索引，但具体实现的效果有：</p><ul><li>点击某个字母，左侧部分对应列表的滑动到对应字母的歌手列表。</li><li>实现了右半部分的字母列表的实时滑动。（在这个listview中做了大量的计算处理）</li><li>在滑动左侧部分添加相对应title字母的置顶效果</li></ul></blockquote><h3 id="2019-08-23代码讲解更新"><a href="#2019-08-23代码讲解更新" class="headerlink" title="2019-08-23代码讲解更新"></a>2019-08-23代码讲解更新</h3><blockquote><p>本节的重点是listview.vue组件</p><ol><li>首先将右部分的字母列表静态显示，这里并未添加新的组件，只是在原文件下直接添加了一个div，将数据填充进去进行显示。</li><li>为这个div添加<code>touchstart</code>、<code>touchmove</code>、<code>touchend</code>事件，这里需要对其事件的详细方法做一个了解。<blockquote><p>①、在写<code>touchstart</code>的时候我们发现需要<code>scroll</code>组件有一个滚动到相应位置的方法，这些方法在<code>better-scroll</code>中已经封装好，我们在之前封装的<code>scroll</code>组件中需要去引入<code>scrollTo</code>和<code>scrollToElement</code>方法,而且需要添加一个监听滚动的方法<code>listenScroll</code>。<br>②、<code>touchstart</code>:第一次点击右侧div的时候，首先获取此索引（这里将获取索引做了一个dom方法的封装），然后调用上面提到的<code>scrollToElement</code>方法，且在这里需要记录一下刚点击的位置,获取点击的位置需要用到<code>e.touches[0]</code>。<br>③、<code>touchmove</code>：此次也需要记录滑动的位置,使用<code>e.touches[0].pageY</code>，通过两次滑动记录位置，计算滑动了多少，到哪个值。</p></blockquote></li><li>实现通过滑动歌手，右侧字母索引的高亮，这里首先是计算出来每一块的高度放到一个数组中，然后在互动过程中监听变化计算当前索引。（计算方法仍感受有点小复杂）</li><li>接着需要实现点击、滑动字母索引的时候实现字母的高亮（这里做了一些边界的处理）。</li><li>Fixed title的功能实现：添加一个fixed的div，然后再做关联。</li><li>最后添加loading组件。</li></ol></blockquote><h4 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h4><blockquote><ul><li>common/js/dom.js中封装了一个getData的方法（获取dom元素的属性值），这一个小小的代码封装，可见代码规范是多么令人舒畅。</li><li>scroll基础组件中有一个scrollToElement方法，第二个参数是过渡动画，在本章节中由于不需要过渡动画，所以传值为0.</li></ul></blockquote><h6 id="本节代码，可以在遇到这种关联滑动的页面需求时，起到一个很好的代码借鉴作用。"><a href="#本节代码，可以在遇到这种关联滑动的页面需求时，起到一个很好的代码借鉴作用。" class="headerlink" title="本节代码，可以在遇到这种关联滑动的页面需求时，起到一个很好的代码借鉴作用。"></a>本节代码，可以在遇到这种关联滑动的页面需求时，起到一个很好的代码借鉴作用。</h6><blockquote><p>关于本节如果你有任何问题可以在下方留言。<br>如有疑问请添加我的微信号：18231133236。欢迎交流！<br>更多内容，请访问的我的个人博客：<a href="https://links.jianshu.com/go?to=https%3A%2F%2Fwww.liugezhou.online" target="_blank" rel="noopener">https://www.liugezhou.online</a>.</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Vue2.0开发企业级移动音乐APP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 移动音乐APP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>五、歌手页面开发（一）</title>
      <link href="/2019/01/15/Vue%E9%9F%B3%E4%B9%90-05/"/>
      <url>/2019/01/15/Vue%E9%9F%B3%E4%B9%90-05/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本节代码提交至：<a href="https://github.com/liugezhou/liugezhou_music/tree/chapter5" target="_blank" rel="noopener">chapter5</a></p></blockquote><h3 id="效果预览："><a href="#效果预览：" class="headerlink" title="效果预览："></a>效果预览：</h3><p><img src="http://img.liugezhou.online/Vue2-05.png" alt="vue-music.png"></p><a id="more"></a><h3 id="代码更新"><a href="#代码更新" class="headerlink" title="代码更新"></a>代码更新</h3><blockquote><p>今天只是简单看了一下歌手页面的需求,以及歌手接口数据的获得。<br>主要更新代码列表如下：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">src/api/singer.js</span><br><span class="line">src/components/singer/singer.vue</span><br><span class="line">src/base/listview</span><br><span class="line">src/common/js/singer.js</span><br></pre></td></tr></table></figure><h3 id="本节代码讲解："><a href="#本节代码讲解：" class="headerlink" title="本节代码讲解："></a>本节代码讲解：</h3><blockquote><ol><li><p>首先通过扣扣音乐官方，找到并分析歌手列表的接口, 依照前面写好的recommend的api(jsonp),将接口url以及不同的参数传入，在<code>src/api/singer.js</code>代码中可看到数据的获取–<code>getSingerList</code>。</p></li><li><p>编写歌手列表<code>singer.vue</code>，<br>从上一步我们拿到数据后，我们需要对拿到的数据做一个二次封装，这里对数据的二次处理简单、高效，也是本节的重点。<br>代码在<code>src/components/singer/singer.vue</code>组件中可查看。</p></li><li><p>开发<code>listview</code>组件：引入之前写好的<code>scroll</code>组件，在<code>scroll</code>组件中写<code>listview</code>组件。<br><code>listview</code>也是一个基础组件，这个组件是类通讯录组件，对此组件的学习更能加深一次通用组件的开发思路。<br>本节的该组件开发只是一个简单的歌手数据DOM渲染。歌手页面右侧的字母索引以及主页面title的置顶与切换效果，下节更新。</p></li><li><p>最后，添加一个图片懒加载效果。</p></li></ol></blockquote><blockquote><p>关于本节如果你有任何问题可以在下方留言。<br>如有疑问请添加我的微信号：18231133236。欢迎交流！<br>更多内容，请访问的我的个人博客：<a href="https://links.jianshu.com/go?to=https%3A%2F%2Fwww.liugezhou.online" target="_blank" rel="noopener">https://www.liugezhou.online</a>.</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Vue2.0开发企业级移动音乐APP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 移动音乐APP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>四、热门歌单推荐</title>
      <link href="/2019/01/14/Vue%E9%9F%B3%E4%B9%90-04/"/>
      <url>/2019/01/14/Vue%E9%9F%B3%E4%B9%90-04/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本节代码更新至：<a href="https://github.com/liugezhou/liugezhou_music/tree/chapter4" target="_blank" rel="noopener">https://github.com/liugezhou/liugezhou_music/tree/chapter4</a></p></blockquote><h3 id="效果预览："><a href="#效果预览：" class="headerlink" title="效果预览："></a>效果预览：</h3><p><img src="http://img.liugezhou.online/Vue2-04.png" alt="vue-music.png"></p><a id="more"></a><h3 id="前置知识点"><a href="#前置知识点" class="headerlink" title="前置知识点"></a>前置知识点</h3><h4 id="axios"><a href="#axios" class="headerlink" title="axios"></a>axios</h4><blockquote><p>qq音乐在抓取热门歌单推荐数据时，不能通过前面说过的jsonp直接获取，原因为qq做了一个host域名为qq域名的访问(host referer的限制,在Request Header中我们可以看到Host字段为：c.y.qq.com），因此需要后端代理的方式去解决。<br>热门歌单推荐–使用axios进行数据抓取。</p><h6 id="Features"><a href="#Features" class="headerlink" title="Features"></a>Features</h6><ul><li>Make <a href="https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest" target="_blank" rel="noopener">XMLHttpRequests</a> from the browser</li><li>Make <a href="http://nodejs.org/api/http.html" target="_blank" rel="noopener">http</a> requests from node.js</li><li>Supports the <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise" target="_blank" rel="noopener">Promise</a> API</li><li>Intercept request and response</li><li>Transform request and response data</li><li>Cancel requests</li><li>Automatic transforms for JSON data</li><li>Client side support for protecting against <a href="http://en.wikipedia.org/wiki/Cross-site_request_forgery" target="_blank" rel="noopener">XSRF</a></li></ul><h6 id="使用："><a href="#使用：" class="headerlink" title="使用："></a>使用：</h6></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npm install axios</span><br><span class="line">&lt;script src=&quot;https://unpkg.com/axios/dist/axios.min.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="flex布局"><a href="#flex布局" class="headerlink" title="flex布局"></a>flex布局</h4><blockquote><p>热门歌单推荐布局使用了双flex布局，关于flex布局的温习：<a href="https://www.liugezhou.online/2018/08/22/Flex%E5%B8%83%E5%B1%80/" target="_blank" rel="noopener">https://www.liugezhou.online/2018/08/22/Flex%E5%B8%83%E5%B1%80/</a></p></blockquote><h4 id="better-scroll"><a href="#better-scroll" class="headerlink" title="better-scroll"></a>better-scroll</h4><blockquote><p><code>better-scroll</code>层级是父子级，只有第一个元素才会滚动。</p><p>使用<code>better-scroll</code>去抽象一个基础组件<code>scroll</code>，后面的每个页面基本都会用到，而且这个抽象出来的基础组件，在我们工作中使用也是大大的方面。</p><p>一定好好好看下官方的说明，才能更好的对此插件有一个清除明白的使用：  </p><p><a href="https://better-scroll.github.io/docs/zh-CN/guide/" target="_blank" rel="noopener">better-scroll的官方文档：</a><br><a href="https://zhuanlan.zhihu.com/p/27407024" target="_blank" rel="noopener">当better-scroll遇见Vue</a></p></blockquote><h4 id="vue-lazyload懒加载"><a href="#vue-lazyload懒加载" class="headerlink" title="vue-lazyload懒加载"></a>vue-lazyload懒加载</h4><blockquote><p>github地址：<a href="https://github.com/hilongjw/vue-lazyload" target="_blank" rel="noopener">https://github.com/hilongjw/vue-lazyload</a><br>在进入推荐页面的时候，会请求诸多图片，但是一般情况下我们只有在滑动到图片处再加载图片，是比较合理的，于是热门歌单推荐的list这里就使用了图片懒加载。</p></blockquote><h4 id="loading插件"><a href="#loading插件" class="headerlink" title="loading插件"></a>loading插件</h4><blockquote><p>简单的代码演示</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;loading&quot;&gt;</span><br><span class="line">    &lt;img src=&quot;./loading.gif&quot; width=&quot;24&quot; height=&quot;24&quot;&gt;</span><br><span class="line">    &lt;p class=&quot;desc&quot;&gt;&#123;&#123;title&#125;&#125;&lt;/p&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  props:&#123;</span><br><span class="line">    title:&#123;</span><br><span class="line">      type:String,</span><br><span class="line">      default:&apos;正在载入...&apos;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style lang=&quot;stylus&quot; scoped&gt;</span><br><span class="line">  @import &quot;~common/stylus/variable&quot;</span><br><span class="line"></span><br><span class="line">  .loading</span><br><span class="line">    width:100%</span><br><span class="line">    text-align: center</span><br><span class="line">    .desc</span><br><span class="line">      line-height:20px</span><br><span class="line">      font-size: $font-size-small</span><br><span class="line">      color: $color-text-l</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h4 id="代码介绍"><a href="#代码介绍" class="headerlink" title="代码介绍"></a>代码介绍</h4><blockquote><ol><li><p>axios的headers<br>如果我们直接使用上一步去拿数据，是拿不到的，正如前面关于axios那里所说的，所以我们需要修改<code>/build/webpack.dev.conf.js</code>中的代码：<br>代码修改：<a href="https://github.com/liugezhou/liugezhou_music/blob/chapter4/build/webpack.dev.conf.js" target="_blank" rel="noopener">戳这里</a>  </p></li><li><p>热门歌单数据<br>然后在api/recommend.js中添加获取热门歌单的数据接口，指向上面中地址。<br>这里的请求就是<code>axios</code>了。这里不要忘记安装、引入axios，这个时候就有数据了。<br>代码演示：<a href="https://github.com/liugezhou/liugezhou_music/blob/chapter4/src/api/recommend.js" target="_blank" rel="noopener">戳这里</a></p></li><li><p>recommend.vue组件<br>获取到数据后，我们需要使用此数据且在recommend.vue组件中布局：<br>代码演示：<a href="https://github.com/liugezhou/liugezhou_music/blob/chapter4/src/components/recommend/recommend.vue" target="_blank" rel="noopener">戳这里</a>  </p></li><li><p>scroll.vue–base组件<br>将scroll写成了一个基础组件。<br>代码演示：<a href="https://github.com/liugezhou/liugezhou_music/blob/chapter4/src/base/scroll/scroll.vue" target="_blank" rel="noopener">戳这里</a><br>这个简单的scroll组件比较经典，还里一个大坑就是在recommend组件中确保数据渲染后去调用scroll.vue组件的refresh()方法。<br>在这里对图片的加载添加了一个load事件的监听。</p></li><li><p>图片懒加载<br>第三方插件：<a href="https://github.com/hilongjw/vue-lazyload" target="_blank" rel="noopener">vue-lazyload</a></p></li></ol><p><code>npm i vue-lazyload -S</code>,详细安装、引入–参考上述文档链接。</p><p>代码演示:<a href="https://github.com/liugezhou/liugezhou_music/blob/chapter4/src/main.js" target="_blank" rel="noopener">戳这里</a> </p><p>main.js中引入，在需要使用地方—图片部分：<code>&lt;img width=&quot;60&quot; height=&quot;60&quot; v-lazy=&quot;item.imgurl&quot;  /&gt;</code></p><p>6.<code>better-scroll</code>与<code>fastclick</code>关于点击事件的冲突<br>之前是需要在轮播图片的img标签上添加：<code>class=&quot;needsclick&quot;</code><br>但是后来，<code>better-scrll</code>做了优化，所以这里就不需要再设置什么了。</p><ol start="7"><li>loading基础组件的开发和应用<br>loading组件也是一个基础组件，在整个项目中会多次用到，所以我们将此组件进行封装。<br>代码演示：<a href="https://github.com/liugezhou/liugezhou_music/blob/chapter4/src/base/loading/loading.vue" target="_blank" rel="noopener">戳这里</a><br>在所需要的组件中引入使用：</li></ol></blockquote><blockquote><p>关于本节如果你有任何问题可以在下方留言。<br>如有疑问请添加我的微信号：18231133236。欢迎交流！<br>更多内容，请访问的我的个人博客：<a href="https://links.jianshu.com/go?to=https%3A%2F%2Fwww.liugezhou.online" target="_blank" rel="noopener">https://www.liugezhou.online</a>.</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Vue2.0开发企业级移动音乐APP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 移动音乐APP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>三、推荐页面开发-轮播图</title>
      <link href="/2019/01/10/Vue%E9%9F%B3%E4%B9%90-03/"/>
      <url>/2019/01/10/Vue%E9%9F%B3%E4%B9%90-03/</url>
      
        <content type="html"><![CDATA[<blockquote><p>由于代码的开发加上章节的总结会对专注代码带来巨大的精力与时间投出，于是不在逐行代码进行解析，从本节开始我会直接把在项目开发过程中遇到的知识点进行总结，并直接上代码地址。</p></blockquote><blockquote><p>本章节实现源码：<br><a href="https://github.com/liugezhou/liugezhou_music/tree/chapter3" target="_blank" rel="noopener">https://github.com/liugezhou/liugezhou_music/tree/chapter3</a></p></blockquote><blockquote><p>效果演示：<br><img src="http://img.liugezhou.online/Vue2-03.png" alt="vue-music.png"></p></blockquote><a id="more"></a><blockquote><p>从本节开始，项目的所有数据是通过抓取获得的，所以我们首先要对数据抓取这块做学习，本课程使用的是jsop抓取数据的。<br>通过看qq网页Chrome调试，我们看到qq的轮播图数据不是通过XHR获取数据的，点击js可看到数据的获得。</p></blockquote><h4 id="jsonp原理介绍"><a href="#jsonp原理介绍" class="headerlink" title="jsonp原理介绍"></a>jsonp原理介绍</h4><blockquote><p>我们这里轮播图是抓取扣扣服务器上的数据，于是代码开始前先了解一下JSONP。</p></blockquote><blockquote><p>jsonp就是为了解决前端的跨域问题而进行的一项设计，jsonp之所以能实现跨域，是因为它不是ajax请求，它动态创建了script标签，script标签是不受同源策略限制的，将script的src指向正式的服务器地址。</p></blockquote><blockquote><h4 id="查找资料："><a href="#查找资料：" class="headerlink" title="查找资料："></a>查找资料：</h4><p>目前为止(2012年)最被推崇或者说首选的方案还是用JSON来传数据，靠JSONP来跨域。<br>JSON是一种数据交换格式，而JSONP是一种依靠开发人员的聪明才智创造出的一种非官方跨域数据交互协议。</p></blockquote><blockquote><h4 id="JSONP是怎么产生的："><a href="#JSONP是怎么产生的：" class="headerlink" title="JSONP是怎么产生的："></a>JSONP是怎么产生的：</h4><p>1、一个众所周知的问题，Ajax直接请求普通文件存在跨域无权限访问的问题，甭管你是静态页面、动态网页、web服务、WCF，只要是跨域请求，一律不准；<br>2、不过我们又发现，Web页面上调用js文件时则不受是否跨域的影响（不仅如此，我们还发现凡是拥有”src”这个属性的标签都拥有跨域的能力，比如<code>&lt;script&gt;</code>、<code>&lt;img&gt;</code>、<code>&lt;iframe&gt;</code>）；<br>3、于是可以判断，当前阶段如果想通过纯web端（ActiveX控件、服务端代理、属于未来的HTML5之Websocket等方式不算）跨域访问数据就只有一种可能，那就是在远程服务器上设法把数据装进js格式的文件里，供客户端调用和进一步处理；<br>4、恰巧我们已经知道有一种叫做JSON的纯字符数据格式可以简洁的描述复杂数据，更妙的是JSON还被js原生支持，所以在客户端几乎可以随心所欲的处理这种格式的数据；<br>5、这样子解决方案就呼之欲出了，web客户端通过与调用脚本一模一样的方式，来调用跨域服务器上动态生成的js格式文件（一般以JSON为后缀），显而易见，服务器之所以要动态生成JSON文件，目的就在于把客户端需要的数据装入进去。<br>6、客户端在对JSON文件调用成功之后，也就获得了自己所需的数据，剩下的就是按照自己需求进行处理和展现了，这种获取远程数据的方式看起来非常像AJAX，但其实并不一样。<br>7、为了便于客户端使用数据，逐渐形成了一种非正式传输协议，人们把它称作JSONP，该协议的一个要点就是允许用户传递一个callback参数给服务端，然后服务端返回数据时会将这个callback参数作为函数名来包裹住JSON数据，这样客户端就可以随意定制自己的函数来自动处理返回数据了。</p></blockquote><p>关于jsonp的学习，可以移除至：<a href="https://github.com/webmodules/jsonp" target="_blank" rel="noopener">https://github.com/webmodules/jsonp</a></p><h3 id="代码介绍："><a href="#代码介绍：" class="headerlink" title="代码介绍："></a>代码介绍：</h3><blockquote><p>1.jsonp的安装—-pacakage.json/dependencies<br>    npm install jsonp –save</p><p>2.jsonp的封装：<br>代码演示：<a href="https://github.com/liugezhou/liugezhou_music/blob/chapter3/src/common/js/jsonp.js" target="_blank" rel="noopener">戳这里</a><br>这个文件将jsonp进行了封装。</p><p>3.轮播图数据的抓取：</p><p>3.1、抓取数据用到的公共数据参数的封装：<br>代码演示：<a href="https://github.com/liugezhou/liugezhou_music/blob/chapter3/src/api/config.js" target="_blank" rel="noopener">戳这里</a><br>这个文件将用到的一些公共参数进行了封装，便于其它文件的调用。<br>其中包括：很多接口用到的公共参数<code>commonParams</code>、jsonp回调<code>options</code>、接口返回正确与否的变量<code>ERR_OK</code></p><p>3.2、轮播图数据的封装：<br>代码演示：<a href="https://github.com/liugezhou/liugezhou_music/blob/chapter3/src/api/recommend.js" target="_blank" rel="noopener">戳这里</a><br>这个文件通过上面的两个文件，将地址以及用到的一些参数进行合并，最终return到上面封装的jsonp文件.<br>使用了Object.assign()方法。</p><p>3.3、推荐页面轮播图数据的引入与轮播图组件的开发：</p><p>数据引入：<br>代码演示：<a href="https://github.com/liugezhou/liugezhou_music/blob/chapter3/src/components/recommend/recommend.vue" target="_blank" rel="noopener">戳这里</a></p><p>轮播图组件：<br>代码演示：<a href="https://github.com/liugezhou/liugezhou_music/blob/chapter3/src/base/slider/slider.vue" target="_blank" rel="noopener">戳这里</a><br>这里作者通过自己的方式写了一个轮播组件，对我相对来说有些复杂，暂时略过了这里的实现，如果在开发项目过程中遇到轮播的问题我应该会直接使用swiper。</p></blockquote><h4 id="写完本节你应该明白"><a href="#写完本节你应该明白" class="headerlink" title="写完本节你应该明白"></a>写完本节你应该明白</h4><blockquote><ul><li>jsonp是什么，如何使用jsonp。 </li><li>通过看作者jsonp的封装，思考如何将自己的代码友好封装。<br>本节完。</li></ul><p>2019.01.10</p></blockquote><blockquote><p>关于本节如果你有任何问题可以在下方留言。<br>如有疑问请添加我的微信号：18231133236。欢迎交流！<br>更多内容，请访问的我的个人博客：<a href="https://links.jianshu.com/go?to=https%3A%2F%2Fwww.liugezhou.online" target="_blank" rel="noopener">https://www.liugezhou.online</a>.</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Vue2.0开发企业级移动音乐APP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 移动音乐APP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二、页面骨架开发</title>
      <link href="/2019/01/08/Vue%E9%9F%B3%E4%B9%90-02/"/>
      <url>/2019/01/08/Vue%E9%9F%B3%E4%B9%90-02/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本章节代码更新至：<a href="https://github.com/liugezhou/liugezhou_music/tree/chapter2" target="_blank" rel="noopener">https://github.com/liugezhou/liugezhou_music/tree/chapter2</a></p></blockquote><h4 id="本节效果图："><a href="#本节效果图：" class="headerlink" title="本节效果图："></a>本节效果图：</h4><p><img src="http://img.liugezhou.online/Vue2-0%E9%AA%A8%E6%9E%B6.png" alt="骨架.png"></p><a id="more"></a><h4 id="本节主要修改了如下几个文件的代码："><a href="#本节主要修改了如下几个文件的代码：" class="headerlink" title="本节主要修改了如下几个文件的代码："></a>本节主要修改了如下几个文件的代码：</h4><ol><li><p>/build/webpack.base.conf.js</p><blockquote><p>aias中添加别名：<code>&#39;components&#39;:resolve(&#39;src/components&#39;)</code></p></blockquote></li><li><p>移动端常见meta设置<br>/index.html</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta name=&quot;viewport&quot;</span><br><span class="line">         content=&quot;width=device-width, initial-scale=1.0, </span><br><span class="line">         maximum-scale=1.0, </span><br><span class="line">         minimum-scale=1.0, user-scalable=no&quot;&gt;</span><br></pre></td></tr></table></figure></li><li><p>/package.json</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&quot;dependencies&quot;: &#123;</span><br><span class="line">&quot;babel-runtime&quot;: &quot;^6.0.0&quot;, //对es6一些语法做了一些转译</span><br><span class="line">&quot;vue&quot;: &quot;^2.5.2&quot;,</span><br><span class="line">&quot;vue-router&quot;: &quot;^3.0.1&quot;</span><br><span class="line">&quot;fastclick&quot;: &quot;^1.0.6&quot; //解决移动端300ms延迟</span><br><span class="line">&#125;,</span><br><span class="line">&quot;devDependencied&quot;: &#123;</span><br><span class="line">  &quot;babel-polyfill&quot;: &apos;^6.2.0&apos;  //对es6的API（比如Promise）做转译。</span><br><span class="line">&#125;</span><br><span class="line">//在main.js中需要引入`babel-polyfill`、`fastclick` ： import &apos;babel-polyfill&apos;</span><br></pre></td></tr></table></figure></li><li><p>/src/App.vue</p><blockquote><p>在主Vue文件中，添加了<code>&lt;m-header&gt;</code>组件、<code>&lt;tab&gt;</code>组件与<code>&lt;router-view&gt;</code></p></blockquote></li><li><p>/src/components/m-header/m-header.vue</p><blockquote><p>这块代码主要就是页面效果显示toolbar栏最上层部分，这里使用了mixin中的<code>bg-image</code>方法</p></blockquote></li><li><p><a href="https://github.com/liugezhou/liugezhou_music/compare/chapter1...chapter2#diff-725c8f1457f8dd62867a0bdb83d35454" title="src/components/tab/tab.vue" target="_blank" rel="noopener">src/components/tab/tab.vue</a></p><blockquote><p>这里是页面的主要显示效果，四个toolbar。<br>知识点一：router-link中添加tag=”div”,说明这是一个div。<br>知识点二：to=”./xxx”，代表了路由的跳转。<br>知识点三：&amp;.router-link-active  .tab-link为toolbar点击添加了效果。</p></blockquote></li><li><p><a href="https://github.com/liugezhou/liugezhou_music/compare/chapter1...chapter2#diff-36727cbb21483337586ca81cb95f29b4" title="src/router/index.js" target="_blank" rel="noopener">src/router/index.js</a></p><blockquote><p>路由index文件，主要注册了四个组件，定义了四个组件的跳转。</p></blockquote></li><li><p>路由的重定向使用：<code>redirect</code>。</p></li></ol><blockquote><p>关于本节如果你有任何问题可以在下方留言。<br>如有疑问请添加我的微信号：18231133236。欢迎交流！<br>更多内容，请访问的我的个人博客：<a href="https://links.jianshu.com/go?to=https%3A%2F%2Fwww.liugezhou.online" target="_blank" rel="noopener">https://www.liugezhou.online</a>.</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Vue2.0开发企业级移动音乐APP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 移动音乐APP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一、Vue-cli脚手架安装以及项目初始化</title>
      <link href="/2019/01/05/Vue%E9%9F%B3%E4%B9%90-01/"/>
      <url>/2019/01/05/Vue%E9%9F%B3%E4%B9%90-01/</url>
      
        <content type="html"><![CDATA[<h5 id="本章节分为两个部分，第一部分简单介绍下Vue-cli的脚手架安装，第二部分介绍下项目目录以及图标字体、公共样式等资源的准备。"><a href="#本章节分为两个部分，第一部分简单介绍下Vue-cli的脚手架安装，第二部分介绍下项目目录以及图标字体、公共样式等资源的准备。" class="headerlink" title="本章节分为两个部分，第一部分简单介绍下Vue-cli的脚手架安装，第二部分介绍下项目目录以及图标字体、公共样式等资源的准备。"></a>本章节分为两个部分，第一部分简单介绍下Vue-cli的脚手架安装，第二部分介绍下项目目录以及图标字体、公共样式等资源的准备。</h5><a id="more"></a><h3 id="一、Vue-cli脚手架安装"><a href="#一、Vue-cli脚手架安装" class="headerlink" title="一、Vue-cli脚手架安装"></a>一、Vue-cli脚手架安装</h3><blockquote><p>在进行项目初始化安装cli前，我们先在github上新建一个空的项目，项目名字自起。<br>我新建gitHub地址为：<a href="https://github.com/liugezhou/liugezhou_music" target="_blank" rel="noopener">https://github.com/liugezhou/liugezhou_music</a></p></blockquote><h3 id="将gitHub上新建的项目克隆到本地"><a href="#将gitHub上新建的项目克隆到本地" class="headerlink" title="将gitHub上新建的项目克隆到本地"></a>将gitHub上新建的项目克隆到本地</h3><blockquote><p>打开终端，cd到DeskTop，执行命令git clone  <a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a>:liugezhou/liugezhou_music.git</p></blockquote><h3 id="Vue-cli脚手架的安装"><a href="#Vue-cli脚手架的安装" class="headerlink" title="Vue-cli脚手架的安装"></a>Vue-cli脚手架的安装</h3><blockquote><p>cli脚手架安装前请确认你的电脑已经安装了<code>node</code>、<code>webpack</code>,并且对node的使用有一些基础知识储备。<br>我的vue版本号为：<code>2.9.6</code>，webpack版本号为<code>7.14.2</code>.</p></blockquote><blockquote><ul><li>第一步、 现在Vue-cli的版本已经到3.x了，但是由于课程是基于2.x的，所以我们在全局安装vue-cli脚手架的时候，使用的命令是：</li></ul></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g vue-cli</span><br></pre></td></tr></table></figure><blockquote><ul><li>第二步、cd 到DeskTop，终端中执行命令(这一步需要选择几项，不展开叙述)</li></ul></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ vue init webpack liugezhou_music</span><br></pre></td></tr></table></figure><blockquote><ul><li>第三步、cd到项目中</li></ul></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#安装项目依赖包-node_modules</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><blockquote><p>第四步、项目启动</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run dev</span><br></pre></td></tr></table></figure><p>项目启动效果如图：<br><img src="https://upload-images.jianshu.io/upload_images/2054455-a7de0cd49a1cc0af.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="music.png"></p><h3 id="脚手架安装小结"><a href="#脚手架安装小结" class="headerlink" title="脚手架安装小结"></a>脚手架安装小结</h3><blockquote><p>首先确保你的电脑安装了<code>node</code>、<code>webpack</code>和<code>git</code>，以及一款开发工具，推荐使用<code>VSCode</code>。</p></blockquote><blockquote><p>篇幅虽小，但是理解其中每一行代码并做到手动从零搭建每一步也是需要下一点的时间去操作，还有关于脚手架生成的文章目录也未做详细介绍，这里也需要刚开始学习脚手架的同学去花一点时间，去理解每一个文件的作用。</p></blockquote><h3 id="二、项目目录介绍以及图标字体、公共样式等资源的准备。"><a href="#二、项目目录介绍以及图标字体、公共样式等资源的准备。" class="headerlink" title="二、项目目录介绍以及图标字体、公共样式等资源的准备。"></a>二、项目目录介绍以及图标字体、公共样式等资源的准备。</h3><h5 id="1、新建分支chapter1"><a href="#1、新建分支chapter1" class="headerlink" title="1、新建分支chapter1"></a>1、新建分支chapter1</h5><blockquote><p>项目初始化好后，开始代码的编写，首先在git上<code>新建一个chapter1分支</code>，用来提交本节项目代码。<br>新建好分支后，在本地项目中<code>git pull</code>一下，拉取最新分支。<br>然后执行<code>git checkout chapter1</code>,切换到当前分支，现在我们便可以在本分支下进行项目的开发</p></blockquote><h5 id="2、项目初始化"><a href="#2、项目初始化" class="headerlink" title="2、项目初始化"></a>2、项目初始化</h5><blockquote><p>可直接在<br><a href="https://github.com/liugezhou/liugezhou_music/tree/chapter1" target="_blank" rel="noopener">https://github.com/liugezhou/liugezhou_music/tree/chapter1</a> 这里查看当前章节完整代码。<br>与cli脚手架工具相比，主要做了以下修改：</p><ul><li>build/webpack.base.conf.js ——–添加common别名</li><li>src目录重新部署，主要下添加字体、样式、图片等文件夹：<br><code>api</code>:跟后端请求相关代码，包括ajax和jsonp的请求，目前为空<br><code>common</code>:一些通用资源，包括font字体文件、image图片、js、<code>stylus通用样式文件</code>(本节重要)<br><code>components</code>:公共组件<br><code>router</code>:路由<br><code>store</code>：与vuex相关代码<br><code>App.vue</code>、<code>main.js</code></li><li>package.json中添加stylus、stylus-loader依赖(vue-cli脚手架默认是不会安装的)。</li></ul></blockquote><h5 id="3-分支提交-为了代码分级的阅读方便"><a href="#3-分支提交-为了代码分级的阅读方便" class="headerlink" title="3.分支提交(为了代码分级的阅读方便)"></a>3.分支提交(为了代码分级的阅读方便)</h5><blockquote><p>本分支开发完成后，需要将chapter1的代码提交到远程分支，并合并到主分支，依次执行代码如下：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commmit -m &apos;finish chapter1&apos;</span><br><span class="line">git push</span><br><span class="line">git checkout master</span><br><span class="line">git merge chapter1</span><br><span class="line">git push</span><br></pre></td></tr></table></figure><hr><p>本节完。<br>2019.01.05</p><h4 id="2019-08-11复习总结"><a href="#2019-08-11复习总结" class="headerlink" title="2019.08.11复习总结"></a>2019.08.11复习总结</h4><blockquote><p>1.由于项目用了eslint语法检查，本节修改了一下<code>.eslintrc.js</code>文件，多加了两行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;   &apos;eol-last&apos;: 0, //不检查新建文件末尾是否有空行</span><br><span class="line">&gt;    &apos;space-before-function-paren&apos;: 0 // 方法前后有无空格不检查</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>2.项目路径别名在<code>build/webpack.base.config.js</code>中的resolve/alias下修改。</p></blockquote><blockquote><p>关于本节如果你有任何问题可以在下方留言。<br>如有疑问请添加我的微信号：18231133236。欢迎交流！<br>更多内容，请访问的我的个人博客：<a href="https://links.jianshu.com/go?to=https%3A%2F%2Fwww.liugezhou.online" target="_blank" rel="noopener">https://www.liugezhou.online</a>.</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Vue2.0开发企业级移动音乐APP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 移动音乐APP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue2.0开发企业级移动音乐APP--导学</title>
      <link href="/2019/01/04/Vue2.0%E5%BC%80%E5%8F%91%E4%BC%81%E4%B8%9A%E7%BA%A7%E7%A7%BB%E5%8A%A8%E9%9F%B3%E4%B9%90APP--%E5%AF%BC%E5%AD%A6/"/>
      <url>/2019/01/04/Vue2.0%E5%BC%80%E5%8F%91%E4%BC%81%E4%B8%9A%E7%BA%A7%E7%A7%BB%E5%8A%A8%E9%9F%B3%E4%B9%90APP--%E5%AF%BC%E5%AD%A6/</url>
      
        <content type="html"><![CDATA[<h4 id="写在最前面"><a href="#写在最前面" class="headerlink" title="写在最前面"></a>写在最前面</h4><blockquote><p>18年的双十一我在慕课网上买了一本Vue的高级课程《Vue 2.0开发企业级移动端音乐Web APP》，到现在已经两个月过去了，课程内容还是没学完。之前跟着课程敲了几日的代码，因为课程读取的线上接口的变化让我终止了一段时间的学习。</p></blockquote><blockquote><p>新年伊始，哇咔咔，本着钱不能浪费掉的想法，写下这个专题。课程百分之九十的时间都是实战，所以代码量是相当大，不知道这个专题是否会夭折，试试吧。</p></blockquote><blockquote><p>我希望能记录下我学的每一个知识点，并希望看到这个专题的童鞋也能有所收获。</p></blockquote><a id="more"></a><h4 id="效果展示"><a href="#效果展示" class="headerlink" title="效果展示"></a>效果展示</h4><blockquote><p>这门课程最后要实现的效果：<br><a href="http://ustbhuangyi.com/music/" target="_blank" rel="noopener">效果示例</a></p></blockquote><h4 id="代码同步更新"><a href="#代码同步更新" class="headerlink" title="代码同步更新"></a><a href="https://github.com/liugezhou/liugezhou_music" target="_blank" rel="noopener">代码同步更新</a></h4><blockquote><p>将每一节的代码用分支形式进行记录.主分支为master分之。</p></blockquote><h4 id="项目总结文章同步更新"><a href="#项目总结文章同步更新" class="headerlink" title="项目总结文章同步更新"></a><a href="https://www.liugezhou.online/categories/Vue2-0%E5%BC%80%E5%8F%91%E4%BC%81%E4%B8%9A%E7%BA%A7%E7%A7%BB%E5%8A%A8%E9%9F%B3%E4%B9%90APP/" target="_blank" rel="noopener">项目总结文章同步更新</a></h4><blockquote><p>Vue2.0开发企业级移动音乐APP-六个周的博客<br><img src="http://img.liugezhou.online/Vue2-0%E5%BC%80%E5%8F%91%E4%BC%81%E4%B8%9A%E7%BA%A7%E7%A7%BB%E5%8A%A8%E9%9F%B3%E4%B9%90APP.png" alt="Vue2-0开发企业级移动音乐APP"></p></blockquote><h4 id="学习前提"><a href="#学习前提" class="headerlink" title="学习前提"></a>学习前提</h4><blockquote><p>掌握前端基础知识如html、css、js等.<br>有一定Vue.js基础和Vue.js的开发经验.<br>有node.js、npm和webpack的使用经验.<br>有ES6基础。</p></blockquote><h4 id="技术栈"><a href="#技术栈" class="headerlink" title="技术栈"></a>技术栈</h4><blockquote><p>Vue全家桶<br>MVVM框架：Vue.js(2.x)<br>状态管理：vuex<br>路由： vue-router<br>服务端通讯： axios &amp; jsonp<br>第三方插件<br>脚手架工具： vue-cli<br>自动化构建工具： webpack</p></blockquote><h4 id="文章记录方式"><a href="#文章记录方式" class="headerlink" title="文章记录方式"></a>文章记录方式</h4><blockquote><p>详细记录每一节课的讲授知识点.<br>新建GitHub音乐仓库，并将每一节的代码用分支形式进行记录.<br>对课程中用到的我不太了解的基础知识点，用文章详述并在本专题中附上基础知识的文章地址。</p></blockquote><h4 id="课程收获"><a href="#课程收获" class="headerlink" title="课程收获"></a>课程收获</h4><blockquote><p>了解一个中度复杂规模的应用开发.<br>掌握Vue.js的高级应用.<br>学会组件化、模块化的开发方式.<br>了解原生App体验交互的实现原理.</p></blockquote><h4 id="源码获取方式"><a href="#源码获取方式" class="headerlink" title="源码获取方式"></a>源码获取方式</h4><blockquote><p>我会跟着课程新建每一章节的分支将代码进行上传，代码上传至：<br><a href="https://github.com/liugezhou/liugezhou_music" target="_blank" rel="noopener">https://github.com/liugezhou/liugezhou_music</a></p></blockquote><h4 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h4><blockquote><p>回到上面效果展示，多点点，多体验，就是这样一个需求，不详述。</p></blockquote><blockquote><p>这门课程在讲解过程中弱化了CSS部分，JS部分差不多每一行都是手写的，所以其中很多的知识点由于知识储备不足，就会出现很多地方的深究学习。写这个专题的目的就是希望可以突破重重困难，敬畏每一行代码，对自己的学习过程做一个记录，希望在本课程中学到一些作者编码的思想与技巧。</p></blockquote><blockquote><p>关于本节如果你有任何问题可以在下方留言。<br>如有疑问请添加我的微信号：18231133236。欢迎交流！<br>更多内容，请访问的我的个人博客：<a href="https://links.jianshu.com/go?to=https%3A%2F%2Fwww.liugezhou.online" target="_blank" rel="noopener">https://www.liugezhou.online</a>.</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Vue2.0开发企业级移动音乐APP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 移动音乐APP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>编译型语言与解释型语言的区别</title>
      <link href="/2018/12/31/%E7%BC%96%E8%AF%91%E5%9E%8B-%E8%A7%A3%E9%87%8A%E5%9E%8B%E8%AF%AD%E8%A8%80%E5%8C%BA%E5%88%AB/"/>
      <url>/2018/12/31/%E7%BC%96%E8%AF%91%E5%9E%8B-%E8%A7%A3%E9%87%8A%E5%9E%8B%E8%AF%AD%E8%A8%80%E5%8C%BA%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<h3 id="文章背景"><a href="#文章背景" class="headerlink" title="文章背景"></a>文章背景</h3><p>看了一些Python的基础，说Python是解释型语言，于是昨天晚上躺到床上跟aliya语音，便说起了编译型语言跟解释型语言的区别，特地去查找了一些相关资料，结结实实的探讨了好一会，才发现自己作为一个靠程序吃饭的人，真是对不起程序员这个职业，不是计算机出身，对很多的计算机原理、名词几乎都没有理解，没有研究，甚至都不知道它的存在，真是硬伤。</p><p>但幸好还有一个想去了解的心情，于是作为一个记录，整理本篇文章，督促自己以后遇到不管大小的问题都要敞开心扉去多一点思考，多一些学习。</p><a id="more"></a><hr><h3 id="简单经历"><a href="#简单经历" class="headerlink" title="简单经历"></a>简单经历</h3><p>在详述前，先记录一下自己的经历：之前写过一段时间Java代码，现在主要写前端，在这个过程中有一个场景让我印象深刻，但原理还有待深究：之前写Java代码的时候记得修改一些内容的时候必须要重启Tomcat服务器，才能看到修改代码过后的运行结果，但是有些又不用重启。而在写前端语言的时候，抛去缓存，代码修改后可以马上运行显示，当时根本就没去想这个问题，我能简单的想起编译型语言与解释型语言的区别也就是这个了。</p><hr><h3 id="文章正文"><a href="#文章正文" class="headerlink" title="文章正文"></a>文章正文</h3><blockquote><p>那么到底什么是<code>编译型语言</code>，什么是<code>解释型语言</code>呢？他们之间有什么共同点和区别呢？</p></blockquote><h5 id="1️⃣、概念"><a href="#1️⃣、概念" class="headerlink" title="1️⃣、概念"></a>1️⃣、概念</h5><blockquote><ul><li>编译型语言代表有：<code>C</code>语言，<code>C++</code>、<code>Object-C</code>以及最近很火的苹果新语言<code>swift</code><br>通常都会对源代码进行编译，生成可以执行的二进制代码，执行的是编译后的结果</li><li>解释型语言代表有：<code>JavaScript</code>、<code>Python</code>、<br><code>Erlang</code>、<code>PHP</code>、<code>Perl</code>、<code>Ruby</code><br>通常不用对源代码进行编译，一般是通过解释器载入脚本后运行。由于每个语句都是执行的时候才进行解释翻译，这样解释性语言每次执行就要翻译一次，效率相对要低。</li><li><code>Java</code>具有编译与解释两种特性：既可以将其源代码当作脚本执行，也可以进行编译成.class代码（字节码）载入运行</li></ul></blockquote><h5 id="2️⃣、对比"><a href="#2️⃣、对比" class="headerlink" title="2️⃣、对比"></a>2️⃣、对比</h5><h6 id="编译型语言："><a href="#编译型语言：" class="headerlink" title="编译型语言："></a>编译型语言：</h6><blockquote><ul><li>优点：编译器一般会有预编译的过程对代码进行优化。因为编译只做一次，运行时不需要编译，所以编译型语言的程序执行效率高。可以脱离语言环境独立运行。</li><li>缺点：编译之后如果需要修改就需要整个模块重新编译。编译的时候根据对应的运行环境生成机器码，不同的操作系统之间移植就会有问题，需要根据运行的操作系统环境编译不同的可执行文件。</li></ul></blockquote><h6 id="解释型语言"><a href="#解释型语言" class="headerlink" title="解释型语言"></a>解释型语言</h6><blockquote><ul><li>优点：有良好的平台兼容性，在任何环境中都可以运行，前提是安装了解释器（虚拟机）。灵活，修改代码的时候直接修改就可以，可以快速部署，不用停机维护。</li><li>缺点：每次运行的时候都要解释一遍，性能上不如编译型语言。</li></ul></blockquote><h5 id="3️⃣、区别（本段落参考文章地址-戳这里）"><a href="#3️⃣、区别（本段落参考文章地址-戳这里）" class="headerlink" title="3️⃣、区别（本段落参考文章地址 戳这里）"></a>3️⃣、区别（本段落参考文章地址 戳<a href="https://www.jianshu.com/p/f726e4766ac7" target="_blank" rel="noopener">这里</a>）</h5><h6 id="区别1：从效果上来比"><a href="#区别1：从效果上来比" class="headerlink" title="区别1：从效果上来比"></a>区别1：从效果上来比</h6><blockquote><p>编译型语言要全部写完之后，然后通过某个编译器，去生成一个类似*.exe的二进制文件，然后手工双击这个文件才看的到效果；解释型语言则没生成你看的到的那种.exe文件，而是直接发出效果。那么区别之一就是：是否显性的生成二进制文件供你去双击。</p></blockquote><h6 id="区别2：运行的时候是否需要编译器"><a href="#区别2：运行的时候是否需要编译器" class="headerlink" title="区别2：运行的时候是否需要编译器"></a>区别2：运行的时候是否需要编译器</h6><blockquote><p>编译型语言运行的是最终的二进制代码了，所以不在需要编译器在身边守护。但解释型语言则不然，它是边解释、边运行，所以运行的时候很可能还有部分代码没有解释好，所以需要编译器守护（解释型语言把该工具叫：解释器）。那么编译器在哪里？就在<code>浏览器</code>里，所以你要看html效果，必须是用浏览器这种工具，或者有编译工具在内的其他工具，如：模拟浏览器的工具。</p></blockquote><h6 id="区别3：执行速度对比"><a href="#区别3：执行速度对比" class="headerlink" title="区别3：执行速度对比"></a>区别3：执行速度对比</h6><blockquote><p>编译型语言由于运行的已经是完全的二进制内容了，所以运行起来很干净利落，自然速度快。但解释型语言，运行的不一定是完全的二进制内容，因为它是边解释（成二进制），边运行。所以当它执行看出效果的时候，程序后半部分还不一定解释成二进制呢。所以它是“三心二意”的做事，速度没有前者快，但是<code>CPU的运行速度如果很快</code>(注：这就是【Python】作为一门解释型语言，弊端有所减轻的原因)，你可能看不出来，偶尔会看到“有点卡”的效果。原因就是：它边解释、边运行，你看到效果了，可能还有一少半的代码没解释成二进制呢，所以你看到的效果会是残缺的，这就是为什么查看网页的时候，很容易就看到这样的情况：先是出现一堆没有布局的文字，然后才出现那种布局好的效果。</p></blockquote><h6 id="区别4：可移植性对比"><a href="#区别4：可移植性对比" class="headerlink" title="区别4：可移植性对比"></a>区别4：可移植性对比</h6><blockquote><p>编译型语言是运行二进制内容，所以：一旦CPU指令系统改变，之前的二进制文件可能运行不了。比如：如果到其他硬件平台上运行，就可能出现错误，就需要根据该平台重新编译出新的二进制文件。所以：可移植性差；而解释型语言则不然。它并没有实现弄成什么二进制内容，而是在需要的时候才开始编译、运行。所以：它自然具有可移植性，即：在任何平台都可以马上运行起来。注意：它的解释工具如：<code>浏览器</code>，本身就是编译型语言解释出来的二进制代码，所以浏览器本身不具有移植性，是需要针对不同的平台弄出对应的浏览器最终二进制文件的。这里千万不要混淆了。</p></blockquote><h6 id="区别5：升级上对比"><a href="#区别5：升级上对比" class="headerlink" title="区别5：升级上对比"></a>区别5：升级上对比</h6><blockquote><p>编译型语言弄出来的二进制文件如果要升级，自然要重新下载一个新的二进制文件了。所以重新下载，安装，覆盖是最大的特点。比如QQ的升级，就是要重新下载，重新安装，重新覆盖，等个半天，而且很耗费CPU资源，体验性就不大好；而解释型的语言，只要重新写好源代码即可。用户提要到最新效果，只要刷新一下即可。所以体验性好。比如：某网站平台升级了，用户只要重新刷新一下……</p></blockquote><h6 id="区别6：应用领域"><a href="#区别6：应用领域" class="headerlink" title="区别6：应用领域"></a>区别6：应用领域</h6><blockquote><p>编译型语言应用领域通常是那些安装软件，如：桌面上的那种安装软件；解释型的语言的应用领域通常是：互联网，网站等，那种刷新了一下就可以看到最新效果的领域。</p></blockquote><h5 id="4️⃣、实现原理"><a href="#4️⃣、实现原理" class="headerlink" title="4️⃣、实现原理"></a>4️⃣、实现原理</h5><blockquote><p>实现原理，简单来说就是：是不是做成了“实时采集”；<br>编译型语言没有做“实时采集”。它选择了一次性解决问题，表现为：先弄出完整的二进制代码之后，再让用户去执行该二进制代码，这样省事、省力、省心。但造成可移植性差、升级麻烦的后果。</p></blockquote><blockquote><p>解释型语言，采用了“实时采集”的措施，做成“边解释、边运行”。但这样带来的直接弊端就是：边走边看，因此速度自然要慢一些。不过<code>现在的CPU、内存等硬件能力都很强大，这个方面的影响可以忽略</code>。而它带来的非常便捷的升级，让它更显示出独特的魅力。所以它在移动互联网的领域，在只要刷新一下就可以看到最新效果的领域，是独一无二的霸主。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 编程概念类 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程概念类 </tag>
            
            <tag> 编译型 VS 解释型 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端跨域问题</title>
      <link href="/2018/12/16/%E5%89%8D%E7%AB%AF%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98/"/>
      <url>/2018/12/16/%E5%89%8D%E7%AB%AF%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>作者：Qyouu<br>链接：<a href="https://www.imooc.com/article/70123" target="_blank" rel="noopener">https://www.imooc.com/article/70123</a><br>来源：慕课网</p><h6 id="本文对原文章进行了样式整理，内容如下："><a href="#本文对原文章进行了样式整理，内容如下：" class="headerlink" title="本文对原文章进行了样式整理，内容如下："></a>本文对原文章进行了样式整理，内容如下：</h6><blockquote><p>相信每一个前端er对于跨域这两个字都不会陌生，在实际项目中应用也是比较多的。但跨域方法的多种多样实在让人目不暇接。老规矩，碰到这种情况，就只能自己总结一篇博客，作为记录。</p></blockquote><a id="more"></a><h3 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h3><h5 id="1-什么是跨域？"><a href="#1-什么是跨域？" class="headerlink" title="1. 什么是跨域？"></a>1. 什么是跨域？</h5><blockquote><p>跨域一词从字面意思看，就是跨域名嘛，但实际上跨域的范围绝对不止那么狭隘。具体概念如下：只要协议、域名、端口有任何一个不同，都被当作是不同的域。之所以会产生跨域这个问题呢，其实也很容易想明白，要是随便引用外部文件，不同标签下的页面引用类似的彼此的文件，浏览器很容易懵逼的，安全也得不到保障了就。什么事，都是安全第一嘛。但在安全限制的同时也给注入iframe或是ajax应用上带来了不少麻烦。所以我们要通过一些方法使本域的js能够操作其他域的页面对象或者使其他域的js能操作本域的页面对象（iframe之间）。下面是具体的跨域情况详解：</p></blockquote><table><thead><tr><th>URL</th><th align="center">说明</th><th align="center">是否允许通信</th></tr></thead><tbody><tr><td><a href="http://www.a.com/a.jshttp://www.a.com/b.js" target="_blank" rel="noopener">http://www.a.com/a.jshttp://www.a.com/b.js</a></td><td align="center">同一域名下</td><td align="center">允许</td></tr><tr><td><a href="http://www.a.com/lab/a.jshttp://www.a.com/script/b.js" target="_blank" rel="noopener">http://www.a.com/lab/a.jshttp://www.a.com/script/b.js</a></td><td align="center">同一域名下不同文件夹</td><td align="center">允许</td></tr><tr><td><a href="http://www.a.com:8000/a.jshttp://www.a.com/b.js" target="_blank" rel="noopener">http://www.a.com:8000/a.jshttp://www.a.com/b.js</a></td><td align="center">同一域名，不同端口</td><td align="center">不允许</td></tr><tr><td><a href="http://www.a.com/a.jshttps://www.a.com/b.js" target="_blank" rel="noopener">http://www.a.com/a.jshttps://www.a.com/b.js</a></td><td align="center">同一域名，不同协议</td><td align="center">不允许</td></tr><tr><td><a href="http://www.a.com/a.jshttp://70.32.92.74/b.js" target="_blank" rel="noopener">http://www.a.com/a.jshttp://70.32.92.74/b.js</a></td><td align="center">域名和域名对应ip</td><td align="center">不允许</td></tr><tr><td><a href="http://www.a.com/a.jshttp://script.a.com/b.js" target="_blank" rel="noopener">http://www.a.com/a.jshttp://script.a.com/b.js</a></td><td align="center">主域相同，子域不同</td><td align="center">不允许</td></tr><tr><td>（cookie这种情况下也不允许访问）<a href="http://www.a.com/a.jshttp://a.com/b.js" target="_blank" rel="noopener">http://www.a.com/a.jshttp://a.com/b.js</a></td><td align="center">同一域名，不同二级域名（同上）</td><td align="center">不允许（cookie这种情况下也不允许访问）</td></tr><tr><td><a href="http://www.cnblogs.com/a.jshttp://www.a.com/b.js" target="_blank" rel="noopener">http://www.cnblogs.com/a.jshttp://www.a.com/b.js</a></td><td align="center">不同域名</td><td align="center">不允许</td></tr><tr><td><strong>这里我们需要注意两点:</strong></td><td align="center"></td><td align="center"></td></tr></tbody></table><ol><li><p>如果是协议和端口造成的跨域问题“前台”是无能为力的；</p></li><li><p>在跨域问题上，域仅仅是通过“URL的首部”来识别而不会去尝试判断相同的ip地址对应着两个域或两个域是否在同一个ip上。<br>(“URL的首部”指window.location.protocol +window.location.host，也可以理解为“Domains, protocols and ports must match”。)</p></li></ol><h5 id="2-通过document-domain跨域"><a href="#2-通过document-domain跨域" class="headerlink" title="2. 通过document.domain跨域"></a>2. 通过document.domain跨域</h5><blockquote><p>前面说过了，浏览器有一个同源策略，其限制之一是不能通过ajax的方法去请求不同源中的文档。第二个限制是浏览器中不同域的框架之间是不能进行js的交互操作的。不同的框架之间是可以获取window对象的，但却无法获取相应的属性和方法。比如，有一个页面，它的地址是<a href="https://link.jianshu.com/?t=http://www.damonare.cn/a.html" target="_blank" rel="noopener">http://www.damonare.cn/a.html</a> ， 在这个页面里面有一个iframe，它的src是<a href="https://link.jianshu.com/?t=http://damonare.cn/b.html" target="_blank" rel="noopener">http://damonare.cn/b.html</a>, 很显然，这个页面与它里面的iframe框架是不同域的，所以我们是无法通过在页面中书写js代码来获取iframe中的东西的：</p></blockquote><pre><code>&lt;script type=&quot;text/javascript&quot;&gt;function test(){       var iframe = document.getElementById(&apos;ifame&apos;);        var win = document.contentWindow;//可以获取到iframe里的window对象，但该window对象的属性和方法几乎是不可用的  var doc = win.document;//这里获取不到iframe里的document对象  var name = win.name;//这里同样获取不到window对象的name属性}&lt;/script&gt;&lt;iframe id = &quot;iframe&quot; src=&quot;http://damonare.cn/b.html&quot;  = &quot;test()&quot;&gt;&lt;/iframe&gt;</code></pre><blockquote><p>这个时候，document.domain就可以派上用场了，我们只要把<a href="https://link.jianshu.com/?t=http://www.damonare.cn/a.html" target="_blank" rel="noopener">http://www.damonare.cn/a.html</a> 和 <a href="https://link.jianshu.com/?t=http://damonare.cn/b.html" target="_blank" rel="noopener">http://damonare.cn/b.html</a> 这两个页面的document.domain都设成相同的域名就可以了。但要注意的是，document.domain的设置是有限制的，我们只能把document.domain设置成自身或更高一级的父域，且主域必须相同。</p></blockquote><p>在页面<a href="https://link.jianshu.com/?t=http://www.damonare.cn/a.html" target="_blank" rel="noopener">http://www.damonare.cn/a.html</a> 中设置document.domain:</p><pre><code>&lt;iframe id = &quot;iframe&quot; src=&quot;http://damonare.cn/b.html&quot;  = &quot;test()&quot;&gt;&lt;/iframe&gt;&lt;script type=&quot;text/javascript&quot;&gt;document.domain = &apos;damonare.cn&apos;;//设置成主域function test(){//contentWindow 可取得子窗口的 window 对象    alert(document.getElementById(&apos;iframe&apos;).contentWindow);}&lt;/script&gt;</code></pre><p>在页面<a href="https://link.jianshu.com/?t=http://damonare.cn/b.html" target="_blank" rel="noopener">http://damonare.cn/b.html</a> 中也设置document.domain:</p><pre><code>&lt;script type=&quot;text/javascript&quot;&gt;//在iframe载入这个页面也设置document.domain，使之与主页面的document.domain相同document.domain = &apos;damonare.cn&apos;;&lt;/script&gt;</code></pre><p>修改document.domain的方法只适用于不同子域的框架间的交互。</p><h5 id="3-通过location-hash跨域"><a href="#3-通过location-hash跨域" class="headerlink" title="3. 通过location.hash跨域"></a>3. 通过location.hash跨域</h5><blockquote><p>因为父窗口可以对iframe进行URL读写，iframe也可以读写父窗口的URL，URL有一部分被称为hash，就是#号及其后面的字符，它一般用于浏览器锚点定位，Server端并不关心这部分，应该说HTTP请求过程中不会携带hash，所以这部分的修改不会产生HTTP请求，但是会产生浏览器历史记录。此方法的原理就是改变URL的hash部分来进行双向通信。每个window通过改变其他 window的location来发送消息（由于两个页面不在同一个域下IE、Chrome不允许修改parent.location.hash的值，所以要借助于父窗口域名下的一个代理iframe），并通过监听自己的URL的变化来接收消息。这个方式的通信会造成一些不必要的浏览器历史记录，而且有些浏览器不支持onhashchange事件，需要轮询来获知URL的改变，最后，这样做也存在缺点，诸如数据直接暴露在了url中，数据容量和类型都有限等。下面举例说明：</p></blockquote><blockquote><p>假如父页面是baidu.com/a.html,iframe嵌入的页面为google.com/b.html（此处省略了域名等url属性），要实现此两个页面间的通信可以通过以下方法。</p><ul><li>a.html传送数据到b.html</li><li>a.html下修改iframe的src为google.com/b.html#paco</li><li>b.html监听到url发生变化，触发相应操作</li><li>b.html传送数据到a.html，由于两个页面不在同一个域下IE、Chrome不允许修改parent.location.hash的值，所以要借助于父窗口域名下的一个代理iframe</li><li>b.html下创建一个隐藏的iframe，此iframe的src是<a href="https://link.jianshu.com/?t=http://baidu.com" target="_blank" rel="noopener">baidu.com</a>域下的，并挂上要传送的hash数据，如src=”<a href="https://link.jianshu.com/?t=http://www.baidu.com/proxy.html#data" target="_blank" rel="noopener">http://www.baidu.com/proxy.html#data</a>“</li><li>proxy.html监听到url发生变化，修改a.html的url（因为a.html和proxy.html同域，所以proxy.html可修改a.html的url hash）</li><li>a.html监听到url发生变化，触发相应操作</li></ul></blockquote><p>.b.html页面的关键代码如下:</p><pre><code>try {  parent.location.hash = &apos;data&apos;;  } catch (e) {  // ie、chrome的安全机制无法修改parent.location.hash，  var ifrproxy = document.createElement(&apos;iframe&apos;);  ifrproxy.style.display = &apos;none&apos;;  ifrproxy.src = &quot;http://www.baidu.com/proxy.html#data&quot;;  document.body.appendChild(ifrproxy);  </code></pre><p>}<br>proxy.html页面的关键代码如下 :</p><pre><code>//因为parent.parent（即baidu.com/a.html）和baidu.com/proxy.html属于同一个域，所以可以改变其location.hash的值  parent.parent.location.hash = self.location.hash.substring(1);</code></pre><h5 id="4-通过HTML5的postMessage方法跨域"><a href="#4-通过HTML5的postMessage方法跨域" class="headerlink" title="4. 通过HTML5的postMessage方法跨域"></a>4. 通过HTML5的postMessage方法跨域</h5><blockquote><p>高级浏览器Internet Explorer 8+, chrome，Firefox , Opera  和 Safari 都将支持这个功能。这个功能主要包括接受信息的”message”事件和发送消息的”postMessage”方法。比如damonare.cn域的A页面通过iframe嵌入了一个google.com域的B页面，可以通过以下方法实现A和B的通信</p></blockquote><p>A页面通过postMessage方法发送消息：</p><pre><code>window. = function() {  var ifr = document.getElementById(&apos;ifr&apos;);  var targetOrigin = &quot;http://www.google.com&quot;;  ifr.contentWindow.postMessage(&apos;hello world!&apos;, targetOrigin);  };</code></pre><blockquote><p>postMessage的使用方法：</p><ul><li>otherWindow.postMessage(message, targetOrigin);</li><li>otherWindow:指目标窗口，也就是给哪个window发消息，是 window.frames 属性的成员或者由 window.open 方法创建的窗口</li><li>message:   是要发送的消息，类型为 String、Object (IE8、9 不支持)</li><li>targetOrigin:   是限定消息接收范围，不限制请使用 ‘*<br>B页面通过message事件监听并接受消息:</li></ul></blockquote><pre><code>var onmessage = function (event) {  var data = event.data;//消息  var origin = event.origin;//消息来源地址  var source = event.source;//源Window对象  if(origin==&quot;http://www.baidu.com&quot;){  console.log(data);//hello world!  }  };  if (typeof window.addEventListener != &apos;undefined&apos;) {  window.addEventListener(&apos;message&apos;, onmessage, false);  } else if (typeof window.attachEvent != &apos;undefined&apos;) {  //for ie  window.attachEvent(&apos;onmessage&apos;, onmessage);  }</code></pre><p>同理，也可以B页面发送消息，然后A页面监听并接受消息。</p><h5 id="5-通过jsonp跨域"><a href="#5-通过jsonp跨域" class="headerlink" title="5.通过jsonp跨域"></a>5.通过jsonp跨域</h5><blockquote><p>刚才说的这几种都是双向通信的，即两个iframe，页面与iframe或是页面与页面之间的，下面说几种单项跨域的（一般用来获取数据），因为通过script标签引入的js是不受同源策略的限制的。所以我们可以通过script标签引入一个js或者是一个其他后缀形式（如php，jsp等）的文件，此文件返回一个js函数的调用。</p></blockquote><blockquote><p>比如，有个a.html页面，它里面的代码需要利用ajax获取一个不同域上的json数据，假设这个json数据地址是<a href="https://link.jianshu.com/?t=http://damonare.cn/data.php" target="_blank" rel="noopener">http://damonare.cn/data.php</a>, 那么a.html中的代码就可以这样：</p></blockquote><pre><code>&lt;script type=&quot;text/javascript&quot;&gt;//处理获得的json数据    function dosomething(jsondata){            }&lt;/script&gt;&lt;script src=&quot;http://example.com/data.php?callback=dosomething&quot;&gt;&lt;/script&gt;</code></pre><blockquote><p>我们看到获取数据的地址后面还有一个callback参数，按惯例是用这个参数名，但是你用其他的也一样。当然如果获取数据的jsonp地址页面不是你自己能控制的，就得按照提供数据的那一方的规定格式来操作了。</p></blockquote><blockquote><p>因为是当做一个js文件来引入的，所以<a href="https://link.jianshu.com/?t=http://damonare.cn/data.php" target="_blank" rel="noopener">http://damonare.cn/data.php</a> 返回的必须是一个能执行的js文件，所以这个页面的php代码可能是这样的(一定要和后端约定好哦):</p></blockquote><pre><code>&lt;?php$callback = $_GET[&apos;callback&apos;];//得到回调函数名      $data = array(&apos;a&apos;,&apos;b&apos;,&apos;c&apos;);//要返回的数据    echo $callback.&apos;(&apos;.json_encode($data).&apos;)&apos;;//输出?&gt;</code></pre><blockquote><p>最终，输出结果为：dosomething([‘a’,’b’,’c’]);</p></blockquote><blockquote><p>如果你的页面使用jquery，那么通过它封装的方法就能很方便的来进行jsonp操作了。</p></blockquote><pre><code>&lt;script type=&quot;text/javascript&quot;&gt;/处理获得的json数据$.getJSON(&apos;http://example.com/data.php?callback=?,function(jsondata)&apos;){        /});&lt;/script&gt;</code></pre><blockquote><p>jquery会自动生成一个全局函数来替换callback=?中的问号，之后获取到数据后又会自动销毁，实际上就是起一个临时代理函数的作用。$.getJSON方法会自动判断是否跨域，不跨域的话，就调用普通的ajax方法；跨域的话，则会以异步加载js文件的形式来调用jsonp的回调函数。</p><ul><li>JSONP的优缺点</li><li>JSONP的优点是：它不像XMLHttpRequest对象实现的Ajax请求那样受到同源策略的限制；它的兼容性更好，在更加古老的浏览器中都可以运行，不需要XMLHttpRequest或ActiveX的支持；并且在请求完毕后可以通过调用callback的方式回传结果。</li><li>JSONP的缺点则是：它只支持GET请求而不支持POST等其它类型的HTTP请求；它只支持跨域HTTP请求这种情况，不能解决不同域的两个页面之间如何进行JavaScript调用的问题。</li></ul></blockquote><h5 id="6-通过CORS跨域"><a href="#6-通过CORS跨域" class="headerlink" title="6. 通过CORS跨域"></a>6. 通过CORS跨域</h5><blockquote><p>CORS（Cross-Origin Resource Sharing）跨域资源共享，定义了必须在访问跨域资源时，浏览器与服务器应该如何沟通。CORS背后的基本思想就是使用自定义的HTTP头部让浏览器与服务器进行沟通，从而决定请求或响应是应该成功还是失败。目前，所有浏览器都支持该功能，IE浏览器不能低于IE10。整个CORS通信过程，都是浏览器自动完成，不需要用户参与。对于开发者来说，CORS通信与同源的AJAX通信没有差别，代码完全一样。浏览器一旦发现AJAX请求跨源，就会自动添加一些附加的头信息，有时还会多出一次附加的请求，但用户不会有感觉。</p></blockquote><p><strong>因此，实现CORS通信的关键是服务器。只要服务器实现了CORS接口，就可以跨源通信。</strong></p><p>平时的ajax请求可能是这样的:</p><pre><code>&lt;script type=&quot;text/javascript&quot;&gt;var xhr = new XMLHttpRequest();xhr.open(&quot;POST&quot;, &quot;/damonare&quot;,true);xhr.send();&lt;/script&gt;</code></pre><p>以上damonare部分是相对路径，如果我们要使用CORS，相关Ajax代码可能如下所示：</p><pre><code>&lt;script type=&quot;text/javascript&quot;&gt;var xhr = new XMLHttpRequest();xhr.open(&quot;GET&quot;, &quot;http://segmentfault.com/u/trigkit4/&quot;,true);xhr.send();&lt;/script&gt;</code></pre><blockquote><p>代码与之前的区别就在于相对路径换成了其他域的绝对路径，也就是你要跨域访问的接口地址。</p></blockquote><blockquote><p>服务器端对于CORS的支持，主要就是通过设置Access-Control-Allow-Origin来进行的。如果浏览器检测到相应的设置，就可以允许Ajax进行跨域的访问。关于CORS更多了解可以看下阮一峰老师的这一篇文章：<a href="https://link.jianshu.com/?t=http://www.ruanyifeng.com/blog/2016/04/cors.html" target="_blank" rel="noopener">跨域资源共享 CORS 详解</a></p><ul><li>CORS和JSONP对比</li><li>JSONP只能实现GET请求，而CORS支持所有类型的HTTP请求。</li><li>使用CORS，开发者可以使用普通的XMLHttpRequest发起请求和获得数据，比起JSONP有更好的错误处理。</li><li>JSONP主要被老的浏览器支持，它们往往不支持CORS，而绝大多数现代浏览器都已经支持了CORS）。</li></ul></blockquote><p>CORS与JSONP相比，无疑更为先进、方便和可靠。</p><h5 id="7-通过window-name跨域"><a href="#7-通过window-name跨域" class="headerlink" title="7. 通过window.name跨域"></a>7. 通过window.name跨域</h5><blockquote><p>window对象有个name属性，该属性有个特征：即在一个窗口(window)的生命周期内,窗口载入的所有的页面都是共享一个window.name的，每个页面对window.name都有读写的权限，window.name是持久存在一个窗口载入过的所有页面中的，并不会因新页面的载入而进行重置。</p></blockquote><p>比如：我们在任意一个页面输入</p><pre><code>window.name = &quot;My window&apos;s name&quot;;setTimeout(function(){    window.location.href = &quot;http://damonare.cn/&quot;;},1000)</code></pre><p>进入damonare.cn页面后我们再检测再检测 window.name :</p><pre><code>window.name; // My window&apos;s name</code></pre><blockquote><p>可以看到，如果在一个标签里面跳转网页的话，我们的 window.name 是不会改变的。<br>基于这个思想，我们可以在某个页面设置好 window.name 的值，然后跳转到另外一个页面。在这个页面中就可以获取到我们刚刚设置的 window.name 了。</p></blockquote><blockquote><p>由于安全原因，浏览器始终会保持 window.name 是string 类型。</p></blockquote><blockquote><p>同样这个方法也可以应用到和iframe的交互来：<br>比如：我的页面(<a href="https://link.jianshu.com/?t=http://damonare.cn/index.html" target="_blank" rel="noopener">http://damonare.cn/index.html</a>)中内嵌了一个iframe：</p></blockquote><pre><code>&lt;iframe id=&quot;iframe&quot; src=&quot;http://www.google.com/iframe.html&quot;&gt;&lt;/iframe&gt;</code></pre><blockquote><p>在 iframe.html 中设置好了 window.name 为我们要传递的字符串。<br>我们在 index.html 中写了下面的代码：</p></blockquote><pre><code>var iframe = document.getElementById(&apos;iframe&apos;);var data = &apos;&apos;;iframe. = function() {data = iframe.contentWindow.name;};</code></pre><p>Boom!报错！肯定的，因为两个页面不同源嘛，想要解决这个问题可以这样干：</p><pre><code>var iframe = document.getElementById(&apos;iframe&apos;);var data = &apos;&apos;;iframe. = function() {iframe. = function(){    data = iframe.contentWindow.name;}iframe.src = &apos;about:blank&apos;;};</code></pre><p><strong>或者将里面的 about:blank 替换成某个同源页面（about:blank，javascript: 和 data: 中的内容，继承了载入他们的页面的源。）</strong></p><p>这种方法与 document.domain 方法相比，放宽了域名后缀要相同的限制，可以从任意页面获取 string 类型的数据。</p><h3 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h3><blockquote><p>其它诸如中间件跨域，服务器代理跨域，Flash URLLoader跨域，动态创建script标签（简化版本的jsonp）不作讨论。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 编程概念类 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端跨域 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>服务端渲染</title>
      <link href="/2018/10/15/%E6%9C%8D%E5%8A%A1%E7%AB%AF%E6%B8%B2%E6%9F%93/"/>
      <url>/2018/10/15/%E6%9C%8D%E5%8A%A1%E7%AB%AF%E6%B8%B2%E6%9F%93/</url>
      
        <content type="html"><![CDATA[<h3 id="导读"><a href="#导读" class="headerlink" title="导读"></a>导读</h3><h5 id="本文主要是从三个方面学习服务端渲染，内容整理自多个博客。"><a href="#本文主要是从三个方面学习服务端渲染，内容整理自多个博客。" class="headerlink" title="本文主要是从三个方面学习服务端渲染，内容整理自多个博客。"></a>本文主要是从三个方面学习服务端渲染，内容整理自多个博客。</h5><blockquote><ul><li>服务端渲染是什么？什么是服务端渲染？（服务端渲染的运行机制）</li><li>为什么使用服务端渲染？服务端渲染解决了什么问题？</li><li>什么情况下使用服务端渲染？（服务端渲染的应用实例与使用场景）</li></ul></blockquote><a id="more"></a><h3 id="一、概念"><a href="#一、概念" class="headerlink" title="一、概念"></a>一、概念</h3><p>首先，说到服务端渲染我们要先对渲染这个概念有一个大概的了解</p><blockquote><p>渲染：就是将数据和模版组装成html</p></blockquote><h4 id="客户端渲染（CSR）VS服务端渲染-SSR"><a href="#客户端渲染（CSR）VS服务端渲染-SSR" class="headerlink" title="客户端渲染（CSR）VS服务端渲染(SSR)"></a>客户端渲染（CSR）VS服务端渲染(SSR)</h4><p>那么，为了更好的理解服务端渲染，我们也很有必要去了解一下客户端渲染。将客户端渲染与服务端渲染同时进行学习理解。</p><h5 id="1-客户端渲染"><a href="#1-客户端渲染" class="headerlink" title="1.客户端渲染"></a>1.客户端渲染</h5><h6 id="1-1概念"><a href="#1-1概念" class="headerlink" title="1.1概念"></a>1.1概念</h6><blockquote><p>解释一：客户端渲染模式下，服务端把渲染的静态文件给到客户端，客户端拿到服务端发送过来的文件自己跑一遍js，根据JS运行结果，生成相应DOM，然后渲染给用户。</p></blockquote><blockquote><p>解释二：html 仅仅作为静态文件，客户端在请求时，服务端不做任何处理，直接以原文件的形式返回给客户端客户端，然后根据 html 上的 JavaScript，生成 DOM 插入 html。</p></blockquote><blockquote><p><code>延伸</code>：前端渲染的方式起源于JavaScript的兴起，ajax的大热更是让前端渲染更加成熟，前端渲染真正意义上的实现了前后端分离，前端只专注于UI的开发，后端只专注于逻辑的开发，前后端交互只通过约定好的API来交互，后端提供json数据，前端循环json生成DOM插入到页面中去。</p></blockquote><h6 id="1-2-利弊"><a href="#1-2-利弊" class="headerlink" title="1.2.利弊"></a>1.2.利弊</h6><blockquote><p><code>好处</code>： 网络传输数据量小、减少了服务器压力、前后端分离、局部刷新，无需每次请求完整页面、交互好可实现各种效果</p></blockquote><blockquote><p><code>坏处</code>：不利于SEO、爬虫看不到完整的程序源码、首屏渲染慢（渲染前需要下载一堆js和css等）</p></blockquote><h5 id="2-服务端渲染"><a href="#2-服务端渲染" class="headerlink" title="2.服务端渲染"></a>2.服务端渲染</h5><h6 id="2-1-概念"><a href="#2-1-概念" class="headerlink" title="2.1.概念"></a>2.1.概念</h6><blockquote><p>解释一：服务端在返回 html 之前，在特定的区域，符号里用数据填充，再给客户端，客户端只负责解析 HTML 。</p></blockquote><blockquote><p>解释二：服务端渲染的模式下，当用户第一次请求页面时，由服务器把需要的组件或页面渲染成 HTML 字符串，然后把它返回给客户端。客户端拿到手的，是可以直接渲染然后呈现给用户的 HTML 内容，不需要为了生成 DOM 内容自己再去跑一遍 JS 代码。使用服务端渲染的网站，可以说是“所见即所得”，页面上呈现的内容，我们在 html 源文件里也能找到。</p></blockquote><h6 id="2-2-利弊"><a href="#2-2-利弊" class="headerlink" title="2.2.利弊"></a>2.2.利弊</h6><blockquote><p><code>好处</code>:首屏渲染快、利于SEO、可以生成缓存片段，生成静态化文件、节能（对比客户端渲染的耗电）</p></blockquote><blockquote><p><code>坏处</code>:用户体验较差、不容易维护，通常前端改了部分html或者css，后端也需要修改。</p></blockquote><h5 id="3-对比"><a href="#3-对比" class="headerlink" title="3.对比"></a>3.对比</h5><blockquote><p>其实前后端的渲染本质是一样的，都是字符串的拼接，将数据渲染进一些固定格式的html代码中形成最终的html展示在用户页面上。  因为字符串的拼接必然会损耗一些性能资源。<br>如果在服务器端渲染，那么消耗的就是server端的性能。<br>如果是在客户端渲染，常见的手段，比如是直接生成DOM插入到html 中，或者是使用一些前端的模板引擎等。他们初次渲染的原理大多是将原html中的数据标记（例如）替换。</p></blockquote><h3 id="二、为什么使用服务端渲染，它解决的是什么问题"><a href="#二、为什么使用服务端渲染，它解决的是什么问题" class="headerlink" title="二、为什么使用服务端渲染，它解决的是什么问题"></a>二、为什么使用服务端渲染，它解决的是什么问题</h3><p>简单总结起来就是两点：</p><blockquote><p><code>首屏加载快</code><br>相比于加载单页应用，我只需要加载当前页面的内容，而不需要像 React 或者 Vue 一样加载全部的 js 文件<br><code>SEO 优化</code><br>对于单页应用，搜索引擎并不能收录到 ajax 爬取数据之后然后再动态 js 渲染出来的页面。</p></blockquote><p>为了更便于理解，下面几段话摘自掘金小册：</p><blockquote><p>事实上，很多网站是出于效益的考虑才启用服务端渲染，性能倒是在其次。<br>假设 A 网站页面中有一个关键字叫“前端性能优化”，这个关键字是 JS 代码跑过一遍后添加到 HTML 页面中的。那么客户端渲染模式下，我们在搜索引擎搜索这个关键字，是找不到 A 网站的——搜索引擎只会查找现成的内容，不会帮你跑 JS 代码。A 网站的运营方见此情形，感到很头大：搜索引擎搜不出来，用户找不到我们，谁还会用我的网站呢？为了把“现成的内容”拿给搜索引擎看，A 网站不得不启用服务端渲染。<br>但性能在其次，不代表性能不重要。服务端渲染解决了一个非常关键的性能问题——首屏加载速度过慢。在客户端渲染模式下，我们除了加载 HTML，还要等渲染所需的这部分 JS 加载完，之后还得把这部分 JS 在浏览器上再跑一遍。这一切都是发生在用户点击了我们的链接之后的事情，在这个过程结束之前，用户始终见不到我们网页的庐山真面目，也就是说用户一直在等！相比之下，服务端渲染模式下，服务器给到客户端的已经是一个直接可以拿来呈现给用户的网页，中间环节早在服务端就帮我们做掉了，用户岂不“美滋滋”？</p></blockquote><h3 id="三、-什么情况下使用服务端渲染？"><a href="#三、-什么情况下使用服务端渲染？" class="headerlink" title="三、 什么情况下使用服务端渲染？"></a>三、 什么情况下使用服务端渲染？</h3><p>通过服务端渲染的概念以及它的两个特点：<code>首屏加载速度快</code>、<code>SEO优化</code>。<br>我们知道，服务端渲染其实就是<code>由浏览器做的一些事情，我们放到了服务端去做</code>，那么对于掘金、简书、CSDN、知乎等网站的搭建，这种在网上一搜搜出一堆东西的网站，SEO做的很好，应该多少都用到服务端渲染了吧？当然，做服务端渲染成本是高昂的。<br>vue全家桶或者react全家桶，都是推荐通过服务端渲染来实现路由的。<br>服务端渲染并非完全之策（服务器稀少而宝贵），关于首屏渲染体验以及SEO的优化方案很多，在不使用服务端渲染这个操作下，我们最好的处理方式就是找寻替代优化方案。</p><p>关于在server端还是在browser端渲染的选择，更多的是要看业务场景。</p><h3 id="相关文章延伸阅读"><a href="#相关文章延伸阅读" class="headerlink" title="相关文章延伸阅读"></a>相关文章延伸阅读</h3><p><a href="https://blog.csdn.net/b9q8e64lo6mm/article/details/79418969" target="_blank" rel="noopener">https://blog.csdn.net/b9q8e64lo6mm/article/details/79418969</a> （力荐）</p><h5 id="欢迎关注我的简书文章：六个周"><a href="#欢迎关注我的简书文章：六个周" class="headerlink" title="欢迎关注我的简书文章：六个周"></a>欢迎关注我的简书文章：<a href="https://www.jianshu.com/p/b8cfa496b7ec" target="_blank" rel="noopener">六个周</a></h5>]]></content>
      
      
      <categories>
          
          <category> 编程概念类 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 服务端渲染 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flex布局</title>
      <link href="/2018/08/22/Flex%E5%B8%83%E5%B1%80/"/>
      <url>/2018/08/22/Flex%E5%B8%83%E5%B1%80/</url>
      
        <content type="html"><![CDATA[<h6 id="（本文章整理自网络，方便闲时的阅读、学习使用。）"><a href="#（本文章整理自网络，方便闲时的阅读、学习使用。）" class="headerlink" title="（本文章整理自网络，方便闲时的阅读、学习使用。）"></a>（本文章整理自网络，方便闲时的阅读、学习使用。）</h6><h5 id="一、Flex布局是什么？"><a href="#一、Flex布局是什么？" class="headerlink" title="一、Flex布局是什么？"></a>一、Flex布局是什么？</h5><p>Flex 是 Flexible Box 的缩写，意为”弹性布局”，用来为盒状模型提供最大的灵活性。<br>任何一个容器都可以指定为 Flex 布局。</p><pre><code>.box{  display: flex;}</code></pre><p>行内元素也可以使用 Flex 布局。</p><pre><code>.box{  display: inline-flex;}</code></pre><p>Webkit 内核的浏览器，必须加上-webkit前缀。</p><pre><code>.box{  display: -webkit-flex; /* Safari */  display: flex;}</code></pre><p>注意，设为 Flex 布局以后，子元素的float、clear和vertical-align属性将失效。</p><a id="more"></a><h5 id="二、基本概念"><a href="#二、基本概念" class="headerlink" title="二、基本概念"></a>二、基本概念</h5><blockquote><p>采用 Flex 布局的元素，称为 Flex 容器（flex container），简称”容器”。它的所有子元素自动成为容器成员，称为 Flex 项目（flex item），简称”项目”。</p></blockquote><blockquote><p>容器默认存在两根轴：水平的主轴（main axis）和垂直的交叉轴（cross axis）。主轴的开始位置（与边框的交叉点）叫做main start，结束位置叫做main end；交叉轴的开始位置叫做cross start，结束位置叫做cross end。</p></blockquote><blockquote><p>项目默认沿主轴排列。单个项目占据的主轴空间叫做main size，占据的交叉轴空间叫做cross size。</p></blockquote><h5 id="三、容器的属性"><a href="#三、容器的属性" class="headerlink" title="三、容器的属性"></a>三、容器的属性</h5><p>以下6个属性设置在容器上</p><blockquote><ul><li>flex-direction</li><li>flex-wrap</li><li>flex-flow</li><li>justify-content</li><li>align-items</li><li>align-content</li></ul></blockquote><h6 id="3-1-flex-direction属性"><a href="#3-1-flex-direction属性" class="headerlink" title="3.1 flex-direction属性"></a>3.1 flex-direction属性</h6><p>flex-direction属性决定主轴的方向（即项目的排列方向）。</p><pre><code>.box {  flex-direction: row | row-reverse | column | column-reverse;}</code></pre><p>它可能有4个值。</p><blockquote><ul><li>row（默认值）：主轴为水平方向，起点在左端。<ul><li>row-reverse：主轴为水平方向，起点在右端。</li><li>column：主轴为垂直方向，起点在上沿。</li><li>column-reverse：主轴为垂直方向，起点在下沿。</li></ul></li></ul></blockquote><h6 id="3-2-flex-wrap属性"><a href="#3-2-flex-wrap属性" class="headerlink" title="3.2 flex-wrap属性"></a>3.2 flex-wrap属性</h6><p>默认情况下，项目都排在一条线（又称”轴线”）上。flex-wrap属性定义，如果一条轴线排不下，如何换行。</p><pre><code>.box{  flex-wrap: nowrap | wrap | wrap-reverse;}</code></pre><p>它可能取三个值。</p><blockquote><ol><li>nowrap（默认）：不换行。</li><li>wrap：换行，第一行在上方。</li><li>wrap-reverse：换行，第一行在下方。</li></ol></blockquote><h6 id="3-3-flex-flow"><a href="#3-3-flex-flow" class="headerlink" title="3.3 flex-flow"></a>3.3 flex-flow</h6><p>flex-flow属性是flex-direction属性和flex-wrap属性的简写形式，默认值为row nowrap。</p><pre><code>.box {  flex-flow: &lt;flex-direction&gt; || &lt;flex-wrap&gt;;}</code></pre><h6 id="justify-content属性"><a href="#justify-content属性" class="headerlink" title="justify-content属性"></a>justify-content属性</h6><p>justify-content属性定义了项目在主轴上的对齐方式。</p><pre><code>.box {  justify-content: flex-start | flex-end | center | space-between | space-around;}</code></pre><p>它可能取5个值，具体对齐方式与轴的方向有关。下面假设主轴为从左到右。</p><blockquote><ul><li>flex-start（默认值）：左对齐</li><li>flex-end：右对齐</li><li>center： 居中</li><li>space-between：两端对齐，项目之间的间隔都相等。</li><li>space-around：每个项目两侧的间隔相等。所以，项目之间的间隔比项目与边框的间隔大一倍。</li></ul></blockquote><h6 id="3-5-align-items属性"><a href="#3-5-align-items属性" class="headerlink" title="3.5 align-items属性"></a>3.5 align-items属性</h6><p>align-items属性定义项目在交叉轴上如何对齐。</p><pre><code>.box {  align-items: flex-start | flex-end | center | baseline | stretch;}</code></pre><p>它可能取5个值。具体的对齐方式与交叉轴的方向有关，下面假设交叉轴从上到下。</p><blockquote><ul><li>flex-start：交叉轴的起点对齐。</li><li>flex-end：交叉轴的终点对齐。</li><li>center：交叉轴的中点对齐。</li><li>baseline: 项目的第一行文字的基线对齐。</li><li>stretch（默认值）：如果项目未设置高度或设为auto，将占满整个容器的高度。</li></ul></blockquote><h6 id="3-6-align-content属性"><a href="#3-6-align-content属性" class="headerlink" title="3.6 align-content属性"></a>3.6 align-content属性</h6><p>align-content属性定义了多根轴线的对齐方式。如果项目只有一根轴线，该属性不起作用。</p><pre><code>.box {  align-content: flex-start | flex-end | center | space-between | space-around | stretch;}</code></pre><p>该属性可能取6个值。</p><blockquote><ul><li>flex-start：与交叉轴的起点对齐。</li><li>flex-end：与交叉轴的终点对齐。</li><li>center：与交叉轴的中点对齐。</li><li>space-between：与交叉轴两端对齐，轴线之间的间隔平均分布。</li><li>space-around：每根轴线两侧的间隔都相等。所以，轴线之间的间隔比轴线与边框的间隔大一倍。<pre><code>stretch（默认值）：轴线占满整个交叉轴。</code></pre></li></ul></blockquote><h5 id="四、项目的属性"><a href="#四、项目的属性" class="headerlink" title="四、项目的属性"></a>四、项目的属性</h5><p>以下6个属性设置在项目上</p><blockquote><ul><li>order</li><li>flex-grow</li><li>flex-shrink</li><li>flex-basis</li><li>flex</li><li>align-self</li></ul></blockquote><h6 id="4-1-order属性"><a href="#4-1-order属性" class="headerlink" title="4.1 order属性"></a>4.1 order属性</h6><p>order属性定义项目的排列顺序。数值越小，排列越靠前，默认为0。</p><pre><code>.item {  order: &lt;integer&gt;;}</code></pre><h6 id="4-2-flex-grow属性"><a href="#4-2-flex-grow属性" class="headerlink" title="4.2 flex-grow属性"></a>4.2 flex-grow属性</h6><p>flex-grow属性定义项目的放大比例，默认为0，即如果存在剩余空间，也不放大。</p><pre><code>.item {  flex-grow: &lt;number&gt;; /* default 0 */}</code></pre><p>如果所有项目的flex-grow属性都为1，则它们将等分剩余空间（如果有的话）。如果一个项目的flex-grow属性为2，其他项目都为1，则前者占据的剩余空间将比其他项多一倍。</p><h6 id="4-3-flex-shrink属性"><a href="#4-3-flex-shrink属性" class="headerlink" title="4.3 flex-shrink属性"></a>4.3 flex-shrink属性</h6><p>flex-shrink属性定义了项目的缩小比例，默认为1，即如果空间不足，该项目将缩小。</p><pre><code>.item {  flex-shrink: &lt;number&gt;; /* default 1 */}</code></pre><p>如果所有项目的flex-shrink属性都为1，当空间不足时，都将等比例缩小。如果一个项目的flex-shrink属性为0，其他项目都为1，则空间不足时，前者不缩小。</p><p>负值对该属性无效。</p><h6 id="4-4-flex-basis属性"><a href="#4-4-flex-basis属性" class="headerlink" title="4.4 flex-basis属性"></a>4.4 flex-basis属性</h6><p>flex-basis属性定义了在分配多余空间之前，项目占据的主轴空间（main size）。浏览器根据这个属性，计算主轴是否有多余空间。它的默认值为auto，即项目的本来大小。</p><pre><code>.item {  flex-basis: &lt;length&gt; | auto; /* default auto */}</code></pre><p>它可以设为跟width或height属性一样的值（比如350px），则项目将占据固定空间。</p><h6 id="4-5-flex属性"><a href="#4-5-flex属性" class="headerlink" title="4.5 flex属性"></a>4.5 flex属性</h6><p>flex属性是flex-grow, flex-shrink 和 flex-basis的简写，默认值为0 1 auto。后两个属性可选。</p><pre><code>.item {  flex: none | [ &lt;&apos;flex-grow&apos;&gt; &lt;&apos;flex-shrink&apos;&gt;? || &lt;&apos;flex-basis&apos;&gt; ]}</code></pre><p>该属性有两个快捷值：auto (1 1 auto) 和 none (0 0 auto)。</p><p>建议优先使用这个属性，而不是单独写三个分离的属性，因为浏览器会推算相关值。</p><h6 id="4-6-align-self属性"><a href="#4-6-align-self属性" class="headerlink" title="4.6 align-self属性"></a>4.6 align-self属性</h6><p>align-self属性允许单个项目有与其他项目不一样的对齐方式，可覆盖align-items属性。默认值为auto，表示继承父元素的align-items属性，如果没有父元素，则等同于stretch。</p><pre><code>.item {  align-self: auto | flex-start | flex-end | center | baseline | stretch;}</code></pre><p>该属性可能取6个值，除了auto，其他都与align-items属性完全一致。</p>]]></content>
      
      
      <categories>
          
          <category> web前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flex </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Chrome扩展程序</title>
      <link href="/2018/08/15/Chrome%E6%89%A9%E5%B1%95%E7%A8%8B%E5%BA%8F/"/>
      <url>/2018/08/15/Chrome%E6%89%A9%E5%B1%95%E7%A8%8B%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<blockquote><p>这几天对学习的热情减了大半，在学习一些东西的时候没有实践，时间这么稍微一长，便力不从心。今天来推荐几款Chrome好用的扩展程序。<br>以下扩展程序的一部分是我在初试时使用的直接推荐，可能还有很多更赞的扩展程序，大家可以上网搜索。</p></blockquote><h5 id="1-Screenshot（FireShot）"><a href="#1-Screenshot（FireShot）" class="headerlink" title="1.Screenshot（FireShot）"></a>1.Screenshot（FireShot）</h5><blockquote><p><code>Screenshot</code>是一款很好的网页截图工具，整个网页的截图功能很赞。<br>其中在多处看到的推荐的网页截图是<code>FireShot</code>，因为用过ScreenShot，也就懒得尝试。</p></blockquote><a id="more"></a><h5 id="2-Google-Keep"><a href="#2-Google-Keep" class="headerlink" title="2.Google Keep"></a>2.Google Keep</h5><blockquote><p>网页收藏、笔记记录，相比较标签收藏，更赞一些。</p></blockquote><h5 id="3-选择器"><a href="#3-选择器" class="headerlink" title="3.选择器"></a>3.选择器</h5><blockquote><p>对于开发人员来说，色彩的选择是一个问题，这款扩展程序很好的解决了开发人员的选色问题，而不必打开截图软件或者PS等进行选色。</p></blockquote><h5 id="4-office-online"><a href="#4-office-online" class="headerlink" title="4.office online"></a>4.office online</h5><blockquote><p>无需在计算机上安装Office就查看和编辑Microsoft Word、Excel和PowerPoint文件 。安装了该扩展程序之后，如果您将Office文件拖放到Chrome中，或者在Gmail和Google云端硬盘等产品中打开Office文件，则相应的Office文件就会在Google文档、表格和幻灯片中打开，供您查看和编辑。您可以按照原始Office格式保存每个文件，也可以将其转换为Google文档、表格或幻灯片格式，从而开启更多功能，诸如邀请他人与您协同编辑、添加评论以及聊天等。</p></blockquote><h5 id="5-印象笔记"><a href="#5-印象笔记" class="headerlink" title="5.印象笔记"></a>5.印象笔记</h5><blockquote><p>它是有印象笔记evernote推出的一款剪藏插件，可以一键收藏各类网页图文，并永久保存进Evernote。同时，还能选择保存网页正文、隐藏广告、整个页面、网页截屏等，让你根据不同需求，选择保存内容。告别复制粘贴，高效收集资料！</p></blockquote><h5 id="6-谷歌翻译"><a href="#6-谷歌翻译" class="headerlink" title="6.谷歌翻译"></a>6.谷歌翻译</h5><blockquote><p>Google翻译是一款由谷歌公司提供的网页划词翻译插件，是Google Chrome的翻译扩展工具，由Google官方发布。安装后，会在Chrome浏览器菜单栏中添加一个按钮，可以方便的在任何时候点击翻译你当前正在访问的页面。可能有人会说现在翻译软件那么多，桌面上金山词霸，有道词典等软件很多，可以很快速的帮助用户翻译词语，但是软件肯定是会占用电脑内存的，这无疑增加了我们电脑的负担，有时候用户还不得不卸载软件。但是这款google翻译插件就完美的解决了这个问题，既可以好好学习英语，翻译词语还不用占空间。我们知道Chrome内核的浏览器越来越多，比如Google浏览器、百度浏览器、360急速浏览器等，在这些浏览器中有些集成了浏览器插件，在Google浏览器下载后是没有google翻译插件的，所以需要单独下载浏览器插件。</p></blockquote><h5 id="7-Custom-Cursor-for-Chrome™-自定义光标"><a href="#7-Custom-Cursor-for-Chrome™-自定义光标" class="headerlink" title="7.Custom Cursor for Chrome™ - 自定义光标"></a>7.Custom Cursor for Chrome™ - 自定义光标</h5><blockquote><p>浏览谷歌浏览器时，光标有没有看腻的感觉，这个扩展程序提供了几百种光标，很赞的一个功能是提供自定义图标，这个小扩展挺好用的。</p></blockquote><h5 id="8-Google-环聊"><a href="#8-Google-环聊" class="headerlink" title="8.Google 环聊"></a>8.Google 环聊</h5><blockquote><p>当然有网情况下，QQ、钉钉、微信聊天无疑是使用最广泛的，但是这个小扩展程序感觉也是很美好的，我安装了这个扩展程序，无奈无人与我沟通，所以也没体验，欢迎骚扰，邮箱：<a href="mailto:liumz19941205@gmail.com" target="_blank" rel="noopener">liumz19941205@gmail.com</a>。</p></blockquote><blockquote><p>谷歌扩展程序是可好东西，作为一名开发人员可以大大降低我们的开发效率，也可以免安装许多软件，更多扩展程序可以查看推荐,还有一些社交、游戏等等的扩展程序。</p></blockquote><blockquote><p>这篇文章记录了如何在离线环境下进行扩展程序的安装：<br><a href="https://blog.csdn.net/yshenhua/article/details/80901677" target="_blank" rel="noopener">https://blog.csdn.net/yshenhua/article/details/80901677</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 编程概念类 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Chrome </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搭建个人-博客极简</title>
      <link href="/2018/07/11/%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%9E%81%E7%AE%80/"/>
      <url>/2018/07/11/%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%9E%81%E7%AE%80/</url>
      
        <content type="html"><![CDATA[<blockquote><p>进入<a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener">HEXO</a>官方文档，可以查看完全的个人博客的搭建。<br>本文只是对个人在搭建博客过程中，极简的总结，几乎涵盖搭建一个个人免费博客的全部命令，还是非常推荐去官方网站学习。</p></blockquote><h6 id="一、官网主题"><a href="#一、官网主题" class="headerlink" title="一、官网主题"></a>一、官网主题</h6><p>在搭建个人博客本地版的时候，总共使用五个命令就好了。</p><blockquote><p>1.npm install hexo-cli -g<br>2.cd DeskTop<br>3.hexo init liugezhou<br>4.npm install<br>5.hexo s</p></blockquote><a id="more"></a><p>此时，本地效果图如下：<br><img src="http://img.liugezhou.online/hexo.png" alt="hexo.png"></p><h6 id="二、更改主题"><a href="#二、更改主题" class="headerlink" title="二、更改主题"></a>二、更改主题</h6><pre><code>$ git clone https://github.com/Haojen/hexo-theme-Anisina.git themes/lmz</code></pre><h6 id="三、项目部署"><a href="#三、项目部署" class="headerlink" title="三、项目部署"></a>三、项目部署</h6><pre><code>$  npm install hexo-deployer-git --save$  hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</code></pre><h6 id="四、效果查看"><a href="#四、效果查看" class="headerlink" title="四、效果查看"></a>四、效果查看</h6><p>初次搭建的博客效果：<a href="https://www.liugezhou.online/" target="_blank" rel="noopener">https://www.liugezhou.online/</a><br>PC版：<br><img src="http://img.liugezhou.online/primary.png" alt="liugezhou.online.png"></p>]]></content>
      
      
      <categories>
          
          <category> HEXO博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>npm intsall -save 和-save-dev</title>
      <link href="/2018/06/28/npm%20intsall%20-save%20%E5%92%8C-save-dev/"/>
      <url>/2018/06/28/npm%20intsall%20-save%20%E5%92%8C-save-dev/</url>
      
        <content type="html"><![CDATA[<p>关于npm在安装的时候，有个小的知识点，一定要小小的补一下，那就是npm install 后面带参数的问题。<br>相信不少在开始接触node的时候，我们肯定都使用过这样的命令<br><code>npm install -save</code> | <code>npm install -save-dev</code> | <code>npm install -g [--global]</code><br>但是这些<code>-save</code> | <code>-save-dev</code> | <code>-g</code>的一些小小的区别是什么呢?</p><a id="more"></a><h6 id="npm-install-moduleName-命令"><a href="#npm-install-moduleName-命令" class="headerlink" title="npm install moduleName 命令"></a>npm install moduleName 命令</h6><blockquote><p>1.安装模块到项目node_modules目录下。<br>2.不会将模块依赖写入devDependencies或dependencies 节点。<br>3.运行 npm install 初始化项目时不会下载模块。</p></blockquote><h6 id="npm-install-g-moduleName-命令"><a href="#npm-install-g-moduleName-命令" class="headerlink" title="npm install -g moduleName 命令"></a>npm install -g moduleName 命令</h6><blockquote><p>1.安装模块到全局，不会在项目node_modules目录中保存模块包。<br>2.不会将模块依赖写入devDependencies或dependencies 节点。<br>3.运行 npm install 初始化项目时不会下载模块。</p></blockquote><h6 id="npm-install-save-moduleName-命令"><a href="#npm-install-save-moduleName-命令" class="headerlink" title="npm install -save moduleName 命令"></a>npm install -save moduleName 命令</h6><blockquote><p>1.安装模块到项目node_modules目录下。<br>2.会将模块依赖写入dependencies 节点。<br>3.运行 npm install 初始化项目时，会将模块下载到项目目录下。<br>4.运行npm install –production或者注明NODE_ENV变量值为production时，会自动下载模块到node_modules目录中。</p></blockquote><h6 id="npm-install-save-dev-moduleName-命令"><a href="#npm-install-save-dev-moduleName-命令" class="headerlink" title="npm install -save-dev moduleName 命令"></a>npm install -save-dev moduleName 命令</h6><blockquote><p>1.安装模块到项目node_modules目录下。<br>2.会将模块依赖写入devDependencies 节点。<br>3.运行 npm install 初始化项目时，会将模块下载到项目目录下。<br>4.运行npm install –production或者注明NODE_ENV变量值为production时，不会自动下载模块到node_modules目录中。</p></blockquote><p>总结</p><blockquote><p>devDependencies 节点下的模块是我们在开发时需要用的，比如项目中使用的 gulp ，压缩css、js的模块。这些模块在我们的项目部署后是不需要的，所以我们可以使用 -save-dev 的形式安装。像 express 这些模块是项目运行必备的，应该安装在 dependencies 节点下，所以我们应该使用 -save 的形式安装。</p></blockquote><h6 id="添加一个npm-install的小知识点-2020-01-11"><a href="#添加一个npm-install的小知识点-2020-01-11" class="headerlink" title="添加一个npm install的小知识点(2020-01-11)"></a>添加一个npm install的小知识点(2020-01-11)</h6><blockquote><p>npm init 命令用来初始化一个简单的 package.json 文件。<br>而如果想要偷懒步免去一直按 enter，在命令后追加 –yes 参数即可，其作用与一路下一步相同。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm init --yes</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> web前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> npm intsall </tag>
            
        </tags>
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title>分类</title>
      <link href="/categories/index.html"/>
      <url>/categories/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>标签</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>工具收藏</title>
      <link href="/websitelink/index.html"/>
      <url>/websitelink/index.html</url>
      
        <content type="html"><![CDATA[<h3 id="第三方网站构建"><a href="#第三方网站构建" class="headerlink" title="第三方网站构建"></a>第三方网站构建</h3><hr><h4 id="吐个槽"><a href="#吐个槽" class="headerlink" title="吐个槽"></a><a href="https://tucao.qq.com/" target="_blank" rel="noopener">吐个槽</a></h4><blockquote><p>吐个槽反馈平台。几行代码 拥有和腾讯网一样的互动社区。<br>让运营人员不再疲于运营,无需登录后台即可简单管理,你与客户的沟通平台永远简洁有序.<br>如果你是程序员,何必自建反馈,几行代码将吐个槽入放在任何地方，包括公众号、APP、H5、网站等.<br>帮产品经理,微信推送回复,户通过微信收到你的回复,你与用户沟通更加高效 .</p></blockquote><h4 id="Tidio"><a href="#Tidio" class="headerlink" title="Tidio"></a><a href="https://www.tidio.com/panel/dashboard" target="_blank" rel="noopener">Tidio</a></h4><blockquote><p>Tidio Chat 是一款界面极其简洁的网页即时聊天工具.</p></blockquote><h3 id="开发者"><a href="#开发者" class="headerlink" title="开发者"></a>开发者</h3><hr><h4 id="Font-Awesome中文网"><a href="#Font-Awesome中文网" class="headerlink" title="Font Awesome中文网"></a><a href="http://www.fontawesome.com.cn/faicons/" target="_blank" rel="noopener">Font Awesome中文网</a></h4><blockquote><p>本网站用到的所有icon均为此直接选词调用</p></blockquote><h4 id="Table-Convert-Online"><a href="#Table-Convert-Online" class="headerlink" title="Table Convert Online"></a><a href="https://tableconvert.com/" target="_blank" rel="noopener">Table Convert Online</a></h4><blockquote><p>一个网页工具，可以在线表格转成 Markdown、JSON、HTML、XML、YAML 等数据格式，并支持格式之间互相转化。</p></blockquote><h4 id="zenflowchart"><a href="#zenflowchart" class="headerlink" title="zenflowchart"></a><a href="https://www.zenflowchart.com" target="_blank" rel="noopener">zenflowchart</a></h4><blockquote><p>一可以制作流程图的简易在线网站。</p></blockquote><h4 id="算法可视化"><a href="#算法可视化" class="headerlink" title="算法可视化"></a><a href="https://algorithm-visualizer.org/branch-and-bound/binary-search" target="_blank" rel="noopener">算法可视化</a></h4><blockquote><p>该网站收集了50多种算法，每种算法都有可视化动画和示例代码。</p></blockquote><h4 id="APIJSON"><a href="#APIJSON" class="headerlink" title="APIJSON"></a><a href="https://github.com/APIJSON/APIJSON" target="_blank" rel="noopener">APIJSON</a></h4><blockquote><p>自动化接口管理工具，后端自动生成接口文档，前端可以定制任何数据、任何结构.</p></blockquote><h3 id="oktools"><a href="#oktools" class="headerlink" title="oktools"></a><a href="https://oktools.net/" target="_blank" rel="noopener">oktools</a></h3><blockquote><p>该网站收集了程序员需要的10多个在线小工具，包含JSON 格式化、Base64 编解码、颜色值转换、图片压缩、正则测试、时间戳转换、HASH 计算等。</p></blockquote><h3 id="设计图片相关"><a href="#设计图片相关" class="headerlink" title="设计图片相关"></a>设计图片相关</h3><hr><h4 id="无版权美丽图片"><a href="#无版权美丽图片" class="headerlink" title="无版权美丽图片"></a><a href="https://www.ssyer.com/home" target="_blank" rel="noopener">无版权美丽图片</a></h4><blockquote><p>美丽的图片，可做背景图片使用</p></blockquote><h4 id="无版权插图的网站"><a href="#无版权插图的网站" class="headerlink" title="无版权插图的网站"></a><a href="https://gallery.manypixels.co/category" target="_blank" rel="noopener">无版权插图的网站</a></h4><blockquote><p>一个收集无版权插图的网站，提供 SVG / PNG 格式下载，并且允许更改颜色。</p></blockquote><h4 id="图片压缩–网站"><a href="#图片压缩–网站" class="headerlink" title="图片压缩–网站"></a><a href="https://www.iloveimg.com/zh-cn/compress-image/compress-jpg" target="_blank" rel="noopener">图片压缩–网站</a></h4><blockquote><p>有的时候你需要快速对一张图片进行压缩，可以收藏此网站，方便下回使用，降低搜索成本。</p></blockquote><h3 id="设计网站大全"><a href="#设计网站大全" class="headerlink" title="设计网站大全"></a><a href="http://hao.shejidaren.com/index.html" target="_blank" rel="noopener">设计网站大全</a></h3><blockquote><p>做设计的应该去关注的一个网站，此网站的知识、工具等聚合应该会让做设计的人产生一丝共鸣。</p></blockquote><h3 id="美化二维码"><a href="#美化二维码" class="headerlink" title="美化二维码"></a><a href="http://www.mobanma.com" target="_blank" rel="noopener">美化二维码</a></h3><blockquote><p>之前二维码的制作用的是草料二维码，无意间发现这样一个网站，也是关于二维码的制作。</p></blockquote><h3 id="CSS相关"><a href="#CSS相关" class="headerlink" title="CSS相关"></a>CSS相关</h3><hr><h4 id="CSS-ARROW-PLEASE"><a href="#CSS-ARROW-PLEASE" class="headerlink" title="CSS ARROW PLEASE"></a><a href="http://www.cssarrowplease.com/" target="_blank" rel="noopener">CSS ARROW PLEASE</a></h4><blockquote><p>这是一个在线生成气泡的工具，你可以在线制作一个你需要的气泡，可以调整宽度大小、颜色，箭头方向，边框等属性，是一款非常好用的工具.</p></blockquote><h4 id="CSS-Load"><a href="#CSS-Load" class="headerlink" title="CSS Load"></a><a href="https://icons8.com/cssload/" target="_blank" rel="noopener">CSS Load</a></h4><blockquote><p>这是一款纯代码制作loading效果的工具，里面也提供了非常多的案例供大家学习使用。</p></blockquote><h4 id="CSS-triangle-generator"><a href="#CSS-triangle-generator" class="headerlink" title="CSS triangle generator"></a><a href="http://apps.eky.hk/css-triangle-generator/" target="_blank" rel="noopener">CSS triangle generator</a></h4><blockquote><p>CSS triangle generator是一款在线制作三角图形的工具</p></blockquote><h4 id="Webarti-CSS3-Button-Maker"><a href="#Webarti-CSS3-Button-Maker" class="headerlink" title="Webarti CSS3 Button Maker"></a><a href="https://www.bestcssbuttongenerator.com/" target="_blank" rel="noopener">Webarti CSS3 Button Maker</a></h4><blockquote><p>Webarti CSS3 Button Maker是一款非常强大的按钮在线生成工具，有非常多样式可以供你选择，里面的按钮颜色，大小，文字，你可以随意设置，当你设定好后，点【Get Code】按钮，你就可以得到按钮的CSS代码.</p></blockquote><h4 id="盒子阴影box-shadow"><a href="#盒子阴影box-shadow" class="headerlink" title="盒子阴影box-shadow"></a><a href="https://www.themeshock.com/css-drop-shadow/" target="_blank" rel="noopener">盒子阴影box-shadow</a></h4><blockquote><p>这款阴影工具可以在线直接生成不同类型的阴影效果，也可是非常方便的调整阴影大小，如果你不知道怎么写阴影效果，你借用这个在线工具进行直接生成你想要的阴影效果。</p></blockquote><h4 id="border-image工具"><a href="#border-image工具" class="headerlink" title="border-image工具"></a><a href="https://border-image.com/" target="_blank" rel="noopener">border-image工具</a></h4><blockquote><p>这是一款可以在线设置边框的工具，通过这款工具，可以非常轻松的学习了解border-image这个属性。</p></blockquote>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>Secret</title>
      <link href="/collectionlink/index.html"/>
      <url>/collectionlink/index.html</url>
      
        <content type="html"><![CDATA[<script src="https://ajax.aspnetcdn.com/ajax/jQuery/jquery-3.4.1.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="你需要输入密码访问." />    <label for="pass">你需要输入密码访问.</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">U2FsdGVkX1+PMdrWpoS5YcslB2S9Sgz3puo8ErYJJ4bPIe/Ew4+hfZUDmIIKnf/3L1okBt/3lAvpDI9w714Ger+Mg+1++OwKleB/NGHZ1wWAyOE9jM8Jn6mc/BC2xJwX2Bs06UCRItv6TNQQsXod/NHHzQ568YwpWlwcQ3z+ZOjXe9ey8wVILbYmKKiQCMzwqm/I3iDeYWDQcpYMDTAiL5mPDFcL8SqF+LUwgz/cLb/gNqpQuKXAla/SgMFQ6w9fQST/+d8zt6/1EDClBnMuUWH55+3DuGSxBLslWoILSoIXZ6Tvp7zvBEaNVsIER3iMGPyZ6HUKDflJhtzpsc1rgMdUukxDfdZRDY1F+3sn7Kb0wCPcdkxvUYJuSdvfQsexi7VVzEuOVUOBA8sFqLdRzgh6GBkvC/cWeQMNrljuaja9kOZUvoG4wuA6EVQOhLqcAuV0mijxkPUH5oqw/tXxJiVnWPE1LOmhLaei4/FLAJ+mgsxAYlTPjl0v0H+1Ei4IKkA20V8cD1BGHr3ZIm6AVMlx8lZxzsip9rBS8cDZpOCsGT3lu4nH7bu2S+KdsptOJOR0pMiGZRThPouoWqgCGaIFdn9Wk938MjA05o2uvX00m/8AG8/GapP64guKyioHnyppRijIB/bZhbAaG02RuAllpRWSR84AY7DSCNZRDEFf9rV8kNpIxjgjmV59CUesnQIL5ffamaYcAv6MvK6PeNRJZZ5kgbG8p941UYhjJL1FEIcFDWeua97tB2lMT07ZYLid8gFe9TL75TYwBUsFmh/njGH5fyGssfYci1VTgcpQCZxNgwaoeiMYWH8/NTlW+ophmuWzhg7xtKvmrPgyeXHeHQYEpg1vLpQpMz4wEG+gXuVmMn+E0lIpcbMC1fKpkQZIZZpRpAoJ4WGFnpo3aI0HzmL6th1dV9zNRvc0WJ0kaoa5PJpe8UO3NcfSdI9InjqlOyJ2pp/j2VO9PDmZbtPg4mO4D8/MnQIQFXHdXZkhPmYEcVl69cAuHkCCz/ziMPmhwXeYiTPsB5lspnUlfCX9mL6LQm+YzhWFYc6bGTF75ldu9Cz+o0NTaoS7uQ6D2aCuNkdSug1khIb6d/5u1Z/ALxtnh7m2UZT6cagmJF9mBaGAJhWdl0Hemu8DbrZW7ri1ztMmMQWoLRRuV3iGB9rllB1OgzFDCJI46JXZvbWiiU77+51XjFF4nFIObLQO0tfZRgkDjN1OHXTQvBCSIOuztD0M9bnFEFGbj3yNs+9gbZNNgdueef64gt2qTS/gWQvHzb4sX1dgGAJOCF8w30vXmNVpO+sfCTmS5TB1a6h6HuElaQ61y6DZoSHGecAj4nt4HZ5Qk9KwH2Rs0fZe3C/0RP7OkkShqulwYFNOT2SRUS5Id34WjvbTcRzSrgnTqUIzpCeTJED41gFbY0gXjul/PHDhEmgKaCx37/dt89G+smE5yQ/XaCZ2hDNp9+2Yc25qiFlR8V5/Cy01VjjRVNVkuN0S7ya6pHC44GIEv75vb2AiHoqcllwQY05HnEXPzTbqaf51v9BiA6iUs8ulJixGfPW1bGXu2/dIuj0W0rFc9KGzN3PpiyKGK1Lo9Aa1e4m/td1FEFIpvmpvzM0r0POI//hc8wKCVaachTjpk15/Um13HfUpFPx6PlUSPVaXVAuuow8QQCRLmsvrZA/FvoXBA6lDe6laqBD2Z+NEtThNZDS0OfPSp1j5fXLvwmG5jLlu5alyMN8Fb9Zxlz7ASjn5wqfTjwenE2GVOP2Z+f7DzHRpY+OJf9R2y2IWgsY7M2FR2/mkXYn0vZualZp2O4dAtEhJpQsP7Ne1wtDLrgQsmjnloeOvSz/akThfoAEpcYfirCkPDPor76npE24GnCV3f1RJ9W46oNUJTNUOOFofopvVlkfizItZ+uC+HZ+RxHyOXJXl3UASamtVBFO0+latwNvx6002Uw6dJN3iocLfDsIRGsLtXEbF4tdpT1iYOZWOKaaBY9mWpd82ZaTIAd4f/1oNZqEj1T0NiZLrBTHVLVlUcd7SDg3jNq4VO1oUMDmoxTXNV/EOlqwrF0nOKqkvO6/OdQrOk1PfOXKa6WndIT5Y5YjqNU7p4vLxavRIl3PtlJsBHVGlIEll9Mdb0F8idRsWXGQ3B8a6YSpjb9RNHXH5MmpNyLN2VzOGwsLyxTtn7S+HaJoTF1t3titWZtShgENv5ZNyO2esiVT4BaVn9YXbU4ZLrns4MQFORlUWxIgF34P92KraXe1uxLg3/YZEuPNLgYc2N/8TGP/U6HJOJdeJFemxYnBKqJWZFEhtE/ZP2HsVn/F7aMFHgPJMndAUPq8RobUQ1yjNmerRG9nIR3yuZIErQvbUcBicJUCLwCGkTREN/oRuMaOm4z2Uda7QtdTmATdnm9dp/xiMZ/BjoSfYiRP6PyxDR0UTlmuW6hYnmVhsqZeAA/NiwH+nkrz/0xeOUYaQDX5udrQxhtIqTBVOMUHHWzDw68bMh8vyctF0JfCU100yJCTEJ3e1XODhk3ol7OONFMDqX1Vw4mgOvEVS/57+MpaU8bKZUXrqm/NDfsWeKSJo/TNzW4ObMIoefAXIdnG9V5foXhTBIbuLlEAGVYKVayTfx2FtvzFEsT08gXz8vuLmvrTXZ+dMBcICmKAHCTjbasQjheRiqXNUkB0YrUBHOs95mzOgDRdxLDodln7+pwwSsDufV4RmSYp3D84TqsTmY7tauQvxHbE2yi1GlbqvM6sSYXfaeMj11oUDPBcpU2e0lhUbIzM/T7MXaFVDX+Kcib79IBrzP/R45+uMtdc6dyJ+BZa0b8p5HpY2lyql139Wp9EQ9SD/zEfmOrH9KbtZYxOi3x5yYpKys1V12VoHN4hTVyzV5ZVxCoLVuUskQ9TL4BldziGG3QjE/hxYlNb8iFT9TNx9eweP9HEtKBxPszKrhT3MMk8YKnTih9aq648iPkQpf0dPzh0uILdUOuBFw6crOp+fUFHODU8qlMM6daYqvxr9KrBN5NOQbtknbHS3qiQTWf+FV+5jmyuDGD87epBv0C2Eu6WWvdrwzo1GNsKOS5/fjiVluimr30R7UjGIIKfR6BLnW6SNJDo5xZ7qBf9Pzum+w/fThLSMj31c0cGIoGo7ZiySYx5C+JsViLNtWeQWl40ae7fYfQhIv6egTSQuiOxuivo6EfY7vrTfYC8/2TdR9lQ4DDmpc+LP10qvDJfCLx8bJNg2vNW+SfqaRB7RL0MZ5Dbs5qAbNHVXnOQ/KjFY9mT/cQRPBjvv5seT1pEMstiOWaVcomI4BQ703lfTNOUqpR1CMVtT4DDwLO1uTTniT54gDWOM6/li3YrF+8V5AZNAMM3dHsv7xk6Rl0coVda/FdhYToUHwdF+gkISulIC7nyKJ1ymlP7YdEMhmrZk0FeTqwv+8fqj35gJllJF+lRA/bnTTilCMgFA6bTjazaEhgfO///JvNSAWvFyoQCLCKIHz+5Pmh7mFfQwsTw4pQgokE05BAB63JkQT6hptTvupvJTUFSrZYYQ1fMvGyNw8p2tIC/iKn98BXLXrxFtIrbJcDab9MoSuWVwrCXPcEUa5RaJAqd3aQhBCwjCGntb/4Di9NA+4stfIUSnIflKXYzM6T6epUYWhKQ6zQXoDvzE9x92pDD9CfQC9zs7Z6L644QC1Bu26J9Lk6tuYMi6rjAb+q8/K0ZJvjRbDMw1NhjLL1RVN7MY3CaIotS6CMchG6H01aPFj3Ko9vgQIwNEV2c5Jth50AogiibmNycqODjZ5JwR9S4uRy9y2Mw7YSOzg3Iuy20hd/KGugPgGQF3NTKA0sZ6MOIvox+naAz6cz+sBHtYEy2xesqzY4JIaUm/LOVZNxszRtqa3Qe/bsP3tiUvHkRVSO7PIlO5Q2bJ2Q6aSgPXDjO2DUFKOb4MH8kK6M1DrBjowD8Ee/SpLwIXmZ8SlaWtlRyxV2UHaxhkXq48kRtszwQ6kpxQcfIBYd5qIY8HYStLr+weliDAnpKm0x6CNo29n9nYW93u2fjH4dcuOY9cAH4LpjCiIY9uGdYHpJP/Xny3n5bjuByDsABCUsI1vjt+OzHmNFQ870A2kZXok2G4c5MJ9qro0SQJSd7AEkkL/F0dksyeTO6kXQWZfUcihd5b+UaNT2fTKg3XcVdHLAzB6YKPMwmrAB1I8pcH2J1lxNOTgu66GFrOg/slIP7moI2FDlpaM8iRJJKvCGNakGlNiHVg9yY4nkpVjg0TwiPJaGr/8jtPBURrvob8yjcjWsS0m1y9P4RpK6ru7IF5jdOf3c6HA+4duGF/pwgkhQX6wV3x/0LItkqwBp6LpBawaudP22HaNIinbh7aH1zy5km31DCsdzyj25dk/Acfi+gQZPA8T5rDgZNEAyqk1/FXQGf9hLiHRVL6/3tI2Bj9SBQ4hDHdE+WR3YoUFOd0F3hbh8Y+X7Ajv3R/qs+Cn6i9kC+YQfr1PFH9lM4B4JQegdyNoGZORcFriPzVtQc3Ghs8RhyMbrI8kgPZLW2/DE0R00ADfYhIdKFruRwP33Kxm05dwBjspPQlzblszBMZ1qE1q3SUVRMnxfL0MVWRHrf725s=</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
    </entry>
    
    
  
</search>
